BeginPackage("Java`", {"ExperimentalSyntax`"})

Java`Java
Java`JavaClass
Java`JavaClassAsObject
Java`JavaCall
Java`JavaException
Java`JavaField
Java`JavaKillVM
Java`JavaNew
Java`JavaObject
Java`JavaStartVM
Java`$JavaVMLibraryName
Java`$JavaInstalledVMs
Java`$DefaultClassPath

Java`AddToClassPath
Java`ClassName
Java`GetClass
Java`InstanceOf
Java`IsJavaObject
Java`JavaIsRunning
Java`ParentClass

Java`Constructors
Java`Methods
Java`Fields

Java`ImplementJavaClass

Begin("Java`Private`")


Java::argx:= "Method named `1` defined in class `2` was called with an incorrect number or type of arguments. The arguments, shown here in a list, were `3`."
Java::argx0:= "Method named `1` defined in class `2` does not take zero arguments."
Java::fldx:= "Attempting to set field named `1` defined in class `2` to an incorrect type of value: `3`."
Java::nocls:= JavaNew::nocls:= "Class named `1` not found."
Java::nofld:= "No field `1` defined in class `2`."
Java::nometh:= "No method `1` defined in class `2`."
Java::noobj:= "`1` is not a Java object."
Java::nobcl:= "`1` is neither a Java object nor a Java class."

JavaNew::argx:= "Incorrect number or type of arguments to constructor for class `1`. The arguments, shown here in a list, were `2`."
JavaNew::argx0:= "There is no constructor for class `1` that takes zero arguments."
JavaNew::fail:= "Error calling constructor for class `1`."

JavaNew::ex:= JavaCall::ex:= "Exception crossing pMath-to-Java boundary: `1`"


AddToClassPath::usage:= "AddToClassPath(\"\(StyleBox(\"location\", \"Arg\")\)\(SubscriptBox(\"1\")\)\", \"\(StyleBox(\"location\", \"Arg\")\)\(SubscriptBox(\"2\")\)\", \[Ellipsis]) adds the specified directories or jar/zip files to the java class path. All locations should be full paths."
ClassName::usage:= "ClassName(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\)) gives the class name of a Java object \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\)."
InstanceOf::usage:= "InstanceOf(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) gives True if \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) represents a Java object of the class \(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)."
IsJavaObject::usage:= "IsJavaObject(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) gives True if \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) represents a living Java object."
Java::usage:= "Java is a symbol that is used with Java related messages."
JavaCall::usage:= "JavaCall(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) @ \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) calls a method on a living Java object.\nJavaCall(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") @ \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) calls a static Java method."
JavaClass::usage:= "JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") represents a Java class."
JavaClassAsObject::usage:= "JavaClassAsObject(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") or JavaClassAsObject(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) returns the Class object associated with a particular Java class."
JavaException::usage:= "JavaException(\(StyleBox(\"ex\", BaseStyle -> \"Arg\")\), \(StyleBox(\"msg\", BaseStyle -> \"Arg\")\), \(StyleBox(\"stacktrace\", BaseStyle -> \"Arg\")\)) represents an exception \(StyleBox(\"ex\", BaseStyle -> \"Arg\")\) thrown from Java code."
JavaField::usage:= "JavaField(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), \(StyleBox(\"field\", BaseStyle -> \"Arg\")\)) or \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) @ \(StyleBox(\"field\", BaseStyle -> \"Arg\")\) represents a member field of a Java object.\nJavaField(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"field\", BaseStyle -> \"Arg\")\)) or JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") @ \(StyleBox(\"field\", BaseStyle -> \"Arg\")\) represents a static member field of a Java class."
JavaIsRunning::usage:= "IsJavaRunning() gives True if the Java Virtual Machine is running and False otherwise."
JavaNew::usage:= "JavaNew(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\", \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or JavaNew(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) creates a new Java object."
JavaObject::usage:= "JavaObject(\[Ellipsis]) represents a java object."
JavaStartVM::usage:= "JavaStartVM() starts the Java Virtual Machine if it is not already started. Note that the JVM is started automatically when needed."
GetClass::usage:= "GetClass(\(StyleBox(\"obj\", \"Arg\")\)) gives the JavaClass representing the object's Java class."
ParentClass::usage:= "ParentClass(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) gives the parent class of the specified Java class."

Constructors::usage:= "Constructors(\(StyleBox(\"classOrObject\", \"Arg\")\)) lists all public constructors of the specified Java class or object."
Methods::usage:= "Methods(\(StyleBox(\"classOrObject\", \"Arg\")\)) lists all public methods of the specified Java class or object.\nMethods(\(StyleBox(\"classOrObject\", \"Arg\")\), \(StyleBox(\"pat\", \"Arg\")\)) returns only those methods whose names match the wildcard pattern."
Fields::usage:= "Fields((StyleBox(\"classOrObject\", \"Arg\")\)) lists all public member fields of the specified Java class or object.\nFields(\(StyleBox(\"classOrObject\", \"Arg\")\), \(StyleBox(\"pat\", \"Arg\")\)) returns only those fields whose names match the wildcard pattern."

ImplementJavaClass::usage:= "ImplementJavaClass(\(StyleBox(\"class\", \"Arg\")\), {\"\(StyleBox(\"meth\", \"Arg\")\)\(SubscriptBox(\"1\")\)\" \[Rule] \(StyleBox(\"sym\", \"Arg\")\)\(SubscriptBox(\"1\")\), \"\(StyleBox(\"meth\", \"Arg\")\)\(SubscriptBox(\"2\")\)\" \[Rule] \(StyleBox(\"sym\", \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]}) creates a new Java object of type \(StyleBox(\"class\", \"Arg\")\) with methods \(StyleBox(\"meth\", \"Arg\")\)\(SubscriptBox(StyleBox(\"i\", \"Arg\"))\) implemented by \(StyleBox(\"pMath\", \"TI\")\) functions \(StyleBox(\"sym\", \"Arg\")\)\(SubscriptBox(StyleBox(\"i\", \"Arg\"))\).\nImplementJavaClass({\(StyleBox(\"class\", \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"class\", \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]}, \[Ellipsis]) allows multiple Java interfaces to be specified."


Local(path) {
	If($SystemId === "Windows") {
		path:= Environment("ProgramFiles").StringSplit($PathListSeparator)
		
		path:= path.FileNames("Java")
		path:= Join(path.FileNames("jre*").Reverse, path.FileNames("jdk*").FileNames("jre").Reverse)
		path:= path.FileNames("bin")
		path:= Join(Environment("PATH").StringSplit($PathListSeparator), path)
		path:= path.FileNames({"server","client"})
		path:= path.FileNames("jvm.dll")
		
		Unprotect($JavaInstalledVMs)
		$JavaInstalledVMs:= path
		Protect($JavaInstalledVMs)
	} Else If($SystemId === "Linux") {
		Local(arch)
		
		If($ProcessorType === "x86-64") {
			arch:= "amd64"
			path:= {"/usr/lib64", "/usr/local/lib64"}
		} Else {
			arch:= "i386"
			path:= {"/usr/lib", "/usr/local/lib"}
		}
		
		path:= path.FileNames("jvm")
		path:= Join(path.FileNames("java"), path.FileNames("*").Complement({"java"}).Reverse)
		path:= path.FileNames("jre")
		path:= path.FileNames("lib")
		path:= path.FileNames(arch)
		path:= path.FileNames({"default", "server", "client"})
		path:= path.FileNames("libjvm.so")
		
		Unprotect($JavaInstalledVMs)
		$JavaInstalledVMs:= path;
		Protect($JavaInstalledVMs)
	} Else {
		Unprotect($JavaInstalledVMs)
		$JavaInstalledVMs:= {}
		Protect($JavaInstalledVMs)
	}
}
	
Unprotect($JavaVMLibraryName);
If($JavaInstalledVMs =!= {}) {
	$JavaVMLibraryName:= First($JavaInstalledVMs)
}

Protect($JavaVMLibraryName);

$DefaultClassPath:= {ToFileName(DirectoryName($Input), "classpath")}


/* JavaClass */
JavaClass(~cls:String) @ (~f:String)::= JavaField(cls, f)
JavaClass(~cls:String) @ (~f:Symbol)::= JavaField(cls, SymbolName(f))

JavaClass /: (JavaClass(~cls:String) @ (~f:String):= ~rhs)::= JavaField(cls, f):= rhs
JavaClass /: (JavaClass(~cls:String) @ (~f:Symbol):= ~rhs)::= With({fs:= SymbolName(f)}, JavaField(cls, fs):= rhs)

JavaClass(~cls:String) @ (~m:String)(~~~args) ::= JavaCall(cls, m,             args)
JavaClass(~cls:String) @ (~m:Symbol)(~~~args) ::= JavaCall(cls, SymbolName(m), args)
~c:JavaClass @ (e1: ~(~~~))(~e2)              ::= (c @ e1) @ e2

Attributes(JavaClass):= {DeepHoldAll, Protected, ReadProtected}


/* JavaObject */
Format(JavaObject(~, ~name:String))::= Skeleton(name)

JavaObject/: ClassName(JavaObject(~, ~name))::= name
JavaObject/: GetClass(JavaObject(~, ~name))::= JavaClass(name)

~o:JavaObject @ (~f:String)::= JavaField(o, f)
~o:JavaObject @ (~f:Symbol)::= JavaField(o, SymbolName(f))

JavaObject/: (~o:JavaObject @ (~f:String):= ~rhs)::= JavaField(o, f):= rhs
JavaObject/: (~o:JavaObject @ (~f:Symbol):= ~rhs)::= With({fs:= SymbolName(f)}, JavaField(o, fs):= rhs)

expr:(~o:JavaObject @ (~m:String)(~~~args)) ::= Block {
	With(di:= Developer`GetDebugInfo(expr))
	
	HoldComplete(JavaCall(o, m, args)).Developer`SetDebugInfoAt(di, 1).ReleaseHold
}

expr:(~o:JavaObject @ (~m:Symbol)(~~~args)) ::= Block {
	With(di:= Developer`GetDebugInfo(expr))
	With(str:= SymbolName(m))
	
	HoldComplete(JavaCall(o, str, args)).Developer`SetDebugInfoAt(di, 1).ReleaseHold
}

expr:(~o:JavaObject @ (e1: ~(~~~))(~e2)) ::= Block {
	With(di1:= Developer`GetDebugInfo(e1))
	With(call1:= HoldComplete(o @ e1).Developer`SetDebugInfoAt(di, 1).ReleaseHold)
	With(di:= Developer`GetDebugInfo(expr))
	
	HoldComplete(call1 @ e2).Developer`SetDebugInfoAt(di, 1).ReleaseHold
}

Attributes(JavaObject):= {DeepHoldAll, Protected, ReadProtected}

AutoLoad(Hold(Constructors, Methods, Fields), 
	ToFileName(ParentDirectory($Input), "reflection.pmath"))
AutoLoad(Hold(ImplementJavaClass), 
	ToFileName(ParentDirectory($Input), "ImplementJavaClass.pmath"))
Protect(Constructors, Methods, Fields, ImplementJavaClass)

LoadLibrary(ToFileName(
	{DirectoryName($Input), "bin", $SystemId, $ProcessorType},
	If($SystemId === "Windows",
		"pmath-java.dll",
		"pmath-java.so")))


AddToClassPath(~~~paths:String)::= {paths}.Scan(AddToClassPath)
AddToClassPath(paths: {~~~:String})::= paths.Scan(AddToClassPath)
Function AddToClassPath(~path:String) {
	If(JavaIsRunning()) {
		Java`Internal`AddToClassPath(path)
	} Else {
		With(protected:= Unprotect($DefaultClassPath))
		
		$DefaultClassPath:= Append($DefaultClassPath, path)
		Protect @@ protected;
	}
}


End()

EndPackage()
