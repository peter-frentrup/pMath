BeginPackage("Java`")

Java`Java
Java`JavaClass
Java`JavaClassAsObject
Java`JavaCall
Java`JavaException
Java`JavaField
Java`JavaKillVM
Java`JavaNew
Java`JavaStartVM
Java`$JavaVMLibraryName
Java`$DefaultClassPath

Java`IsJavaObject
Java`ClassName
Java`GetClass
Java`InstanceOf
Java`ParentClass

Java`Constructors
Java`Methods
Java`Fields

Begin("Java`Private`")


Java::argx:= "Method named `1` defined in class `2` was called with an incorrect number or type of arguments. The arguments, shown here in a list, were `3`."
Java::argx0:= "Method named `1` defined in class `2` does not take zero arguments."
Java::fldx:= "Attempting to set field named `1` defined in class `2` to an incorrect type of value: `3`."
Java::nocls:= JavaNew::nocls:= "Class named `1` not found."
Java::nofld:= "No field `1` defined in class `2`."
Java::nometh:= "No method `1` defined in class `2`."
Java::noobj:= "`1` is not a Java object."
Java::nobcl:= "`1` is neither a Java object nor a Java class."

JavaNew::argx:= "Incorrect number or type of arguments to constructor for class `1`. The arguments, shown here in a list, were `2`."
JavaNew::argx0:= "There is no constructor for class `1` that takes zero arguments."
JavaNew::fail:= "Error calling constructor for class `1`."


ClassName::usage:= "ClassName(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\)) gives the class name of a Java object \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\)."
Constructors::usage:= "Constructors(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) lists all public constructors of the specified Java class."
Fields::usage:= "Fields(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) lists all public member fields of the specified Java class."
InstanceOf::usage:= "InstanceOf(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) gives True if \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) represents a Java object of the class \(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)."
IsJavaObject::usage:= "IsJavaObject(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) gives True if \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) represents a living Java object."
Java::usage:= "Java is a symbol that is used with Java related messages."
JavaCall::usage:= "JavaCall(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) @ \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) calls a method on a living Java object.\nJavaCall(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") @ \(StyleBox(\"meth\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) calls a static Java method."
JavaClass::usage:= "JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") represents a Java class."
JavaClassAsObject::usage:= "JavaClassAsObject(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") or JavaClassAsObject(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) returns the Class object associated with a particular Java class."
JavaException::usage:= "JavaException(\(StyleBox(\"ex\", BaseStyle -> \"Arg\")\), \(StyleBox(\"msg\", BaseStyle -> \"Arg\")\), \(StyleBox(\"stacktrace\", BaseStyle -> \"Arg\")\)) represents an exception \(StyleBox(\"ex\", BaseStyle -> \"Arg\")\) thrown from Java code."
JavaField::usage:= "JavaField(\(StyleBox(\"obj\", BaseStyle -> \"Arg\")\), \(StyleBox(\"field\", BaseStyle -> \"Arg\")\)) or \(StyleBox(\"obj\", BaseStyle -> \"Arg\")\) @ \(StyleBox(\"field\", BaseStyle -> \"Arg\")\) represents a member field of a Java object.\nJavaField(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"field\", BaseStyle -> \"Arg\")\)) or JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\") @ \(StyleBox(\"field\", BaseStyle -> \"Arg\")\) represents a static member field of a Java class."
JavaNew::usage:= "JavaNew(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\", \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) or JavaNew(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\"), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"arg\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \[Ellipsis]) creates a new Java object."
JavaStartVM::usage:= "JavaStartVM() starts the Java Virtual Machine if it is not already started. Note that the JVM is started automatically when needed."
Methods::usage:= "Methods(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) lists all public methods of the specified Java class."
ParentClass::usage:= "ParentClass(JavaClass(\"\(StyleBox(\"classname\", BaseStyle -> \"Arg\")\)\")) gives the parent class of the specified Java class."


If($SystemId === "Windows",
	path:= Join(Environment("PATH").StringSplit($PathListSeparator),
	            Environment("ProgramFiles").StringSplit($PathListSeparator));
	
	path:= FileNames("Java", path).Reverse;
	path:= Join(FileNames("jre*", path), FileNames("jre", FileNames("jdk*", path)));
	path:= FileNames("bin", path);
	path:= FileNames({"server","client"}, path);
	path:= FileNames("jvm.dll", path);
	
	Unprotect($JavaVMLibraryName);
	$JavaVMLibraryName:= First(path);
	Unprotect($JavaVMLibraryName);
	)
If($SystemId === "Linux",
	If($ProcessorType === "x64", 
		arch:= "amd64";
		path:= {"/usr/lib64", "/usr/local/lib64"};
	,
		arch:= "i386";
		path:= {"/usr/lib", "/usr/local/lib"});
	
	path:= FileNames("jvm", path);
	path:= FileNames("*", path);
	path:= FileNames("jre", path);
	path:= FileNames("lib", path);
	path:= FileNames(arch, path);
	path:= FileNames({"server","client"}, path);
	path:= FileNames("libjvm.so", path);
	
	Unprotect($JavaVMLibraryName);
	$JavaVMLibraryName:= First(path);
	Unprotect($JavaVMLibraryName);
	)

$DefaultClassPath:= {ToFileName(DirectoryName($Input), "classpath")}


JavaClass(~cls:String) @ (~f:String)::= JavaField(cls, f)
JavaClass(~cls:String) @ (~f:Symbol)::= JavaField(cls, SymbolName(f))

JavaClass /: (JavaClass(~cls:String) @ (~f:String):= ~rhs)::= JavaField(cls, f):= rhs
JavaClass /: (JavaClass(~cls:String) @ (~f:Symbol):= ~rhs)::= With({fs:= SymbolName(f)}, JavaField(cls, fs):= rhs)

JavaClass(~cls:String) @ (~m:String)(~~~args) ::= JavaCall(cls, m,             args)
JavaClass(~cls:String) @ (~m:Symbol)(~~~args) ::= JavaCall(cls, SymbolName(m), args)
~c:JavaClass @ (e1: ~(~~~))(~e2)              ::= (c @ e1) @ e2

Attributes(JavaClass):= {DeepHoldAll}



LoadLibrary(ToFileName(
	{DirectoryName($Input), "bin", $SystemId},
	If($SystemId === "Windows",
		"pmath-java.dll",
		"pmath-java.so")))



stringStyle(~s, ~~~styles)::= "\(" ++ Style(s, styles).ToBoxes.InputForm.ToString ++ "\)"

syntaxHighlight(~lines)::= lines.StringReplace(
		{("final " | "public " | "native ") -> ""}
	).StringReplace(
		"," -> ", "
	).StringReplace(
		"java.lang." ++ (name: WordCharacter**) ++ (c: " " | "[" | "," | "(" | ")" | EndOfString) :> name ++ c
	).StringReplace(
		" " ++ Shortest((WordCharacter|".")**) ++ "." ++ (name:WordCharacter**) ++ "(" :> " " ++ stringStyle(name, Blue, Italic) ++ "("
	).StringReplace(
		(s: WordBoundary ++ ("Object" | "String") ++ WordBoundary) :> stringStyle(s, Bold)
	).StringReplace(
		WordBoundary ++ (s: "void" | "byte" | "char" | "boolean" | "short" | "int" | "long" | "throws" | "double" | "float" | "static" | "synchronized") ++ WordBoundary :> stringStyle(s, Brown, Bold)
	)

Constructors(cls: (~:JavaClass | ~:String))::= If(Length(#) > 0, Column(#), Style("no constructors",Italic))&(JavaClassAsObject(cls).JavaCall("getConstructors").Map(#.JavaCall("toString")&).syntaxHighlight)
Methods(     cls: (~:JavaClass | ~:String))::= If(Length(#) > 0, Column(#), Style("no methods",     Italic))&(JavaClassAsObject(cls).JavaCall("getMethods").Map(     #.JavaCall("toString")&).SortBy(StringReplace(#, StartOfString ++ ~~~ ++ "." ++ (name:WordCharacter**) ++ "(" ++ ~~~ :> name)&).syntaxHighlight)
Fields(      cls: (~:JavaClass | ~:String))::= If(Length(#) > 0, Column(#), Style("no fields",      Italic))&(JavaClassAsObject(cls).JavaCall("getFields").Map(      #.JavaCall("toString")&).SortBy(StringReplace(#, StartOfString ++ ~~~ ++ "." ++ (name:WordCharacter**) ++ "(" ++ ~~~ :> name)&).syntaxHighlight)



Attributes(Constructors):= Attributes(Methods):= Attributes(Fields):= Attributes(JavaClass):= {Protected, ReadProtected}

End()

EndPackage()
