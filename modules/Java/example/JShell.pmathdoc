/* pMath Document */

Document({
  SectionGroup({Section("JShell", "Title"), 
    Section("Inline Java code inside pMath:", "Text"), 
    SectionGroup({
      Section(BoxData({"ver", "\[Assign]", 
         TemplateBox({{"System", ".", "getProperty", "(", 
            StringBox("\"java.version\""), ")"}}, "InlineJavaInput")}), 
       "Input", SectionLabel -> "in [1]:"), 
      Section(BoxData(StringBox("\"14.0.1\"")), "Output", 
       SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
    Section("Top-level Java code:", "Text"), 
    SectionGroup({
      Section(BoxData({"System", ".", "getProperty", "(", 
         StringBox("\"java.version\""), ")"}), "JavaInput"), 
      Section(BoxData(StringBox("\"\\\"14.0.1\\\"\"")), "JavaOutput", 
       SectionGenerated -> True)}, All), 
    SectionGroup({Section(BoxData({"1", "+"}), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(Java`Java::"diag"), 
             Message -> StringForm("`1`", 
               "reached end of file while parsing"), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\library\
                  \\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                    107, 14} .. {107, 20})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {104, 8} .. {130, 9})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {114, 24} .. {116, 25})}, {
                "Head" -> Message, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {115, 28} .. {115, 71})}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "Java", "::", StringBox("\"diag\"")}}, "RowDefault"), ":", " ", 
         InterpretationBox(StringBox("\"", 
           StringBox("\"reached end of file while parsing\"")), 
          StringForm("`1`", "reached end of file while parsing"), 
          Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(BoxData(/\/({"1", " ", "+", " ", "1"}, "\n", {
          "2", " ", "+", " ", "2"})), "JavaInput"), 
      Section(BoxData(StringBox("\"2\"")), "JavaOutput", 
       SectionGenerated -> True), Section(BoxData(StringBox("\"4\"")), 
       "JavaOutput", SectionGenerated -> True)}, All), 
    SectionGroup({Section(BoxData({"1", "+", SqrtBox("3")}), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(Java`Java::"box"), 
             Message -> StringForm("Cannot convert `1` to Java code.", 
               RawBoxes(ButtonBox({"SqrtBox", "(", {StringBox("\"3\"")}, ")"}, 
                 ButtonFunction -> 
                  Function(SetSelectedDocument(Automatic, 
                    Language`SourceLocation(
                     FrontEndObject(10801762494786359001, 75), 2 .. 3))), 
                 ButtonFrame -> "Frameless"))), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> With, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {101, 4} .. {133, 0})}, {
                "Head" -> Apply, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 4} .. {39, 15})}, {
                "Head" -> Flatten, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 24} .. {39, 15})}, {
                "Head" -> Map, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 24} .. {39, 7})}, {
                "Head" -> With, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 43} .. {39, 5})}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {68, 37} .. {75, 0})}, {
                "Head" -> Message, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {69, 4} .. {73, 38})}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "Java", "::", StringBox("\"box\"")}}, "RowDefault"), ":", " ", 
         InterpretationBox(StringBox("\"Cannot convert ", 
           ButtonBox({"SqrtBox", "(", StringBox("\"3\""), ")"}, 
            ButtonFrame -> "Frameless", 
            ButtonFunction -> Function(SetSelectedDocument(Automatic, 
               Language`SourceLocation(FrontEndObject(10801762494786359001, 
                 75), 2 .. 3)))), " to Java code.\""), 
          StringForm("Cannot convert `1` to Java code.", 
           RawBoxes(ButtonBox({"SqrtBox", "(", {StringBox("\"3\"")}, ")"}, 
             ButtonFunction -> Function(SetSelectedDocument(Automatic, 
                Language`SourceLocation(FrontEndObject(10801762494786359001, 
                  75), 2 .. 3))), ButtonFrame -> "Frameless"))), 
          Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(
       BoxData({{"throw", " ", "new", " ", {
           {"java", ".", "lang"}, ".", "Exception", "(", 
           StringBox("\"bla bla\""), ")"}}, ";"}), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(Java`Java::"ex"), 
             Message -> StringForm("`1`", "java.lang.Exception: bla bla"), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\library\
                  \\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                    107, 14} .. {107, 20})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {104, 8} .. {130, 9})}, {
                "Head" -> Message, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {122, 32} .. {122, 108})}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "Java", "::", StringBox("\"ex\"")}}, "RowDefault"), ":", " ", 
         InterpretationBox(StringBox("\"", 
           StringBox("\"java.lang.Exception: bla bla\"")), 
          StringForm("`1`", "java.lang.Exception: bla bla"), 
          Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
    SectionGroup({Section(BoxData({"1", "/", "0"}), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(Java`Java::"ex"), 
             Message -> StringForm("`1`", 
               "java.lang.ArithmeticException: / by zero"), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\library\
                  \\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                    107, 14} .. {107, 20})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {104, 8} .. {130, 9})}, {
                "Head" -> Message, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {122, 32} .. {122, 108})}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "Java", "::", StringBox("\"ex\"")}}, "RowDefault"), ":", " ", 
         InterpretationBox(StringBox("\"", 
           StringBox("\"java.lang.ArithmeticException: / by zero\"")), 
          StringForm("`1`", "java.lang.ArithmeticException: / by zero"), 
          Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
    SectionGroup({Section(BoxData({"x", SuperscriptBox("2")}), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(Java`Java::"box"), 
             Message -> StringForm("Cannot convert `1` to Java code.", 
               RawBoxes(ButtonBox({"SuperscriptBox", "(", {
                   StringBox("\"2\"")}, ")"}, 
                 ButtonFunction -> 
                  Function(SetSelectedDocument(Automatic, 
                    Language`SourceLocation(
                     FrontEndObject(10801762494786359001, 113), 1 .. 2))), 
                 ButtonFrame -> "Frameless"))), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> With, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {101, 4} .. {133, 0})}, {
                "Head" -> Apply, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 4} .. {39, 15})}, {
                "Head" -> Flatten, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 24} .. {39, 15})}, {
                "Head" -> Map, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 24} .. {39, 7})}, {
                "Head" -> With, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {31, 43} .. {39, 5})}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {68, 37} .. {75, 0})}, {
                "Head" -> Message, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {69, 4} .. {73, 38})}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "Java", "::", StringBox("\"box\"")}}, "RowDefault"), ":", " ", 
         InterpretationBox(StringBox("\"Cannot convert ", 
           ButtonBox({"SuperscriptBox", "(", StringBox("\"2\""), ")"}, 
            ButtonFrame -> "Frameless", 
            ButtonFunction -> Function(SetSelectedDocument(Automatic, 
               Language`SourceLocation(FrontEndObject(10801762494786359001, 
                 113), 1 .. 2)))), " to Java code.\""), 
          StringForm("Cannot convert `1` to Java code.", 
           RawBoxes(ButtonBox({"SuperscriptBox", "(", {StringBox("\"2\"")}, 
              ")"}, ButtonFunction -> 
              Function(SetSelectedDocument(Automatic, 
                Language`SourceLocation(FrontEndObject(10801762494786359001, 
                  113), 1 .. 2))), ButtonFrame -> "Frameless"))), 
          Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(BoxData(StringBox("\"x", SuperscriptBox("2"), "+", SqrtBox("3"), 
         "\"")), "JavaInput"), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(MakeExpression::"bgn"), 
             Message -> StringForm("An expression cannot begin with \"`1`\".", 
               HoldForm(RawBoxes({"\\\"", "2", "\\\""}))), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\library\
                  \\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                    107, 14} .. {107, 20})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {104, 8} .. {130, 9})}, {
                "Head" -> SectionPrint, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 16} .. {109, 98})}, {
                "Head" -> Section, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 29} .. {109, 97})}, {
                "Head" -> BoxData, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 37} .. {109, 58})}, {
                "Head" -> MakeBoxes}, {"Head" -> MakeExpression}, {
                "Head" -> MakeExpression}, {"Head" -> Message}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "MakeExpression", "::", StringBox("\"bgn\"")}}, "RowDefault"), 
         ":", " ", InterpretationBox(
          StringBox("\"An expression cannot begin with \\\"", {
            "\\\"", "2", "\\\""}, "\\\".\""), 
          StringForm("An expression cannot begin with \"`1`\".", 
           HoldForm(RawBoxes({"\\\"", "2", "\\\""}))), Editable -> False)}), 
       "Message", SectionGenerated -> True), 
      Section(
       BoxData({
         TemplateBox({
           TemplateBox({MessageName -> HoldForm(MakeExpression::"bgn"), 
             Message -> StringForm("An expression cannot begin with \"`1`\".", 
               HoldForm(RawBoxes({"\\\"", "3", "\\\""}))), 
             Stack -> {{"Head" -> ToExpression}, {
                "Head" -> EvaluationSequence, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\library\
                  \\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                    107, 14} .. {107, 20})}, {
                "Head" -> Do, "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {104, 8} .. {130, 9})}, {
                "Head" -> SectionPrint, 
                "Location" -> Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 16} .. {109, 98})}, {
                "Head" -> Section, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 29} .. {109, 97})}, {
                "Head" -> BoxData, "Location" -> 
                 Language`SourceLocation(
                  "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\modules\
                  \\Java\\scripts\\shell.pmath", {109, 37} .. {109, 58})}, {
                "Head" -> MakeBoxes}, {"Head" -> MakeExpression}, {
                "Head" -> MakeExpression}, {"Head" -> Message}, {
                "Head" -> SectionPrint}}}, "MessageMenuButton"), {
            "MakeExpression", "::", StringBox("\"bgn\"")}}, "RowDefault"), 
         ":", " ", InterpretationBox(
          StringBox("\"An expression cannot begin with \\\"", {
            "\\\"", "3", "\\\""}, "\\\".\""), 
          StringForm("An expression cannot begin with \"`1`\".", 
           HoldForm(RawBoxes({"\\\"", "3", "\\\""}))), Editable -> False)}), 
       "Message", SectionGenerated -> True), 
      Section(BoxData(StringBox("\"SqrtBox(\\\\\\\"3\\\\\\\")\)\\\"\"")), 
       "JavaOutput", SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(
       BoxData({{{"var", " ", "ctx"}, " ", "=", " ", {
           "new", " ", {"pmath", ".", "Context", "(", ")"}}}, ";"}), 
       "JavaInput"), Section(BoxData(StringBox("\"pmath.Context@689eae3a\"")), 
       "JavaOutput", SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(BoxData({"ctx", ".", "evaluate", "(", {
          StringBox("\"Print(`1`)\""), ",", " ", StringBox("\"Hello\"")}, 
         ")"}), "JavaInput"), 
      Section(BoxData(TemplateBox({StringBox("\"Hello\"")}, "RowDefault")), 
       "Print", SectionGenerated -> True), 
      Section(BoxData(StringBox("\"null\"")), "JavaOutput", 
       SectionGenerated -> True)}, All), 
    SectionGroup({
      Section(
       BoxData({"new", " ", {
          {"pmath", ".", "Context", "(", {"null", ",", "null"}, ")"}, ".", 
          "evaluate", "(", StringBox("\"Print($Namespace)\""), ")"}}), 
       "JavaInput"), 
      Section(BoxData(TemplateBox({StringBox("\"Global`\"")}, "RowDefault")), 
       "Print", SectionGenerated -> True), 
      Section(BoxData(StringBox("\"null\"")), "JavaOutput", 
       SectionGenerated -> True)}, All), 
    Section("Inline pMath code inside Java:", "Text"), 
    SectionGroup({
      Section(
       BoxData({{{"var", " ", "x"}, " ", "=", " ", 
          TemplateBox({
            {"N", "(", RadicalBox("Pi", TemplateBox({{"2", "+", "3"}}, 
               "InlineJavaInput")), ")"}}, "MathInJava")}, ";"}), 
       "JavaInput"), Section(BoxData(StringBox("\"1.2572741156691851\"")), 
       "JavaOutput", SectionGenerated -> True)}, All), 
    SectionGroup({Section("Redirect Java output to the front-end", "Section"), 
      Section(
       BoxData(
        /\/({{"import", " ", {{"java", ".", "io"}, ".", "IOException"}}, ";"}, 
         "\n", {{"import", " ", {{"java", ".", "io"}, ".", "OutputStream"}}, 
          ";"}, "\n", {
          {"import", " ", {{"java", ".", "io"}, ".", "PrintStream"}}, ";"}, 
         "\n", {{"import", " ", {{{"java", ".", "nio"}, ".", "charset"}, ".", 
            "Charset"}}, ";"}, "\n", {
          {"import", " ", {{"java", ".", "util"}, ".", "Arrays"}}, ";"}, "\n", 
         {{"import", " ", {{"java", ".", "nio"}, ".", "ByteBuffer"}}, ";"}, 
         "\n", {{"import", " ", {{{"java", ".", "nio"}, ".", "charset"}, ".", 
            "StandardCharsets"}}, ";"})), "JavaInput"), 
      Section(BoxData({"public", " ", "abstract", " ", "class", " ", 
         "LineActionOutputStream", " ", "extends", " ", "OutputStream", " ", {
          "{", {"\n", "\[RawTab]", {
            {"private", " ", {"byte", "[", "]"}, " ", "buffer"}, ";", {
             "\n", "\[RawTab]", {"private", " ", "boolean", " ", 
              "skipNextLineFeed"}}, ";", {"\n", "\[RawTab]", {
              "private", " ", "final", " ", "Charset", " ", "charset"}}, ";", {
             "\n", "\[RawTab]", "\n", "\[RawTab]", {
              "public", " ", {"LineActionOutputStream", "(", {
                "Charset", " ", "cs"}, ")"}, " ", {
               {{"{", {"\n", "\[RawTab]", "\[RawTab]", {
                   {"if", "(", {"cs", " ", "=", "=", " ", "null"}, ")"}, "\n", 
                   "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                    "throw", " ", "new", " ", {"IllegalArgumentException", 
                     "(", ")"}}, ";", {"\n", "\n", "\[RawTab]", "\[RawTab]", {
                     "skipNextLineFeed", " ", "=", " ", "false"}}, ";", {
                    "\n", "\[RawTab]", "\[RawTab]", {
                     "buffer", " ", "=", " ", {
                      "new", " ", {"byte", "[", "0", "]"}}}}, ";", {
                    "\n", "\[RawTab]", "\[RawTab]", {
                     "charset", " ", "=", " ", "cs"}}, ";", "\n"}}, 
                 "\[RawTab]", "}"}, "\n", "\[RawTab]", "\n"}, "\[RawTab]", 
               "@", "Override"}}}, "\n", "\[RawTab]", {
             "public", " ", "void", " ", {"write", "(", {"int", " ", "b"}, 
              ")"}, " ", "throws", " ", "IOException", " ", {
              {{"{", {"\n", "\[RawTab]", "\[RawTab]", {
                  {{{"if", "(", {"b", " ", "=", "=", " ", "10"}, ")"}, " ", {
                     "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                       {"if", "(", "skipNextLineFeed", ")"}, "\n", 
                       "\[RawTab]", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                        "skipNextLineFeed", " ", "=", " ", "false"}, ";", {
                        "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", "else"}, 
                       "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                       "\[RawTab]", {"flushToAction", "(", ")"}, ";", "\n"}}, 
                     "\[RawTab]", "\[RawTab]", "}"}}, "\n", "\[RawTab]", 
                   "\[RawTab]", {"else", " ", {
                     "if", "(", {"b", " ", "=", "=", " ", "13"}, ")"}, " ", {
                     "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                       {"skipNextLineFeed", " ", "=", " ", "true"}, ";", {
                        "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                         "flushToAction", "(", ")"}}, ";", "\n"}}, 
                     "\[RawTab]", "\[RawTab]", "}"}}, "\n", "\[RawTab]", 
                   "\[RawTab]", {"else", " ", {
                     "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                       {{"int", " ", "oldlen"}, " ", "=", " ", {
                         "buffer", ".", "length"}}, ";", {
                        "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                         "buffer", " ", "=", " ", {"Arrays", ".", "copyOf", 
                          "(", {"buffer", ",", " ", {
                            "oldlen", " ", "+", " ", "1"}}, ")"}}}, ";", {
                        "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                         {"buffer", "[", "oldlen", "]"}, " ", "=", " ", {
                          {"(", "byte", ")"}, "b"}}}, ";", {
                        "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                         "skipNextLineFeed", " ", "=", " ", "false"}}, ";", 
                       "\n"}}, "\[RawTab]", "\[RawTab]", "}"}}}, "\n"}}, 
                "\[RawTab]", "}"}, "\n", "\[RawTab]", "\n"}, "\[RawTab]", "@", 
              "Override"}}, "\n", "\[RawTab]", {
             "public", " ", "void", " ", {
              "write", "(", {{{"byte", "[", "]"}, " ", "buf"}, ",", " ", {
                "int", " ", "off"}, ",", " ", {"int", " ", "len"}}, ")"}, " ", 
             "throws", " ", "IOException", " ", {
              {{"{", {"\n", "\[RawTab]", "\[RawTab]", {
                  {{"for", "(", {{{"int", " ", "i"}, " ", "=", " ", "0"}, ";", 
                     " ", {"i", " ", "<", " ", "len"}, ";", " ", {"++", "i"}}, 
                    ")"}, " ", {"{", {"\n", "\[RawTab]", "\[RawTab]", 
                     "\[RawTab]", {
                      {{"if", "(", {{"buf", "[", {"off", " ", "+", " ", "i"}, 
                          "]"}, " ", "=", "=", " ", "10"}, ")"}, " ", {
                        "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                         "\[RawTab]", {
                          {"silentAppend", "(", {"buf", ",", " ", "off", ",", 
                            " ", "i"}, ")"}, ";", {"\n", "\[RawTab]", 
                           "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                            "if", "(", {"!", "skipNextLineFeed"}, ")"}}, "\n", 
                          "\[RawTab]", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                          "\[RawTab]", {"flushToAction", "(", ")"}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"off", "+=", " ", {
                             "i", " ", "+", " ", "1"}}}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"len", "-=", " ", {
                             "i", " ", "+", " ", "1"}}}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"i", " ", "=", " ", {"-", "1"}}}, 
                          ";", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"skipNextLineFeed", " ", "=", " ", 
                            "false"}}, ";", "\n"}}, "\[RawTab]", "\[RawTab]", 
                        "\[RawTab]", "}"}}, "\n", "\[RawTab]", "\[RawTab]", 
                      "\[RawTab]", {"else", " ", {
                        "if", "(", {{"buf", "[", {"off", " ", "+", " ", "i"}, 
                          "]"}, " ", "=", "=", " ", "13"}, ")"}, " ", {
                        "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                         "\[RawTab]", {
                          {"silentAppend", "(", {"buf", ",", " ", "off", ",", 
                            " ", "i"}, ")"}, ";", {"\n", "\[RawTab]", 
                           "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                            "flushToAction", "(", ")"}}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"off", "+=", " ", {
                             "i", " ", "+", " ", "1"}}}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"len", "-=", " ", {
                             "i", " ", "+", " ", "1"}}}, ";", {
                           "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"i", " ", "=", " ", {"-", "1"}}}, 
                          ";", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", 
                           "\[RawTab]", {"skipNextLineFeed", " ", "=", " ", 
                            "true"}}, ";", "\n"}}, "\[RawTab]", "\[RawTab]", 
                        "\[RawTab]", "}"}}, "\n", "\[RawTab]", "\[RawTab]", 
                      "\[RawTab]", "else", "\n", "\[RawTab]", "\[RawTab]", 
                      "\[RawTab]", "\[RawTab]", {"skipNextLineFeed", " ", "=", 
                       " ", "false"}, ";", "\n"}}, "\[RawTab]", "\[RawTab]", 
                    "}"}}, "\n", "\[RawTab]", "\[RawTab]", {
                   "silentAppend", "(", {"buf", ",", " ", "off", ",", " ", 
                    "len"}, ")"}, ";", "\n"}}, "\[RawTab]", "}"}, "\n", 
               "\[RawTab]", "\n"}, "\[RawTab]", "@", "Override"}}, "\n", 
            "\[RawTab]", {"public", " ", "void", " ", {"flush", "(", ")"}, 
             " ", "throws", " ", "IOException", " ", {
              "{", {"\n", "\[RawTab]", "\[RawTab]", {
                {"if", "(", {{"buffer", ".", "length"}, " ", ">", " ", "0"}, 
                 ")"}, "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                 "flushToAction", "(", ")"}, ";", "\n"}}, "\[RawTab]", "}"}}, 
            "\n", "\[RawTab]", {"\n", "\[RawTab]", {
              "private", " ", "void", " ", {
               "silentAppend", "(", {{{"byte", "[", "]"}, " ", "buf"}, ",", 
                " ", {"int", " ", "off"}, ",", " ", {"int", " ", "len"}}, 
               ")"}, " ", {"{", {"\n", "\[RawTab]", "\[RawTab]", {
                 {"if", "(", {"len", " ", "<=", " ", "0"}, ")"}, "\n", 
                 "\[RawTab]", "\[RawTab]", "\[RawTab]", "return", ";", {
                  "\n", "\[RawTab]", "\[RawTab]", {
                   {"int", " ", "oldlen"}, " ", "=", " ", {
                    "buffer", ".", "length"}}}, ";", {
                  "\n", "\[RawTab]", "\[RawTab]", {
                   "buffer", " ", "=", " ", {"Arrays", ".", "copyOf", "(", {
                     "buffer", ",", " ", {"oldlen", " ", "+", " ", "len"}}, 
                    ")"}}}, ";", {"\n", "\[RawTab]", "\[RawTab]", {
                   "for", "(", {{{"int", " ", "i"}, " ", "=", " ", "0"}, ";", 
                    " ", {"i", " ", "<", " ", "len"}, ";", " ", {"++", "i"}}, 
                   ")"}}, "\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                  {"buffer", "[", {"oldlen", " ", "+", " ", "i"}, "]"}, " ", 
                  "=", " ", {"buf", "[", {"off", " ", "+", " ", "i"}, "]"}}, 
                 ";", "\n"}}, "\[RawTab]", "}"}}}, "\n", "\[RawTab]", {
             "\n", "\[RawTab]", {"private", " ", "void", " ", {
               "flushToAction", "(", ")"}, " ", "throws", " ", "IOException", 
              " ", {"{", {"\n", "\[RawTab]", "\[RawTab]", {
                 {{"String", " ", "line"}, " ", "=", " ", {
                   {"charset", ".", "decode", "(", {
                     "ByteBuffer", ".", "wrap", "(", "buffer", ")"}, ")"}, 
                   ".", "toString", "(", ")"}}, ";", {
                  "\n", "\[RawTab]", "\[RawTab]", {
                   "buffer", " ", "=", " ", {
                    "new", " ", {"byte", "[", "0", "]"}}}}, ";", {
                  "\n", "\[RawTab]", "\[RawTab]", {
                   "action", "(", "line", ")"}}, ";", "\n"}}, "\[RawTab]", 
               "}"}}}, "\n", "\[RawTab]", {"\n", "\[RawTab]", {
              "protected", " ", "abstract", " ", "void", " ", {
               "action", "(", {"String", " ", "line"}, ")"}, " ", "throws", 
              " ", "IOException"}}, ";", "\n"}}, "}"}}), "JavaInput"), 
      Section(
       BoxData({{"System", ".", "setOut", "(", {
           "new", " ", {"PrintStream", "(", {
             {"\n", "\[RawTab]", {
               "new", " ", {"LineActionOutputStream", "(", {
                 "StandardCharsets", ".", "UTF_8"}, ")"}, " ", {
                "{", {"\n", "\[RawTab]", "\[RawTab]", {
                  {"protected", " ", "void", " ", {
                    "action", "(", {"String", " ", "line"}, ")"}, " ", 
                   "throws", " ", "IOException", " ", {
                    "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                      TemplateBox({
                        {"Print", "(", TemplateBox({"line"}, 
                          "InlineJavaInput"), ")"}}, "MathInJava"), ";", 
                      "\n"}}, "\[RawTab]", "\[RawTab]", "}"}}, "\n"}}, 
                "\[RawTab]", "}"}}}, ",", " ", "false", ",", " ", {
              "StandardCharsets", ".", "UTF_8"}}, ")"}}, ")"}, ";"}), 
       "JavaInput"), 
      Section(
       BoxData({{"System", ".", "setErr", "(", {
           "new", " ", {"PrintStream", "(", {
             {"\n", "\[RawTab]", {
               "new", " ", {"LineActionOutputStream", "(", {
                 "StandardCharsets", ".", "UTF_8"}, ")"}, " ", {
                "{", {"\n", "\[RawTab]", "\[RawTab]", {
                  {"protected", " ", "void", " ", {
                    "action", "(", {"String", " ", "line"}, ")"}, " ", 
                   "throws", " ", "IOException", " ", {
                    "{", {"\n", "\[RawTab]", "\[RawTab]", "\[RawTab]", {
                      TemplateBox({
                        {"SectionPrint", "(", {StringBox("\"Message\""), ",", 
                          TemplateBox({"line"}, "InlineJavaInput")}, ")"}}, 
                       "MathInJava"), ";", "\n"}}, "\[RawTab]", "\[RawTab]", 
                    "}"}}, "\n"}}, "\[RawTab]", "}"}}}, ",", " ", "false", 
             ",", " ", {"StandardCharsets", ".", "UTF_8"}}, ")"}}, ")"}, 
         ";"}), "JavaInput"), 
      SectionGroup({
        Section(BoxData({{{"System", ".", "out"}, ".", "print", "(", 
            StringBox("\"Hello\""), ")"}, ";", " ", {
            {"System", ".", "out"}, ".", "print", "(", 
            StringBox("\", world\""), ")"}}), "JavaInput"), 
        Section(BoxData(TemplateBox({StringBox("\"Hello, world\"")}, 
           "RowDefault")), "Print", SectionGenerated -> True)}, All), 
      SectionGroup({
        Section(BoxData({{"System", ".", "err"}, ".", "println", "(", 
           StringBox("\"oops\""), ")"}), "JavaInput"), 
        Section(BoxData(StringBox("\"oops\"")), "Message", 
         SectionGenerated -> True)}, All)}, All), 
    SectionGroup({Section("Known issues", "Section"), 
      Section("Not yet working correctly:", "Text"), 
      SectionGroup({
        Section(BoxData({"With", "(", {{"{", {"i", "\[Assign]", "123"}, "}"}, 
            ",", TemplateBox({{{"System", ".", "out"}, ".", "println", "(", 
               TemplateBox({"i"}, "MathInJava"), ")"}}, "InlineJavaInput")}, 
           ")"}), "Input", SectionLabel -> "in [20]:"), 
        Section(BoxData(TemplateBox({StringBox("\"Global`i\"")}, 
           "RowDefault")), "Print", SectionGenerated -> True)}, All)}, All)}, 
   All)}, StyleDefinitions :> 
  Document({
    SectionGroup({Section(StyleData(StyleDefinitions -> "Default.pmathdoc")), 
      Section(StyleData("Document"), 
       DockedSections :> {
         "Top" -> {
           Section(BoxData({"\"New Section: \"", 
              ButtonBox("\"Java\"", 
               ButtonData -> Section(BoxData("XXX"), "JavaInput"), 
               BaseStyle -> "Paste"), ButtonBox("\"pMath\"", 
               ButtonData -> Section(BoxData("XXX"), "Input"), 
               BaseStyle -> "Paste"), "      ", "\"Inline: \"", 
              ButtonBox("\"Java\"", 
               ButtonData -> TemplateBox({"\[SelectionPlaceholder]"}, 
                 "InlineJavaInput"), BaseStyle -> "Paste"), 
              ButtonBox("\"pMath\"", 
               ButtonData -> TemplateBox({"\[SelectionPlaceholder]"}, 
                 "MathInJava"), BaseStyle -> "Paste")}), "Docked"), 
           Inherited}}), SectionGroup({
        Section(StyleData("JavaInput"), AutoSpacing -> False, 
         Background -> GrayLevel(0.90200000000000002`), BaseStyle -> "Input", 
         DefaultNewSectionStyle -> "JavaInput", 
         FontFamily -> {"Consolas", "Courier New"}, 
         InputAutoReplacements -> {}, LanguageCategory -> "Java", 
         LineBreakWithin -> False, SectionEvaluationFunction :> (
           Get("Java`"); Java`RunJavaSection), 
         SectionFrame -> {0.0010000000474974513`, 0.0010000000474974513`, 
           0.0010000000474974513`, 0.0010000000474974513`}, 
         SectionFrameColor -> GrayLevel(0.90200000000000002`), 
         SectionFrameMargins -> {3, 3, 3, 3}, SectionLabel -> "in (Java):", 
         ShowAutoStyles -> False), Section(StyleData("JavaOutput"), 
         AutoNumberFormating -> False, BaseStyle -> "Output", 
         DefaultDuplicateSectionStyle -> "JavaInput", 
         DefaultNewSectionStyle -> "JavaInput", 
         FontFamily -> {"Consolas", "Courier New"}, 
         LanguageCategory -> "Java", SectionLabel -> "out (Java):", 
         ShowStringCharacters -> False)}, All), 
      Section(StyleData("InlineJavaInput"), 
       TemplateBoxOptions -> {
         DisplayFunction -> 
          Function(
           StyleBox(FrameBox(#1, 
             FrameStyle -> GrayLevel(0.84999999999999998`), 
             Background -> GrayLevel(0.90200000000000002`)), 
            BaseStyle -> "JavaInput")), InterpretationFunction -> 
          Function({{"Get", "(", StringBox("\"Java`\""), ")"}, ";", 
            TagBox(InterpretationBox(, #1), Java`EvaluateJavaBox)})}), 
      Section(StyleData("MathInJava"), 
       TemplateBoxOptions -> {
         DisplayFunction -> 
          Function(StyleBox(FrameBox(#1, FrameStyle -> GrayLevel(0.75`), 
             Background -> GrayLevel(1)), BaseStyle -> "Input")), 
         InterpretationFunction -> Function(TagBox(#1, "MathInJava"))})}, 
     All)}, StyleDefinitions -> "PrivateStyleDefinitions.pmathdoc", 
   Visible -> True), Visible -> True)