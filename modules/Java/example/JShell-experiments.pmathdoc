/* pMath Document */

Document({
  SectionGroup({Section("JShell", "Title"), 
    SectionGroup({Section("Initialization", "Section"), 
      Section(BoxData({"<<", "Java`"}), "Input", SectionLabel -> "in [1]:"), 
      SectionGroup({
        Section(BoxData({"engine", "\[Assign]", {
            "JavaNew", "(", 
            StringBox(
             "\"jdk.jshell.execution.LocalExecutionControlProvider\""), 
            ")"}}), "Input", SectionLabel -> "in [2]:"), 
        Section(BoxData(InterpretationBox({
            "\[LeftGuillemet]", "\[NonBreakingSpace]", 
            StringBox(
             "\"jdk.jshell.execution.LocalExecutionControlProvider\""), 
            "\[NonBreakingSpace]", "\[RightGuillemet]"}, 
           Java`JavaObject(Java`Objects`javaObject$1507, 
            "jdk.jshell.execution.LocalExecutionControlProvider"), 
           Editable -> False)), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [2]:")}, All), 
      SectionGroup({
        Section(BoxData({"jshell", "\[Assign]", {
            {"JavaClass", "(", StringBox("\"jdk.jshell.JShell\""), ")"}, "@", {
             {"builder", "(", ")"}, "@", {
              {"executionEngine", "(", {"engine", ",", "/\\/"}, ")"}, "@", {
               "build", "(", ")"}}}}}), "Input", SectionLabel -> "in [3]:"), 
        Section(BoxData(InterpretationBox({
            "\[LeftGuillemet]", "\[NonBreakingSpace]", 
            StringBox("\"jdk.jshell.JShell\""), "\[NonBreakingSpace]", 
            "\[RightGuillemet]"}, Java`JavaObject(
            Java`Objects`javaObject$1513, "jdk.jshell.JShell"), 
           Editable -> False)), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [3]:")}, All)}, All), 
    SectionGroup({Section("API examples \[Dash] Evaluation", "Section"), 
      SectionGroup({
        Section(BoxData({"snips", "\[Assign]", {
            "jshell", "@", {{"eval", "(", StringBox("\"2+3\""), ")"}, "@", {
              "toArray", "(", ")"}}}}), "Input", SectionLabel -> "in [4]:"), 
        Section(
         BoxData({
           "{", InterpretationBox({"\[LeftGuillemet]", "\[NonBreakingSpace]", 
             StringBox("\"jdk.jshell.SnippetEvent\""), "\[NonBreakingSpace]", 
             "\[RightGuillemet]"}, Java`JavaObject(
             Java`Objects`javaObject$1522, "jdk.jshell.SnippetEvent"), 
            Editable -> False), "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [4]:")}, All), 
      SectionGroup({
        Section(BoxData({"snips", ".", "Map", "(", {
            "Function", "(", {"#", "@", {"value", "(", ")"}}, ")"}, ")"}), 
         "Input", SectionLabel -> "in [5]:"), 
        Section(BoxData({"{", StringBox("\"5\""), "}"}), "Output", 
         SectionGenerated -> True, SectionLabel -> "out [5]:")}, All), 
      SectionGroup({
        Section(BoxData({"snips", ".", "Map", "(", {
            "Function", "(", {"#", "@", {"toString", "(", ")"}}, ")"}, ")"}), 
         "Input", SectionLabel -> "in [6]:"), 
        Section(
         BoxData({
           "{", StringBox(
            "\"SnippetEvent(snippet=Snippet:VariableKey($1)#1-2+3,previousStat\
            us=NONEXISTENT,status=VALID,isSignatureChange=true,causeSnippetnul\
            lvalue=5)\""), "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [6]:")}, All), 
      SectionGroup({
        Section(
         BoxData({"Map", "(", {
            {"jshell", "@", {
              {"eval", "(", 
               StringBox("\"System.out.println(\\\"TestTEST\\\")\""), ")"}, 
              "@", {"toArray", "(", ")"}}}, ",", {
             "Function", "(", {"#", "@", {"value", "(", ")"}}, ")"}}, ")"}), 
         "Input", SectionLabel -> "in [7]:"), 
        Section(BoxData({"{", StringBox("\"\""), "}"}), "Output", 
         SectionGenerated -> True, SectionLabel -> "out [7]:")}, All), 
      SectionGroup({
        Section(BoxData({{"First", "(", "snips", ")"}, "@", {
            {"snippet", "(", ")"}, "@", {"toString", "(", ")"}}}), "Input", 
         SectionLabel -> "in [8]:"), 
        Section(BoxData(StringBox("\"Snippet:VariableKey($1)#1-2+3\"")), 
         "Output", SectionGenerated -> True, SectionLabel -> "out [8]:")}, 
       All), SectionGroup({
        Section(BoxData("x"), "Input", SectionLabel -> "in [9]:"), 
        Section(BoxData("x"), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [9]:")}, All), 
      SectionGroup({
        Section(BoxData({"tmpSnips", "\[Assign]", {
            "jshell", "@", {
             {"eval", "(", 
              StringBox(
               "\"new pmath.Context().run(\\\"Global`x:=`1`\\\",$6)\""), ")"}, 
             "@", {"toArray", "(", ")"}}}}), "Input", 
         SectionLabel -> "in [10]:"), 
        Section(
         BoxData({
           "{", InterpretationBox({"\[LeftGuillemet]", "\[NonBreakingSpace]", 
             StringBox("\"jdk.jshell.SnippetEvent\""), "\[NonBreakingSpace]", 
             "\[RightGuillemet]"}, Java`JavaObject(
             Java`Objects`javaObject$1596, "jdk.jshell.SnippetEvent"), 
            Editable -> False), "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [10]:")}, All), 
      SectionGroup({
        Section(BoxData({{"tmpSnips", "[", "1", "]"}, "@", {
            "toString", "(", ")"}}), "Input", SectionLabel -> "in [11]:"), 
        Section(
         BoxData(
          StringBox(
           "\"SnippetEvent(snippet=Snippet:ErroneousKey#3-new \
           pmath.Context().run(\\\"Global`x:=`1`\\\",$6),previousStatus=NONEXI\
           STENT,status=REJECTED,isSignatureChange=false,causeSnippetnull)\"")), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [11]:")}, All), 
      SectionGroup({Section(BoxData("x"), "Input", 
         SectionLabel -> "in [12]:"), Section(BoxData("x"), "Output", 
         SectionGenerated -> True, SectionLabel -> "out [12]:")}, All), 
      SectionGroup({
        Section(BoxData({"jshell", "@", {{"snippets", "(", ")"}, "@", {
             "toArray", "(", ")"}}}), "Input", SectionLabel -> "in [13]:"), 
        Section(
         BoxData({
           "{", {InterpretationBox({"\[LeftGuillemet]", "\[NonBreakingSpace]", 
              StringBox("\"jdk.jshell.VarSnippet\""), "\[NonBreakingSpace]", 
              "\[RightGuillemet]"}, Java`JavaObject(
              Java`Objects`javaObject$1639, "jdk.jshell.VarSnippet"), 
             Editable -> False), ",", InterpretationBox({
              "\[LeftGuillemet]", "\[NonBreakingSpace]", 
              StringBox("\"jdk.jshell.StatementSnippet\""), 
              "\[NonBreakingSpace]", "\[RightGuillemet]"}, 
             Java`JavaObject(Java`Objects`javaObject$1638, 
              "jdk.jshell.StatementSnippet"), Editable -> False), ",", 
            InterpretationBox({"\[LeftGuillemet]", "\[NonBreakingSpace]", 
              StringBox("\"jdk.jshell.ErroneousSnippet\""), 
              "\[NonBreakingSpace]", "\[RightGuillemet]"}, 
             Java`JavaObject(Java`Objects`javaObject$1637, 
              "jdk.jshell.ErroneousSnippet"), Editable -> False)}, "}"}), 
         "Output", SectionGenerated -> True, SectionLabel -> "out [13]:")}, 
       All), SectionGroup({
        Section(BoxData({"tmpSnips", ":=", {
            "jshell", "@", {{"eval", "(", StringBox("\"1+\""), ")"}, "@", {
              "toArray", "(", ")"}}}}), "Input", SectionLabel -> "in [14]:"), 
        Section(
         BoxData({
           "{", InterpretationBox({"\[LeftGuillemet]", "\[NonBreakingSpace]", 
             StringBox("\"jdk.jshell.SnippetEvent\""), "\[NonBreakingSpace]", 
             "\[RightGuillemet]"}, Java`JavaObject(
             Java`Objects`javaObject$1655, "jdk.jshell.SnippetEvent"), 
            Editable -> False), "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [14]:")}, All), 
      SectionGroup({
        Section(
         BoxData({"Map", "(", {"tmpSnips", ",", {
             "Function", "(", {"#", "@", {"toString", "(", ")"}}, ")"}}, 
           ")"}), "Input", SectionLabel -> "in [15]:"), 
        Section(
         BoxData({
           "{", StringBox(
            "\"SnippetEvent(snippet=Snippet:ErroneousKey#4-1+,previousStatus=N\
            ONEXISTENT,status=REJECTED,isSignatureChange=false,causeSnippetnul\
            l)\""), "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [15]:")}, All), 
      SectionGroup({
        Section(
         BoxData({"Map", "(", {"tmpSnips", ",", {
             "Function", "(", {
              "Map", "(", {
               {"jshell", "@", {
                 {"diagnostics", "(", {"#", "@", {"snippet", "(", ")"}}, ")"}, 
                 "@", {"toArray", "(", ")"}}}, ",", {
                "Function", "(", {"#", "@", {"getMessage", "(", "/\\/", ")"}}, 
                ")"}}, ")"}, ")"}}, ")"}), "Input", 
         SectionLabel -> "in [16]:"), 
        Section(
         BoxData({
           "{", {"{", StringBox("\"reached end of file while parsing\""), 
            "}"}, "}"}), "Output", SectionGenerated -> True, 
         SectionLabel -> "out [16]:")}, All)}, All), 
    SectionGroup({Section("Front-End integration", "Section"), 
      Section(BoxData({{"javaCodeFromBoxes", "(", {"~", "s", ":", "String"}, 
          ")"}, "\[AssignDelayed]", "s"}), "Input", 
       SectionLabel -> "in [17]:"), 
      Section(
       "Caution: the front-end will strip white-space and pMath comments \
       before sending the box expressions. Hence, we insert spaces between any \
       two tokens:", "Text"), 
      Section(BoxData({{"javaCodeFromBoxes", "(", {"~", "boxes", ":", "List"}, 
          ")"}, "\[AssignDelayed]", {"StringExpression", "@@", {
           {"boxes", ".", "Map", "(", "javaCodeFromBoxes", ")"}, ".", 
           "Riffle", "(", StringBox("\" \""), ")"}}}), "Input", 
       SectionLabel -> "in [18]:"), 
      Section(
       BoxData({{"javaStringCodeFromBoxes", "(", {"~", "s", ":", "String"}, 
          ")"}, "\[AssignDelayed]", "s"}), "Input", 
       SectionLabel -> "in [19]:"), 
      Section(BoxData({{"javaStringCodeFromBoxes", "(", {"~", "box"}, ")"}, 
         "\[AssignDelayed]", {StringBox("\"\\\\uFFF9\""), "++", {
           {"ToString", "(", {"InputForm", "(", "box", ")"}, ")"}, ".", 
           "StringReplace", "(", {
            "{", {{StringBox("\"\\\\\""), "\[RuleDelayed]", 
              StringBox("\"\\\\\\\\\"")}, ",", {
              StringBox("\"\\\"\""), "\[RuleDelayed]", 
              StringBox("\"\\\\\\\"\"")}}, "}"}, ")"}, "++", 
          StringBox("\"\\\\uFFFB\"")}}), "Input", SectionLabel -> "in [20]:"), 
      Section(
       BoxData({{"javaCodeFromBoxes", "(", {
           "StringBox", "(", {"~~~", "s"}, ")"}, ")"}, "\[AssignDelayed]", {
          "StringExpression", "@@", {
           "Map", "(", {{"{", "s", "}"}, ",", "javaStringCodeFromBoxes"}, 
           ")"}}}), "Input", SectionLabel -> "in [21]:"), 
      Section(
       "A better solution would be to tell the front-end that is should send \
       everything, e.g. with a Section option StripWhitespace \[Rule] False ", 
       "Text"), Section("Just for fun: convert SqrtBox to Java code:", 
       "Text"), 
      Section(
       BoxData({
         "%", {{"javaCodeFromBoxes", "(", {
            "SqrtBox", "(", {{"~", "box"}, ",", "~~~"}, ")"}, ")"}, 
          "\[AssignDelayed]", {StringBox("\"(java.lang.Math.sqrt(\""), "++", {
            "javaCodeFromBoxes", "(", "box", ")"}, "++", 
           StringBox("\"))\"")}}}), "Input", SectionLabel -> "in [22]:"), 
      Section(BoxData({{"javaCodeFromBoxes", "(", {"~", "errbox"}, ")"}, 
         "\[AssignDelayed]", {
          "(", {{"Message", "(", {{"Java", "::", "box"}, ",", {
              "RawBoxes", "@", {"ButtonBox", "(", {
                {"MakeBoxes", "(", {"Short", "(", "errbox", ")"}, ")"}, ",", {
                 "ButtonFunction", "\[Rule]", {
                  "Developer`SourceLocationOpenerFunction", "(", {
                   "Developer`GetDebugInfo", "(", "errbox", ")"}, ")"}}, ",", {
                 "ButtonFrame", "\[Rule]", StringBox("\"Frameless\"")}}, 
               ")"}}}, ")"}, ";", "$Failed"}, ")"}}), "Input", 
       SectionLabel -> "in [22]:"), 
      Section(
       BoxData(
        /\/({{{"Java", "::", "box"}, "\[Assign]", 
           StringBox("\"Cannot convert `1` to Java code.\"")}, ";"}, "\n", {
          {{"Java", "::", "ex"}, "\[Assign]", StringBox("\"`1`\"")}, ";"}, 
         "\n", {{{"Java", "::", "diag"}, "\[Assign]", StringBox("\"`1`\"")}, 
          ";"})), "Input", SectionLabel -> "in [23]:"), 
      Section("The SectionEvaluationFunction for Java input:", "Text"), 
      Section(BoxData({"Function", " ", {
          "runJavaSection", "(", {"~", "boxes"}, ")"}, {
          "{", {"\n", {{{"Local", "(", "snippetEvent", ")"}, "\n", {
              {"CurrentValue", "(", {
                {"FE`CallFrontEnd", "(", {"FrontEnd`EvaluationBox", "(", ")"}, 
                 ")"}, ",", "SectionLabel"}, ")"}, "\[Assign]", "Inherited"}, 
             "\n", {"With", "(", {"code", "\[Assign]", {
                "javaCodeFromBoxes", "(", "boxes", ")"}}, ")"}, "\n", {
              {"If", "(", {"!", {"code", ".", "IsString"}}, ")"}, {
               "{", {"\n", {{"Return", "(", StringBox("\"/\\\\/\""), ")"}, 
                 "\n"}}, "}"}}, "\n", {
              {"Do", "(", {"snippetEvent", "\[Rule]", {
                 "jshell", "@", {{"eval", "(", "code", ")"}, "@", {
                   "toArray", "(", ")"}}}}, ")"}, {
               "{", {
                "\n", {{{"debugSnippetEvent", "\[Assign]", "snippetEvent"}, 
                  "\n", {
                   "%", {"Echo", "(", {"snippetEvent", "@", {
                      "toString", "(", ")"}}, ")"}}, {
                   "\n", {"With", "(", {"val", "\[Assign]", {
                      "snippetEvent", "@", {"value", "(", ")"}}}, ")"}}, "\n", 
                  {{"If", "(", {"val", ".", "IsString", "(", ")"}, ")"}, {
                    "{", {
                     "\n", {{"SectionPrint", "(", {
                        "Section", "(", {"val", ",", 
                         StringBox("\"JavaOutput\"")}, ")"}, ")"}, "\n"}}, 
                    "}"}, "Else", " ", {
                    "{", {
                     "\n", {
                      {{"Switch", "(", {"snippetEvent", "@", {
                          {"status", "(", ")"}, "@", {"toString", "(", ")"}}}, 
                        ")"}, {
                        "{", {
                         "\n", {
                          {{{"Case", "(", StringBox("\"REJECTED\""), ")"}, {
                             "{", {"\n", {{{"Local", "(", "diag", ")"}, "\n", {
                                 {"Do", "(", {"diag", "\[Rule]", {
                                    "jshell", "@", {
                                     {"diagnostics", "(", {
                                       "snippetEvent", "@", {
                                        "snippet", "(", ")"}}, ")"}, "@", {
                                      "toArray", "(", ")"}}}}, ")"}, {
                                  "{", {
                                   "\n", {{"Message", "(", {
                                      {"Java", "::", "diag"}, ",", {
                                       "diag", "@", {"getMessage", "(", 
                                        "/\\/", ")"}}}, ")"}, "\n"}}, "}"}}}, 
                               "\n"}}, "}"}}, "\n", {{"Case", "(", "~", ")"}, {
                             "{", {
                              "\n", {
                               {{"With", "(", {"ex", "\[Assign]", {
                                   "snippetEvent", "@", {
                                    "exception", "(", ")"}}}, ")"}, "\n", {
                                 {"If", "(", {"ex", "=!=", "/\\/"}, ")"}, {
                                  "{", {
                                   "\n", {
                                    {{"If", "(", {"InstanceOf", "(", {
                                        "ex", ",", {"JavaClass", "(", 
                                        StringBox(
                                        "\"jdk.jshell.EvalException\""), 
                                        ")"}}, ")"}, ")"}, {
                                      "{", {"\n", {
                                        {"Message", "(", {
                                        {"Java", "::", "ex"}, ",", {
                                        {"ex", "@", {"getExceptionClassName", 
                                        "(", ")"}}, "++", StringBox("\": \""), 
                                        "++", {"ex", "@", {"getMessage", "(", 
                                        ")"}}}}, ")"}, "\n"}}, "}"}, "Else", {
                                      "{", {"\n", {
                                        {"Message", "(", {
                                        {"Java", "::", "ex"}, ",", {
                                        "ex", "@", {"toString", "(", ")"}}}, 
                                        ")"}, "\n"}}, "}"}}, "\n"}}, "}"}}}, 
                               "\n"}}, "}"}}}, "\n"}}, "}"}}, "\n"}}, "}"}}}, 
                 "\n"}}, "}"}}, "\n", StringBox("\"/\\\\/\"")}, "\n"}}, 
          "}"}}), "Input", SectionLabel -> "in [26]:"), 
      Section(BoxData({{"runJavaSection", "(", StringBox("\"\\n\""), ")"}, 
         "\[AssignDelayed]", StringBox("\"/\\\\/\"")}), "Input", 
       SectionLabel -> "in [27]:"), 
      Section(BoxData({{"runJavaSection", "(", {"~", "lines", ":", "/\\/"}, 
          ")"}, "\[AssignDelayed]", {
          "(", {{"lines", ".", "Scan", "(", "runJavaSection", ")"}, ";", 
           StringBox("\"/\\\\/\"")}, ")"}}), "Input", 
       SectionLabel -> "in [28]:"), Section("A Java input section:", "Text"), 
      Section(BoxData({"SectionPrint", "(", {
          "Section", "(", {{"BoxData", "(", StringBox("\"XXX\""), ")"}, ",", 
           StringBox("\"JavaInput\"")}, ")"}, ")"}), "Input", 
       SectionLabel -> "in [29]:"), Section(BoxData("XXX"), "JavaInput", 
       SectionGenerated -> True), 
      SectionGroup({Section(BoxData("XXX"), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"diag"), 
               Message -> StringForm("`1`", 
                 "cannot find symbol\n  symbol:   variable XXX\n  location: \
                 class "), Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\librar\
                    y\\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                      107, 14} .. {107, 20})}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 205 .. 825)}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 484 .. 589)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 547 .. 587)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"diag\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"", 
             StringBox(
              "\"cannot find symbol\n  symbol:   variable XXX\n  location: \
              class \"")), StringForm("`1`", 
             "cannot find symbol\n  symbol:   variable XXX\n  location: class \
             "), Editable -> False)}), "Message", SectionGenerated -> True)}, 
       All), SectionGroup({
        Section(BoxData({"System", ".", "getProperty", "(", 
           StringBox("\"java.version\""), ")"}), "JavaInput"), 
        Section("\"14.0.1\"", "JavaOutput", SectionGenerated -> True)}, All), 
      SectionGroup({Section(BoxData({"1", "+"}), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"diag"), 
               Message -> StringForm("`1`", 
                 "reached end of file while parsing"), 
               Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\librar\
                    y\\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                      107, 14} .. {107, 20})}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 205 .. 825)}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 484 .. 589)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 547 .. 587)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"diag\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"", 
             StringBox("\"reached end of file while parsing\"")), 
            StringForm("`1`", "reached end of file while parsing"), 
            Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
      SectionGroup({
        Section(BoxData(/\/({"1", " ", "+", " ", "1"}, "\n", {
            "2", " ", "+", " ", "2"})), "JavaInput"), 
        Section("2", "JavaOutput", SectionGenerated -> True), 
        Section("4", "JavaOutput", SectionGenerated -> True)}, All), 
      SectionGroup({Section(BoxData({"1", "+", SqrtBox("3")}), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"box"), 
               Message -> StringForm("Cannot convert `1` to Java code.", 
                 RawBoxes(ButtonBox({"SqrtBox", "(", {StringBox("\"3\"")}, 
                    ")"}, ButtonFunction -> 
                    Function(SetSelectedDocument(Automatic, 
                      Language`SourceLocation(
                       FrontEndObject(286778840440051010, 9982), 2 .. 3))), 
                   ButtonFrame -> "Frameless"))), 
               Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> With, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 132 .. 833)}, {"Head" -> Apply, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9900), 31 .. 89)}, {
                  "Head" -> Riffle, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9900), 49 .. 89)}, {"Head" -> Map, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9900), 49 .. 77)}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9914), 27 .. 210)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9914), 28 .. 201)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"box\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"Cannot convert ", 
             ButtonBox({"SqrtBox", "(", StringBox("\"3\""), ")"}, 
              ButtonFrame -> "Frameless", 
              ButtonFunction -> Function(SetSelectedDocument(Automatic, 
                 Language`SourceLocation(FrontEndObject(286778840440051010, 
                   9982), 2 .. 3)))), " to Java code.\""), 
            StringForm("Cannot convert `1` to Java code.", 
             RawBoxes(ButtonBox({"SqrtBox", "(", {StringBox("\"3\"")}, ")"}, 
               ButtonFunction -> Function(SetSelectedDocument(Automatic, 
                  Language`SourceLocation(FrontEndObject(286778840440051010, 
                    9982), 2 .. 3))), ButtonFrame -> "Frameless"))), 
            Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
      SectionGroup({
        Section(
         BoxData({{"throw", " ", "new", " ", {
             {"java", ".", "lang"}, ".", "Exception", "(", 
             StringBox("\"bla bla\""), ")"}}, ";"}), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"ex"), 
               Message -> StringForm("`1`", "java.lang.Exception: bla bla"), 
               Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\librar\
                    y\\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                      107, 14} .. {107, 20})}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 205 .. 825)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 707 .. 774)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"ex\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"", StringBox("\"java.lang.Exception: bla bla\"")), 
            StringForm("`1`", "java.lang.Exception: bla bla"), 
            Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
      SectionGroup({Section(BoxData({"1", "/", "0"}), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"ex"), 
               Message -> StringForm("`1`", 
                 "java.lang.ArithmeticException: / by zero"), 
               Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    "C:\\Users\\Peter\\Documents\\Programmieren\\pmath\\librar\
                    y\\scripts\\auto\\core\\format\\extended-syntax.pmath", {
                      107, 14} .. {107, 20})}, {
                  "Head" -> Do, "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9920), 205 .. 825)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 707 .. 774)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"ex\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"", 
             StringBox("\"java.lang.ArithmeticException: / by zero\"")), 
            StringForm("`1`", "java.lang.ArithmeticException: / by zero"), 
            Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
      SectionGroup({Section(BoxData({"x", SuperscriptBox("2")}), "JavaInput"), 
        Section(
         BoxData({
           TemplateBox({
             TemplateBox({MessageName -> HoldForm(Java`Java::"box"), 
               Message -> StringForm("Cannot convert `1` to Java code.", 
                 RawBoxes(ButtonBox({"SuperscriptBox", "(", {
                     StringBox("\"2\"")}, ")"}, 
                   ButtonFunction -> 
                    Function(SetSelectedDocument(Automatic, 
                      Language`SourceLocation(
                       FrontEndObject(286778840440051010, 10044), 1 .. 2))), 
                   ButtonFrame -> "Frameless"))), 
               Stack -> {{"Head" -> ToExpression}, {
                  "Head" -> $Context`runJavaSection}, {
                  "Head" -> With, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9920), 132 .. 833)}, {"Head" -> Apply, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9900), 31 .. 89)}, {
                  "Head" -> Riffle, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9900), 49 .. 89)}, {"Head" -> Map, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9900), 49 .. 77)}, {
                  "Head" -> EvaluationSequence, 
                  "Location" -> Language`SourceLocation(
                    FrontEndObject(286778840440051010, 9914), 27 .. 210)}, {
                  "Head" -> Message, "Location" -> 
                   Language`SourceLocation(FrontEndObject(286778840440051010, 
                     9914), 28 .. 201)}, {"Head" -> SectionPrint}}}, 
              "MessageMenuButton"), {"Java", "::", StringBox("\"box\"")}}, 
            "RowDefault"), ":", " ", InterpretationBox(
            StringBox("\"Cannot convert ", 
             ButtonBox({"SuperscriptBox", "(", StringBox("\"2\""), ")"}, 
              ButtonFrame -> "Frameless", 
              ButtonFunction -> Function(SetSelectedDocument(Automatic, 
                 Language`SourceLocation(FrontEndObject(286778840440051010, 
                   10044), 1 .. 2)))), " to Java code.\""), 
            StringForm("Cannot convert `1` to Java code.", 
             RawBoxes(ButtonBox({"SuperscriptBox", "(", {StringBox("\"2\"")}, 
                ")"}, ButtonFunction -> 
                Function(SetSelectedDocument(Automatic, 
                  Language`SourceLocation(FrontEndObject(286778840440051010, 
                    10044), 1 .. 2))), ButtonFrame -> "Frameless"))), 
            Editable -> False)}), "Message", SectionGenerated -> True)}, All), 
      SectionGroup({
        Section(BoxData(StringBox("\"x", SuperscriptBox("2"), "+", 
           SqrtBox("3"), "\"")), "JavaInput"), 
        SectionGroup({Section(TextData({"\"x", $Failed, "+", $Failed, "\""}), 
           "JavaOutput", SectionGenerated -> True), 
          Section(
           BoxData({
             TemplateBox({
               TemplateBox({MessageName -> HoldForm(MakeExpression::"inv"), 
                 Message -> StringForm(
                   "`1` is neither a string nor a valid box.", "\""), 
                 Stack -> {{"Head" -> MakeExpression}, {
                    "Head" -> MakeExpression}, {"Head" -> MakeExpression}, {
                    "Head" -> Message}, {"Head" -> SectionPrint}}}, 
                "MessageMenuButton"), {"MakeExpression", "::", 
                StringBox("\"inv\"")}}, "RowDefault"), ":", " ", 
             InterpretationBox(StringBox("\"", StringBox("\"\\\"\""), 
               " is neither a string nor a valid box.\""), 
              StringForm("`1` is neither a string nor a valid box.", "\""), 
              Editable -> False)}), "Message", SectionGenerated -> True), 
          Section(
           BoxData({
             TemplateBox({
               TemplateBox({MessageName -> HoldForm(MakeExpression::"bgn"), 
                 Message -> StringForm(
                   "An expression cannot begin with \"`1`\".", 
                   HoldForm(RawBoxes({"\\\"", "2", "\\\""}))), 
                 Stack -> {{"Head" -> MakeExpression}, {
                    "Head" -> MakeExpression}, {"Head" -> Message}, {
                    "Head" -> SectionPrint}}}, "MessageMenuButton"), {
                "MakeExpression", "::", StringBox("\"bgn\"")}}, "RowDefault"), 
             ":", " ", InterpretationBox(
              StringBox("\"An expression cannot begin with \\\"", {
                "\\\"", "2", "\\\""}, "\\\".\""), 
              StringForm("An expression cannot begin with \"`1`\".", 
               HoldForm(RawBoxes({"\\\"", "2", "\\\""}))), 
              Editable -> False)}), "Message", SectionGenerated -> True), 
          Section(
           BoxData({
             TemplateBox({
               TemplateBox({MessageName -> HoldForm(MakeExpression::"inv"), 
                 Message -> StringForm(
                   "`1` is neither a string nor a valid box.", "\""), 
                 Stack -> {{"Head" -> MakeExpression}, {
                    "Head" -> MakeExpression}, {"Head" -> MakeExpression}, {
                    "Head" -> Message}, {"Head" -> SectionPrint}}}, 
                "MessageMenuButton"), {"MakeExpression", "::", 
                StringBox("\"inv\"")}}, "RowDefault"), ":", " ", 
             InterpretationBox(StringBox("\"", StringBox("\"\\\"\""), 
               " is neither a string nor a valid box.\""), 
              StringForm("`1` is neither a string nor a valid box.", "\""), 
              Editable -> False)}), "Message", SectionGenerated -> True), 
          Section(
           BoxData({
             TemplateBox({
               TemplateBox({MessageName -> HoldForm(MakeExpression::"bgn"), 
                 Message -> StringForm(
                   "An expression cannot begin with \"`1`\".", 
                   HoldForm(RawBoxes({"\\\"", "3", "\\\""}))), 
                 Stack -> {{"Head" -> MakeExpression}, {
                    "Head" -> MakeExpression}, {"Head" -> Message}, {
                    "Head" -> SectionPrint}}}, "MessageMenuButton"), {
                "MakeExpression", "::", StringBox("\"bgn\"")}}, "RowDefault"), 
             ":", " ", InterpretationBox(
              StringBox("\"An expression cannot begin with \\\"", {
                "\\\"", "3", "\\\""}, "\\\".\""), 
              StringForm("An expression cannot begin with \"`1`\".", 
               HoldForm(RawBoxes({"\\\"", "3", "\\\""}))), 
              Editable -> False)}), "Message", SectionGenerated -> True)}, 
         All)}, All), SectionGroup({
        Section(
         BoxData({{{"var", " ", "ctx"}, " ", "=", " ", {
             "new", " ", {"pmath", ".", "Context", "(", ")"}}}, ";"}), 
         "JavaInput"), Section("pmath.Context@bdaed6d", "JavaOutput", 
         SectionGenerated -> True)}, All), 
      SectionGroup({
        Section(BoxData({"ctx", ".", "evaluate", "(", {
            StringBox("\"Print(`1`)\""), ",", " ", StringBox("\"Hello\"")}, 
           ")"}), "JavaInput"), 
        Section(BoxData(TemplateBox({StringBox("\"Hello\"")}, "RowDefault")), 
         "Print", SectionGenerated -> True), 
        Section("null", "JavaOutput", SectionGenerated -> True)}, All), 
      SectionGroup({Section(BoxData({"1", "+", "1"}), "JavaInput"), 
        Section("2", "JavaOutput", SectionGenerated -> True)}, All)}, All)}, 
   All)}, StyleDefinitions :> 
  Document({
    SectionGroup({Section(StyleData(StyleDefinitions -> "Default.pmathdoc")), 
      SectionGroup({Section(StyleData("JavaInput"), AutoSpacing -> False, 
         Background -> GrayLevel(0.90200000000000002`), BaseStyle -> "Input", 
         DefaultNewSectionStyle -> "JavaInput", FontFamily -> "Consolas", 
         LanguageCategory -> "Java", LineBreakWithin -> False, 
         SectionEvaluationFunction :> Global`runJavaSection, 
         SectionLabel -> "in (Java):", ShowAutoStyles -> False), 
        Section(StyleData("JavaOutput"), AutoNumberFormating -> False, 
         BaseStyle -> "Output", DefaultDuplicateSectionStyle -> "JavaInput", 
         DefaultNewSectionStyle -> "JavaInput", FontFamily -> "Consolas", 
         SectionLabel -> "out (Java):", ShowStringCharacters -> True)}, All)}, 
     All)}, StyleDefinitions -> "PrivateStyleDefinitions.pmathdoc", 
   Visible -> True), Visible -> True)