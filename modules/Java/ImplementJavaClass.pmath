
BeginPackage("Java`", {"ExperimentalSyntax`"})

Java`ImplementJavaClass

Begin("ImplementJavaClass`Private`")


AddToClassPath(ToFileName({ParentDirectory($Input), "classpath"}, "javassist.jar"))


ImplementJavaClass::multi:= "Cannot derive from multiple classes."
ImplementJavaClass::miss:= "No implementation for abstract method `1` given."
ImplementJavaClass::static:= "Cannot implement static method `1`."


javaThrow(~ex)::= Throw(JavaException(ex, ex @ toString(), Map(ex @ getStackTrace(), # @ toString() &)))

Function DoCallback(~symbol, ~javaObject, ~methodName, ~argumentList) {
%	Message(ImplementJavaClass::noimpl, HoldForm(DoCallback(symbol, javaObject, methodName, argumentList)))
	javaThrow(JavaNew(
		"java.lang.UnsupportedOperationException", 
		"Not yet implemented: " ++ ClassName(javaObject) ++ "." ++ methodName ++ "(\[Ellipsis])"))
}
Protect(DoCallback)


% This could actually be implemented in Java.
Function BuildImplementationClass(classes: {~~~:JavaClass}, methods: {~~~:String}) {
	Local(class, meth)
	With(pool:= JavaClass("javassist.ClassPool") @ getDefault())
	With(ctclasses:= classes.Map(pool @ get(First(#)) &))
	With(ctinterfaces:= ctclasses.Select(# @ isInterface() &))
	With(ctsuper:= Complement(ctclasses, ctinterfaces))
	With(abstract:= JavaClass("java.lang.reflect.Modifier") @ ABSTRACT)
	With(static:= JavaClass("java.lang.reflect.Modifier") @ STATIC)
	With(ctmethods:= ctclasses.Map(# @ getMethods() &).Flatten.Select(
			BitAnd(# @ getModifiers(), abstract) != 0 || 
			!methods.IsFreeOf(# @ getName()) &))
	
	If(Length(ctsuper) > 1) {
		Message(ImplementJavaClass::multi);
		Return($Failed)
	}
	
	Do(meth -> ctmethods) {
		If(BitAnd(meth @ getModifiers(), static) != 0) {
			Message(ImplementJavaClass::static, meth @ toString());
			Return(Return($Failed));
		}
		If(methods.IsFreeOf(meth @ getName())) {
			Message(ImplementJavaClass::miss, meth @ toString());
			Return(Return($Failed));
		}
	}
	
	With(newCtClass:= pool @ makeClass("pmath.javabridge." ++ SymbolName(class)))
	With(classLoader:= First @ Select(
		{pool @ getClassLoader(), JavaClass("java.lang.ClassLoader") @ getSystemClassLoader()}, 
		# =!= /\/ &))
	
	Try {
		ctinterfaces.Scan(newCtClass @ addInterface(#) &);
		If(ctsuper.Length = 1) {
			newCtClass @ setSuperclass( First(ctsuper) )
		}
		
		newCtClass @ addField(JavaClass("javassist.CtField") @ make("private String __pmath_impl;", newCtClass));
		newCtClass @ addMethod(
			JavaClass("javassist.CtNewMethod") @ make(
				"public void __pmath_init(String impl){ if(this.__pmath_impl == null) this.__pmath_impl = impl; }", 
				newCtClass));
		
		Do(meth -> ctmethods) {
			With(origMethod:= meth)
			With(modifiers:= BitAnd(meth @ getModifiers(), BitNot(abstract)))
			With(returnType:= meth @ getReturnType())
			With(parameters:= meth @ getParameterTypes())
			With(exceptions:= meth @ getExceptionTypes())
			With(methodName:= meth @ getName())
			With(javaBody:= "{ return ($r)pmath.Core.execute(\
								\"ImplementJavaClass`Private`DoCallback(ToExpression(`1`), `2`, `3`, `4`)\", \
								new Object[]{ this.__pmath_impl, this, \"" ++ (meth @ getName()) ++ "\", $args });\
							}")
			With(newMethod:= JavaClass("javassist.CtNewMethod") @ make(
									modifiers, returnType, methodName, parameters, exceptions, javaBody, newCtClass))
			
			newCtClass @ addMethod(newMethod)
		}
		
		Return(Evaluate(newCtClass @ toClass(classLoader, /\/)));
	} Finally {
		newCtClass @ prune()
	}
}

Function GetImplementationClass(classes: {~~~:JavaClass}, methods: {~~~:String}) {
	With(class:= BuildImplementationClass(classes, methods))
	If(class =!= $Failed) {
		GetImplementationClass(classes, methods):= class
	}
	Return(class)
}
	

Options(ImplementJavaClass):= {ConstructorArguments->{}}
Options(ImplementJavaClassInternal):= Options(ImplementJavaClass)

ImplementJavaClass(class: (~:String | ~:JavaClass), methods: {(~:String -> ~:Symbol)***}, options: OptionsPattern())::=
	ImplementJavaClass({class}, methods, options)

ImplementJavaClass(classes: {(~:String | ~:JavaClass)***}, methods: {(~:String -> ~:Symbol)***}, options: OptionsPattern())::=
	ImplementJavaClassInternal(classes.Map(If(IsString(#), JavaClass(#), #)&), methods, options)

Function ImplementJavaClassInternal(classes: {~~~:JavaClass}, methods: {(~:String -> ~:Symbol)***}, OptionsPattern()) {
	With(class:= GetImplementationClass(Union(classes), Union(methods[All, 1])))
	If(class === $Failed) {
		Return($Failed)
	}
	
	With(obj:= JavaNew(class @ getName(), Sequence @@ OptionValue(ConstructorArguments)))
	If(obj =!= $Failed) {
		With(objSym:= First(obj))
		Local(meth)
		
		obj @ "__pmath_init"(LongForm(objSym).ToString);
		
		Unprotect(objSym);
		Do(meth -> methods) {
			With(methodName:= meth[1], methodImpl:= meth[2])
			
			objSym/: DoCallback(objSym, ~this, methodName, {~~~args})::= methodImpl(this, args)
		}
		Protect(objSym);
	}
	Return(obj);
}

Protect(ImplementJavaClass)


End()

EndPackage()
