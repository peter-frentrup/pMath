
BeginPackage("Java`")

Java`Java
Java`JavaClass
Java`JavaCall
Java`JavaException
Java`JavaField
Java`JavaKillVM
Java`JavaNew
Java`JavaStartVM
Java`$JavaVMLibraryName
Java`$DefaultClassPath

Java`ClassName
Java`GetClass
Java`InstanceOf
Java`ParentClass

Java`Constructors
Java`Methods
Java`Fields

Begin("Java`Private`")

Java::argx:= "Method named `1` defined in class `2` was called with an incorrect number or type of arguments. The arguments, shown here in a list, were `3`."
Java::argx0:= "Method named `1` defined in class `2` does not take zero arguments."
Java::fldx:= "Attempting to set field named `1` defined in class `2` to an incorrect type of value: `3`."
Java::nofld:= "No field `1` defined in class `2`."
Java::nometh:= "No method `1` defined in class `2`."
Java::noobj:= "`1` is not a Java object."
Java::nobcl:= "`1` is neither a Java object nor a Java class."

JavaNew::argx:= "Incorrect number or type of arguments to constructor for class `1`. The arguments, shown here in a list, were `2`."
JavaNew::argx0:= "There is no constructor for class `1` that takes zero arguments."
JavaNew::fail:= "Error calling constructor for class `1`."
JavaNew::nocls:= "Class named `1` not found."


If(!IsString(Java`Private`$DLLDirectory), 
	Java`Private`$DLLDirectory:= DirectoryName($Input))
	

If(System`$SystemId === "Windows",
	path:= Join(Environment("PATH").StringSplit($PathListSeparator),
	            Environment("ProgramFiles").StringSplit($PathListSeparator));
	
	path:= FileNames("Java", path).Reverse;
	path:= Join(FileNames("jre*", path), FileNames("jre", FileNames("jdk*", path)));
	path:= FileNames("bin", path);
	path:= FileNames({"server","client"}, path);
	path:= FileNames("jvm.dll", path);
	
	Unprotect($JavaVMLibraryName);
	$JavaVMLibraryName:= First(path);
	Unprotect($JavaVMLibraryName);
	)
If(System`$SystemId === "Linux",
	If($ProcessorType === "x64", 
		arch:= "amd64";
		path:= {"/usr/lib64", "/usr/local/lib64"};
	,
		arch:= "i386";
		path:= {"/usr/lib", "/usr/local/lib"});
	
	path:= FileNames("jvm", path);
	path:= FileNames("*", path);
	path:= FileNames("jre", path);
	path:= FileNames("lib", path);
	path:= FileNames(arch, path);
	path:= FileNames({"server","client"}, path);
	path:= FileNames("libjvm.so", path);
	
	Unprotect($JavaVMLibraryName);
	$JavaVMLibraryName:= First(path);
	Unprotect($JavaVMLibraryName);
	)

Java`$DefaultClassPath:= {ToFileName(DirectoryName($Input, 2), "classpath")}


Java`JavaClass(~cls:String) @ (~f:String)::= Java`JavaField(cls, f)
Java`JavaClass(~cls:String) @ (~f:Symbol)::= Java`JavaField(cls, SymbolName(f))

Java`JavaClass /: (Java`JavaClass(~cls:String) @ (~f:String):= ~rhs)::= Java`JavaField(cls, f):= rhs
Java`JavaClass /: (Java`JavaClass(~cls:String) @ (~f:Symbol):= ~rhs)::= With({fs:= SymbolName(f)}, Java`JavaField(cls, fs):= rhs)

Java`JavaClass(~cls:String) @ (~m:String)(~~~args) ::= Java`JavaCall(cls,     m,             args)
Java`JavaClass(~cls:String) @ (~m:Symbol)(~~~args) ::= Java`JavaCall(cls,     SymbolName(m), args)
~c:Java`JavaClass @ (e1: ~(~~~))(~e2)              ::= (c @ e1) @ e2



LoadLibrary(ToFileName(
	Java`Private`$DLLDirectory, 
	If($SystemId === "Windows",
		"pmath-java.dll",
		"pmath-java.so")))



stringStyle(~s, ~~~styles)::= "\(" ++ Style(s, styles).ToBoxes.ToString ++ "\)"

syntaxHighlight(~lines)::= lines.StringReplace(
		{"final " | "public " | "native " -> ""}
	).StringReplace(
		"," -> ", "
	).StringReplace(
		"java.lang." ++ (name: WordCharacter**) ++ (c: " " | "[" | "," | "(" | ")" | EndOfString) :> name ++ c
	).StringReplace(
		" " ++ Shortest((WordCharacter|".")**) ++ "." ++ (name:WordCharacter**) ++ "(" :> " " ++ stringStyle(name, Blue, Italic) ++ "("
	).StringReplace(
		(s: WordBoundary ++ ("Object" | "String") ++ WordBoundary) :> stringStyle(s, Bold)
	).StringReplace(
		WordBoundary ++ (s: "void" | "byte" | "char" | "boolean" | "short" | "int" | "long" | "throws" | "double" | "float" | "static") ++ WordBoundary :> stringStyle(s, Brown, Bold)
	)

Constructors(cls: (~:JavaClass | ~:String))::= Column(JavaClassAsObject(cls).JavaCall("getConstructors").Map(#.JavaCall("toString")&).syntaxHighlight)
Methods(     cls: (~:JavaClass | ~:String))::= Column(JavaClassAsObject(cls).JavaCall("getMethods").Map(     #.JavaCall("toString")&).syntaxHighlight)
Fields(      cls: (~:JavaClass | ~:String))::= Column(JavaClassAsObject(cls).JavaCall("getFields").Map(      #.JavaCall("toString")&).syntaxHighlight)



Attributes(Constructors):= Attributes(Methods):= Attributes(Fields):= Attributes(JavaClass):= {Protected, ReadProtected}

End()

EndPackage()
