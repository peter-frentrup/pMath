BeginPackage("Documentation`", {"ExperimentalSyntax`"})

$DocumentationPath
FindSymbolDocumentation
FindSymbolDocumentationByFullName
FindSymbolDocumentationByNamespaceAndName

PrepareUsageSection


Begin("Documentation`Private`")


$DocumentationPath:= {ToFileName(DirectoryName($Input), "Files")}

Attributes(FindSymbolDocumentation):= {HoldAllComplete}
FindSymbolDocumentation(~s:Symbol)::=
    FindSymbolDocumentationByNamespaceAndName(Namespace(s), SymbolName(s))

Function FindSymbolDocumentationByFullName(~fullname:String) {
    With(components:= StringSplit(fullname, "`"))
    If(components === {}) {
        None
    } Else If(Length(components) === 1) {
        FindSymbolDocumentationByNamespaceAndName("System`", Last(components))
    } Else {
        FindSymbolDocumentationByNamespaceAndName(ToString@Row(Most(components), "`"), Last(components))
    }
}

Function FindSymbolDocumentationByNamespaceAndName(~namespace:String, ~name:String) {
    % TODO: check that name is actually a valid symbol and does not contain invalid characters
    With(dirs:= $DocumentationPath.Map(Function(ToFileName@Prepend(namespace.StringSplit("`"), #))))
    With(files:= dirs.FileNames(name ++ ".pmathdoc"))
    If(files === {}) {
        None
    } Else {
        First(files)
    }
}


PrepareUsageSection(~text)::= ToString(text)
Function PrepareUsageSection(~text:String) {
    Local(nesting:=0)
    With(reflown:= text.StringReplace(
            tok:("\n" | "(" | ")" | "{" | "}" | " ") :> 
            Switch(tok) {
                Case("\n") { nesting:=0; tok }
                Case("(" | "{") { ++nesting; tok }
                Case(")" | "}") { --nesting; tok }
                Case(~) { If(nesting===0) { nesting:=Infinity; "\n\t" } Else { tok } }
            }
        ))
    reflown.StringReplace({
        s: ("\(" ++ Shortest(~~~) ++ "\)") :> s,
        s: ("." ++ " "** ++ "A".."Z") :> s,
        (WordBoundary ++ s: (("A".."Z"|"$") ++ (LetterCharacter|DigitCharacter)**) ++ WordBoundary
        ) :> "\(" ++ ToString@InputForm@TemplateBox({s}, "ReferenceHyperlink") ++ "\)"})
}


End()

EndPackage()
