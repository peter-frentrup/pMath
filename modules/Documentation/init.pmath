BeginPackage("Documentation`")

$DocumentationPath
CreateHelpDocument
FindDocumentationPages
FindSymbolDocumentation
FindSymbolDocumentationByFullName
FindSymbolDocumentationByNamespaceAndName
OpenDocumentationForSelection
InteractiveCreateHelpDocument

PrepareUsageSection


Begin("Documentation`Private`")


$DocumentationPath:= {ToFileName(DirectoryName($Input), "Files")}


Function FindDocumentationPages(~part:String) {
    Flatten@{
        $DocumentationPath.FileNames("System"
            ).FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
            ).Map(Function(FileNameSplit(#).Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True) -> #)),
        $DocumentationPath.FileNames(~~~s /? s =!= "System").Map(
            Function({
                #.FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
                    ).Map(Function(
                        With({path:= FileNameSplit(#)},
                            path[-2] ++ path.Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True)
                        ) -> #)),
                #.FileNames("*").FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
                    ).Map(Function(
                        With({path:= FileNameSplit(#)},
                            path[-3] ++ path[-2] ++ path.Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True)
                        ) -> #))
            })
        )
    }
}


Attributes(FindSymbolDocumentation):= {HoldAllComplete}
FindSymbolDocumentation(~s:Symbol)::=
    FindSymbolDocumentationByNamespaceAndName(Namespace(s), SymbolName(s))

Function FindSymbolDocumentationByFullName(~fullname:String) {
    With(components:= StringSplit(fullname, "`"))
    If(components === {}) {
        None
    } Else If(Length(components) === 1) {
        FindSymbolDocumentationByNamespaceAndName("System`", Last(components))
    } Else {
        FindSymbolDocumentationByNamespaceAndName(ToString@Row(Most(components), "`"), Last(components))
    }
}

Function FindSymbolDocumentationByNamespaceAndName(~namespace:String, ~name:String) {
    % TODO: check that name is actually a valid symbol and does not contain invalid characters
    With(dirs:= $DocumentationPath.Map(Function(ToFileName@Prepend(namespace.StringSplit("`"), #))))
    With(files:= dirs.FileNames(name ++ ".pmathdoc", IgnoreCase -> True))
    If(files === {}) {
        None
    } Else {
        First(files)
    }
}

%OpenDocumentationForSelection(~boxes)::= OpenDocumentationForSelection(boxes, Developer`GetDebugMetadata(boxes))

tokenHelp(~s)::= s
tokenHelp("|")::=                           "System`Alternatives"
tokenHelp("&&")::=                          "System`And"
tokenHelp("@@")::=                          "System`Apply"
tokenHelp("//=")::=                         "System`AssignWith"
tokenHelp(":=")::=                          "System`Assign"
tokenHelp("\[Assign]")::=                   "System`Assign"
tokenHelp("::=")::=                         "System`AssignDelayed"
tokenHelp("\[AssignDelayed]")::=            "System`AssignDelayed"
tokenHelp("\[CirclePlus]")::=               "System`CirclePlus"
tokenHelp("\[CircleTimes]")::=              "System`CircleTimes"
tokenHelp("\[Colon]")::=                    "System`Colon"
tokenHelp("/?")::=                          "System`Condition"
tokenHelp("\[Congruent]")::=                "System`Congruent"
tokenHelp("\[Cross]")::=                    "System`Cross"
tokenHelp("\[CubeRoot]")::=                 "System`CubeRoot"
tokenHelp("\[CupCap]")::=                   "System`CupCap"
tokenHelp("-=")::=                          "System`Decrement"
tokenHelp("\[Degree]")::=                   "System`Degree"
tokenHelp("'")::=                           "System`Derivative"
tokenHelp("''")::=                          "System`Derivative"
tokenHelp("'''")::=                         "System`Derivative"
tokenHelp("''''")::=                        "System`Derivative"
tokenHelp("\[Prime]")::=                    "System`Derivative"
tokenHelp("\[DoublePrime]")::=              "System`Derivative"
tokenHelp("\[TriplePrime]")::=              "System`Derivative"
tokenHelp("/=")::=                          "System`DivideBy"
tokenHelp("\[Dot]")::=                      "System`Dot"
tokenHelp("\[DotEqual]")::=                 "System`DotEqual"
tokenHelp("\[DoubleDownArrow]")::=          "System`DoubleDownArrow"
tokenHelp("\[DoubleLeftArrow]")::=          "System`DoubleLeftArrow"
tokenHelp("\[DoubleLowerLeftArrow]")::=     "System`DoubleLowerLeftArrow"
tokenHelp("\[DoubleLowerRightArrow]")::=    "System`DoubleLowerRightArrow"
tokenHelp("\[DoubleRightArrow]")::=         "System`DoubleRightArrow"
tokenHelp("\[DoubleUpArrow]")::=            "System`DoubleUpArrow"
tokenHelp("\[DoubleUpDownArrow]")::=        "System`DoubleUpDownArrow"
tokenHelp("\[DoubleUpperLeftArrow]")::=     "System`DoubleUpperLeftArrow"
tokenHelp("\[DoubleUpperRightArrow]")::=    "System`DoubleUpperRightArrow"
tokenHelp("\[DownArrow]")::=                "System`DownArrow"
tokenHelp("\[Element]")::=                  "System`Element"
tokenHelp("=")::=                           "System`Equal"
tokenHelp(";")::=                           "System`EvaluationSequence"
tokenHelp("\[ExponentialE]")::=             "System`ExponentialE"
%tokenHelp("!")::=                           "System`Factorial" % or "System`Not"
tokenHelp("!!")::=                          "System`Factorial2"
tokenHelp("&")::=                           "System`Function"
tokenHelp("|->")::=                         "System`Function"
tokenHelp("\[Function]")::=                 "System`Function"
tokenHelp("<<")::=                          "System`Get"
tokenHelp(">")::=                           "System`Greater"
tokenHelp(">=")::=                          "System`GreaterEqual"
tokenHelp("\[GreaterEqual]")::=             "System`GreaterEqual"
tokenHelp("\[GreaterEqualLess]")::=         "System`GreaterEqualLess"
tokenHelp("\[GreaterFullEqual]")::=         "System`GreaterFullEqual"
tokenHelp("\[GreaterGreater]")::=           "System`GreaterGreater"
tokenHelp("\[GreaterLess]")::=              "System`GreaterLess"
tokenHelp("\[GreaterTilde]")::=             "System`GreaterTilde"
tokenHelp("\[HumpDownHump]")::=             "System`HumpDownHump"
tokenHelp("\[HumpEqual]")::=                "System`HumpEqual"
tokenHelp("\[ImaginaryI]")::=               "System`ImaginaryI"
tokenHelp("\[ImaginaryJ]")::=               "System`ImaginaryI"
tokenHelp("+=")::=                          "System`Increment"
tokenHelp("\[Infinity]")::=                 "System`Infinity"
tokenHelp("===")::=                         "System`Identical"
tokenHelp("\[AliasDelimiter]")::=           "System`InputAliases"
tokenHelp("\[Intersection]")::=             "System`Intersection"
tokenHelp("<")::=                           "System`Less"
tokenHelp("<=")::=                          "System`LessEqual"
tokenHelp("\[LeftArrow]")::=                "System`LeftArrow"
tokenHelp("\[LeftRightArrow]")::=           "System`LeftRightArrow"
tokenHelp("\[LeftTriangle]")::=             "System`LeftTriangle"
tokenHelp("\[LeftTriangleEqual]")::=        "System`LeftTriangleEqual"
tokenHelp("\[LowerLeftArrow]")::=           "System`LowerLeftArrow"
tokenHelp("\[LowerRightArrow]")::=          "System`LowerRightArrow"
tokenHelp("\[LessEqual]")::=                "System`LessEqual"
tokenHelp("\[LessEqualGreater]")::=         "System`LessEqualGreater"
tokenHelp("\[LessFullEqual]")::=            "System`LessFullEqual"
tokenHelp("\[LessGreater]")::=              "System`LessGreater"
tokenHelp("\[LessLess]")::=                 "System`LessLess"
tokenHelp("\[LessTilde]")::=                "System`LessTilde"
tokenHelp("{")::=                           "System`List"
tokenHelp("}")::=                           "System`List"
tokenHelp("::")::=                          "System`MessageName"
tokenHelp("\[MinusPlus]")::=                "System`MinusPlus"
tokenHelp("\[Not]")::=                      "System`Not"
tokenHelp("\[NotCongruent]")::=             "System`NotCongruent"
tokenHelp("\[NotCupCap]")::=                "System`NotCupCap"
tokenHelp("\[NotElement]")::=               "System`NotElement"
tokenHelp("\[NotGreater]")::=               "System`NotGreater"
tokenHelp("\[NotGreaterEqual]")::=          "System`NotGreaterEqual"
tokenHelp("\[NotGreaterLess]")::=           "System`NotGreaterLess"
tokenHelp("\[NotGreaterTilde]")::=          "System`NotGreaterTilde"
tokenHelp("\[NotLeftTriangle]")::=          "System`NotLeftTriangle"
tokenHelp("\[NotLeftTriangleEqual]")::=     "System`NotLeftTriangleEqual"
tokenHelp("\[NotLess]")::=                  "System`NotLess"
tokenHelp("\[NotLessEqual]")::=             "System`NotLessEqual"
tokenHelp("\[NotLessGreater]")::=           "System`NotLessGreater"
tokenHelp("\[NotLessTilde]")::=             "System`NotLessTilde"
tokenHelp("\[NotPrecedes]")::=              "System`NotPrecedes"
tokenHelp("\[NotPrecedesEqual]")::=         "System`NotPrecedesEqual"
tokenHelp("\[NotReverseElement]")::=        "System`NotReverseElement"
tokenHelp("\[NotRightTriangle]")::=         "System`NotRightTriangle"
tokenHelp("\[NotRightTriangleEqual]")::=    "System`NotRightTriangleEqual"
tokenHelp("\[NotSubset]")::=                "System`NotSubset"
tokenHelp("\[NotSubsetEqual]")::=           "System`NotSubsetEqual"
tokenHelp("\[NotSucceeds]")::=              "System`NotSucceeds"
tokenHelp("\[NotSucceedsEqual]")::=         "System`NotSucceedsEqual"
tokenHelp("\[NotSuperset]")::=              "System`NotSuperset"
tokenHelp("\[NotSupersetEqual]")::=         "System`NotSupersetEqual"
tokenHelp("\[NotTildeEqual]")::=            "System`NotTildeEqual"
tokenHelp("\[NotTildeFullEqual]")::=        "System`NotTildeFullEqual"
tokenHelp("\[NotTildeTilde]")::=            "System`NotTildeTilde"
tokenHelp("||")::=                          "System`Or"
tokenHelp("[")::=                           "System`Part"
tokenHelp("]")::=                           "System`Part"
tokenHelp(":")::=                           "System`Pattern"
tokenHelp("\[Pi]")::=                       "System`Pi"
tokenHelp("\[Piecewise]")::=                "System`Piecewise"
tokenHelp("\[Placeholder]")::=              "System`Placeholder"
tokenHelp("+")::=                           "System`Plus"
tokenHelp("-")::=                           "System`Plus"
tokenHelp("\[PlusMinus]")::=                "System`PlusMinus"
tokenHelp("^")::=                           "System`Power"
tokenHelp("\[U+221C]")::=                   "System`Power" % fourth root
tokenHelp("\[Precedes]")::=                 "System`Precedes"
tokenHelp("\[PrecedesEqual]")::=            "System`PrecedesEqual"
tokenHelp("\[Product]")::=                  "System`Product"
tokenHelp("#")::=                           "System`PureArgument"
tokenHelp("##")::=                          "System`PureArgument"
tokenHelp("..")::=                          "System`Range"
tokenHelp("**")::=                          "System`Repeated"
tokenHelp("***")::=                         "System`Repeated"
tokenHelp("~~")::=                          "System`Repeated"
tokenHelp("~~~")::=                         "System`Repeated"
tokenHelp("\[ReverseElement]")::=           "System`ReverseElement"
tokenHelp("\[RightTriangle]")::=            "System`RightTriangle"
tokenHelp("\[RightTriangleEqual]")::=       "System`RightTriangleEqual"
tokenHelp("->")::=                          "System`Rule"
tokenHelp("\[Rule]")::=                     "System`Rule"
tokenHelp(":>")::=                          "System`RuleDelayed"
tokenHelp("\[RuleDelayed]")::=              "System`RuleDelayed"
tokenHelp("??")::=                          "System`ShowDefinition"
tokenHelp("~")::=                           "System`SingleMatch"
tokenHelp("\[SpanFromAbove]")::=            "System`SpanFromAbove"
tokenHelp("\[SpanFromBoth]")::=             "System`SpanFromBoth"
tokenHelp("\[SpanFromLeft]")::=             "System`SpanFromLeft"
tokenHelp("\[Sqrt]")::=                     "System`Sqrt"
tokenHelp("\[Subset]")::=                   "System`Subset"
tokenHelp("\[SubsetEqual]")::=              "System`SubsetEqual"
tokenHelp("\[Succeeds]")::=                 "System`Succeeds"
tokenHelp("\[SucceedsEqual]")::=            "System`SucceedsEqual"
tokenHelp("\[Sum]")::=                      "System`Sum"
tokenHelp("\[Superset]")::=                 "System`Superset"
tokenHelp("\[SupersetEqual]")::=            "System`SupersetEqual"
tokenHelp("/:")::=                          "System`TagAssign"
%tokenHelp("?")::=                           "System`TestPattern" % or Optional
tokenHelp("\[TildeEqual]")::=               "System`TildeEqual"
tokenHelp("\[TildeFullEqual]")::=           "System`TildeFullEqual"
tokenHelp("\[TildeTilde]")::=               "System`TildeTilde"
tokenHelp("*")::=                           "System`Times"
tokenHelp("\[Times]")::=                    "System`Times"
tokenHelp("/")::=                           "System`Times"
tokenHelp("\[Divide]")::=                   "System`Times"
tokenHelp("*=")::=                          "System`TimesBy"
tokenHelp("\[DownTee]")::=                  "System`Transpose"
tokenHelp("!=")::=                          "System`Unequal"
tokenHelp("\[NotEqual]")::=                 "System`Unequal"
tokenHelp("=!=")::=                         "System`Unidentical"
tokenHelp("\[Union]")::=                    "System`Union"
tokenHelp("\[UpArrow]")::=                  "System`UpArrow"
tokenHelp("\[UpDownArrow]")::=              "System`UpDownArrow"
tokenHelp("\[UpperLeftArrow]")::=           "System`UpperLeftArrow"
tokenHelp("\[UpperRightArrow]")::=          "System`UpperRightArrow"


Function OpenDocumentationForSelection(~tok:String, ~src) {
    %Print({name, src})
    With(name:= tokenHelp(tok))
    With(helpfile:= FindSymbolDocumentationByFullName(name))
    If(helpfile =!= None) {
        Return(FE`CallFrontEnd(FrontEnd`DocumentOpen(helpfile, False)))
    }

    With(exactNames:= Names(name))
    With(names:= If(Length(exactNames) > 0, exactNames, Names(name, IgnoreCase -> True)))
    
    If(Length(names) > 0) {
        With(usage:= First(names) |> 
                MakeExpression(ParseSymbols -> False) |>
                {HoldComplete(~sym:Symbol) :> sym::usage})
        If(IsString(usage)) {
            Return(FE`AttachBoxes(src, Top, {
                    Section(BoxData @ ToBoxes @ usage,
                        "PopupWindowSection", 
                        SectionMargins -> 4)
                },
                WindowFrame -> "ThinFrameCallout",
                RemovalConditions -> {"MouseClickOutsidePopup", "SelectionExit"}))
        }
    }

    Return($Failed)
}

OpenDocumentationForSelection(~, ~)::= $Failed
% Function OpenDocumentationForSelection(~tok, ~src) {
%     Return(FE`AttachBoxes(src, Top, 
%         Section(BoxData @ ToBoxes @ {tok, src}, 
%             "PopupWindowSection",
%             SectionMargins -> 4),
%         WindowFrame -> "ThinFrameCallout",
%         RemovalConditions -> {"MouseClickOutsidePopup", "SelectionExit"}))
% }

OpenDocumentationForSelection(SqrtBox(~,       SurdForm -> True), ~src)::= OpenDocumentationForSelection("System`Surd", src)
OpenDocumentationForSelection(RadicalBox(~, ~, SurdForm -> True), ~src)::= OpenDocumentationForSelection("System`Surd", src)
OpenDocumentationForSelection(SqrtBox(~~),    ~src)::= OpenDocumentationForSelection("System`Sqrt", src)
OpenDocumentationForSelection(RadicalBox(~~), ~src)::= OpenDocumentationForSelection("System`Power", src)
OpenDocumentationForSelection(FrameBox(~~), ~src)::= OpenDocumentationForSelection("System`Framed", src)
OpenDocumentationForSelection(FillBox(~~),  ~src)::= OpenDocumentationForSelection("System`Filler", src)


PrepareUsageSection(~text)::= ToString(text)
Function PrepareUsageSection(~text:String) {
    Local(nesting:=0)
    With(reflown:= text.StringReplace(
            tok:("\n" | "(" | ")" | "{" | "}" | "\(" | "\)" | " ") :> 
            Switch(tok) {
                Case("\n") { nesting:=0; tok }
                Case("(" | "{" | "\(") { ++nesting; tok }
                Case(")" | "}" | "\)") { --nesting; tok }
                Case(~) { If(nesting===0) { nesting:=Infinity; "\n\t" } Else { tok } }
            }
        ))
    reflown.StringReplace({
        s: ("\(" ++ Shortest(~~~) ++ "\)") :> s,
        s: ("." ++ " "** ++ "A".."Z") :> s,
        s: ("\"" ++ Except("\"")*** ++ "\"" ) :> s,
        (WordBoundary ++ s: (("A".."Z"|"$") ++ (LetterCharacter|DigitCharacter)**) ++ WordBoundary
        ) :> "\(" ++ ToString@InputForm@TemplateBox({s}, "ReferenceHyperlink") ++ "\)"})
}


$overloadPrepareUsageLine:= True
Attributes($overloadPrepareUsageLine):= {ThreadLocal}

Unprotect(System`Private`PrepareUsageLine)
Function System`Private`PrepareUsageLine(~sym:Symbol) Where($overloadPrepareUsageLine) {
    Block({$overloadPrepareUsageLine:= False}, Block {
        With(docfile:= FindSymbolDocumentation(sym))
        With(line:= System`Private`PrepareUsageLine(sym))

        If(docfile === None) {
            Return(line)
        }

        With(buttonbox:= TemplateBox({ToString@HoldForm(LongForm(InputForm(sym)))}, "ShowMoreDocumentationHyperlink"))
        If(line.IsString) {
            Return(line ++ " \(" ++ ToString(InputForm(buttonbox)) ++ "\)")
        }

        Return(Row({line, RawBoxes(buttonbox)}, " "))
    })
}
Protect(System`Private`PrepareUsageLine)


Function InteractiveCreateHelpDocument() {
    Local(popup, name:= "")
    popup:= FE`AttachBoxes(
        EvaluationBox(),
        Bottom,
        {
            Section(TextData({
                "Symbol name:   ",
                BoxData(InputFieldBox(
                    Dynamic(name),
                    String,
                    ContinuousAction->True))
                }),
                "PopupWindowSection",
                LineBreakWithin -> False,
                SectionMargins -> {{8, 8}, {8, 4}}),
            Section(
                BoxData({
                    DynamicBox(Block {
                        If(name === "") {
                            ""
                        } Else {
                            With(paths:= FileNames(
                                    ToFileName(Documentation`$DocumentationPath.Join({"System"})),
                                    name ++ ".pmathdoc"))
                            If(paths === {}) {
                                ButtonBox(
                                    ToBoxes @ StringForm("Create `1`.pmathdoc", name),
                                    ButtonFunction -> Function {
                                        DocumentClose(popup)
                                        CreateHelpDocument(name)
                                    },
                                    ButtonFrame -> "Defaulted"
                                )
                            } Else {
                                StringBox({
                                    "\"",
                                    TooltipBox(
                                        ButtonBox(
                                            name ++ ".pmathdoc",
                                            ButtonFunction :> Function {
                                                DocumentClose(popup)
                                                DocumentOpen(paths[1])
                                            },
                                            BaseStyle -> "Hyperlink"
                                        ),
                                        ToBoxes(paths[1])
                                    ),
                                    " already exists.\""
                                })
                            }
                        }
                    }),
                    FillBox(""),
                    ButtonBox("\"Cancel\"", ButtonFunction -> Function(DocumentClose(popup)))
                }),
                "PopupWindowSection",
                LineBreakWithin -> True,
                SectionMargins -> {{8, 8}, {0, 8}})
        },
        WindowFrame -> "ThinFrameCallout",
        DocumentEventActions -> {
            "ReturnKeyDown" -> Function { % TODO: FE`CallFrontEnd(FrontEnd`FindAndClickDefaultButton())
                If(name =!= "") {
                    DocumentClose(popup)
                    CreateHelpDocument(name)
                    Break()
                }
            },
            "EscapeKeyDown" -> Function(DocumentClose(popup))
        },
        RemovalConditions -> {"MouseClickOutsidePopup", "SelectionExit"}
    );
    SetSelectedDocument(popup);
}

CreateHelpDocument()::= CreateHelpDocument("XXX")
CreateHelpDocument("")::= CreateHelpDocument("XXX")
CreateHelpDocument(~sym:Symbol)::= CreateHelpDocument(SymbolName(sym))

Function CreateHelpDocument(~name:String) {
    Local(doc)
    With(attr:= Attributes(name))
    With(optionNames:= Options(name).Map({~(~opt:Symbol, ~) :> SymbolName(opt), ~ -> Nothing}).Sort)

    doc:= CreateDocument({
            Section(name, "ObjectName"),
            Section(BoxData(TemplateBox({name},"UsageReference")),"Usage"),
            SectionGroup({Section("Details", "NotesSection"),
                SectionGroup({
                    Section("", "NotesSectionHeaderSpacer"),
                    If(Position(attr, NumericFunction) === {},
                        Nothing,
                        Section("Mathematical function suitable for numeric and symbolic computations.", "Notes")
                    ),
                    genericAttributesNoteSection(name, Complement(attr, {Protected, ReadProtected, DefiniteFunction, NumericFunction, Listable})),
                    Section("XXX", "Notes"), 
                    If(Position(attr, Listable) === {},
                        Nothing,
                        Section(TextData({
                            TemplateBox({name}, "ReferenceHyperlink"), 
                            " automatically threads over lists."}), "Notes")
                    ),
                    Section("", "SectionFooterSpacer")
                }, All)
            }, All),
            SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
                simpleExampleHeadingWithText("Basic Examples", 2),
                simpleExampleHeadingWithText("Scope", 2),
                If(optionNames =!= {}) {
                    SectionGroup(Join({Section("Options", "ExampleSection")}, 
                        optionNames.Map(Function(simpleExampleHeadingWithText(#, 1, "ExampleSubsection")))
                    ), All)
                } Else {
                    Nothing
                },
                simpleExampleHeadingWithText("Applications"),
                simpleExampleHeadingWithText("Properties & Relations"),
                simpleExampleHeadingWithText("Possible Issues"),
                simpleExampleHeadingWithText("Neat Examples"),
                Section("", "SectionFooterSpacer")
            }, All),
            SectionGroup({Section("See Also", "SeeAlsoSection"),
                Section({
                    TemplateBox({"XXX"}, "ReferenceHyperlink"),
                    "\[NonBreakingSpace]\[Dot] ",
                    TemplateBox({"XXX"}, "ReferenceHyperlink"),
                    "\[NonBreakingSpace]\[Dot] ",
                    TemplateBox({"XXX"}, "ReferenceHyperlink")
                }, "SeeAlso")
            }, All)
        },
        StyleDefinitions -> "Reference.pmathdoc")
    
    CurrentValue(doc, "DocumentFullFileName"):= ToFileName($DocumentationPath.Append("System"), name ++ ".pmathdoc")

    doc
}

genericAttributesNoteSection(~, ~)::= Nothing
Function genericAttributesNoteSection(~name, {~attr}) {
    Section(TextData({
        TemplateBox({name},"ReferenceHyperlink"), 
        " has attribute ",
        TemplateBox({ToString(attr)},"ReferenceHyperlink"),
        "."
    }), "Notes")
}
Function genericAttributesNoteSection(~name, {~~mostAttrs, ~lastAttr}) {
    Section(TextData({
        TemplateBox({name}, "ReferenceHyperlink"), 
        " has attributes ",
        Sequence @@ {mostAttrs}.Map(Function(TemplateBox({ToString(#)}, "ReferenceHyperlink"))).Riffle(", "),
        " and ",
        TemplateBox({ToString(lastAttr)}, "ReferenceHyperlink"),
        "."
    }), "Notes")
}

Function simpleExampleHeadingWithText(~heading, ?count:1, ?headingStyle:"ExampleSection") {
    SectionGroup(Join({
            Section(heading, headingStyle), 
            Section("XXX", "ExampleText")
        },
            SectionGroup({
                Section(BoxData(InterpretationBox("", $Line:= 0;)), "ExampleDelimiter"),
                Section("XXX", "ExampleText")
            }, All).ConstantArray(count - 1) 
        ), All)
}

End()

EndPackage()
