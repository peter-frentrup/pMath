BeginPackage("Documentation`")

$DocumentationPath
FindDocumentationPages
FindSymbolDocumentation
FindSymbolDocumentationByFullName
FindSymbolDocumentationByNamespaceAndName

PrepareUsageSection


Begin("Documentation`Private`")


$DocumentationPath:= {ToFileName(DirectoryName($Input), "Files")}


Function FindDocumentationPages(~part:String) {
    Flatten@{
        $DocumentationPath.FileNames("System"
            ).FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
            ).Map(Function(FileNameSplit(#).Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True) -> #)),
        $DocumentationPath.FileNames(~~~s /? s =!= "System").Map(
            Function({
                #.FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
                    ).Map(Function(
                        With({path:= FileNameSplit(#)},
                            path[-2] ++ path.Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True)
                        ) -> #)),
                #.FileNames("*").FileNames(~~~ ++ part ++ ~~~ ++ ".pmathdoc", IgnoreCase->True
                    ).Map(Function(
                        With({path:= FileNameSplit(#)},
                            path[-3] ++ path[-2] ++ path.Last.StringReplace(".pmathdoc" ++ EndOfString -> "", IgnoreCase -> True)
                        ) -> #))
            })
        )
    }
}


Attributes(FindSymbolDocumentation):= {HoldAllComplete}
FindSymbolDocumentation(~s:Symbol)::=
    FindSymbolDocumentationByNamespaceAndName(Namespace(s), SymbolName(s))

Function FindSymbolDocumentationByFullName(~fullname:String) {
    With(components:= StringSplit(fullname, "`"))
    If(components === {}) {
        None
    } Else If(Length(components) === 1) {
        FindSymbolDocumentationByNamespaceAndName("System`", Last(components))
    } Else {
        FindSymbolDocumentationByNamespaceAndName(ToString@Row(Most(components), "`"), Last(components))
    }
}

Function FindSymbolDocumentationByNamespaceAndName(~namespace:String, ~name:String) {
    % TODO: check that name is actually a valid symbol and does not contain invalid characters
    With(dirs:= $DocumentationPath.Map(Function(ToFileName@Prepend(namespace.StringSplit("`"), #))))
    With(files:= dirs.FileNames(name ++ ".pmathdoc", IgnoreCase -> True))
    If(files === {}) {
        None
    } Else {
        First(files)
    }
}


PrepareUsageSection(~text)::= ToString(text)
Function PrepareUsageSection(~text:String) {
    Local(nesting:=0)
    With(reflown:= text.StringReplace(
            tok:("\n" | "(" | ")" | "{" | "}" | " ") :> 
            Switch(tok) {
                Case("\n") { nesting:=0; tok }
                Case("(" | "{") { ++nesting; tok }
                Case(")" | "}") { --nesting; tok }
                Case(~) { If(nesting===0) { nesting:=Infinity; "\n\t" } Else { tok } }
            }
        ))
    reflown.StringReplace({
        s: ("\(" ++ Shortest(~~~) ++ "\)") :> s,
        s: ("." ++ " "** ++ "A".."Z") :> s,
        s: ("\"" ++ Except("\"")*** ++ "\"" ) :> s,
        (WordBoundary ++ s: (("A".."Z"|"$") ++ (LetterCharacter|DigitCharacter)**) ++ WordBoundary
        ) :> "\(" ++ ToString@InputForm@TemplateBox({s}, "ReferenceHyperlink") ++ "\)"})
}


$overloadPrepareUsageLine:= True
Attributes($overloadPrepareUsageLine):= {ThreadLocal}

Unprotect(System`Private`PrepareUsageLine)
Function System`Private`PrepareUsageLine(~sym:Symbol) Where($overloadPrepareUsageLine) {
    Block({$overloadPrepareUsageLine:= False}, Block {
        With(docfile:= FindSymbolDocumentation(sym))
        With(line:= System`Private`PrepareUsageLine(sym))

        If(docfile === None) {
            Return(line)
        }

        With(buttonbox:= TemplateBox({ToString@HoldForm(LongForm(InputForm(sym)))}, "ShowMoreDocumentationHyperlink"))
        If(line.IsString) {
            Return(line ++ " \(" ++ ToString(InputForm(buttonbox)) ++ "\)")
        }

        Return(Row({line, RawBoxes(buttonbox)}, " "))
    })
}
Protect(System`Private`PrepareUsageLine)

End()

EndPackage()
