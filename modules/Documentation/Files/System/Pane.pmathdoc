/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("Pane", "ObjectName"), 
      Section(BoxData(TemplateBox({"Pane"}, "UsageReference")), "Usage")}, 
     All), SectionGroup({Section("Details", "NotesSection"), 
      SectionGroup({Section("", "NotesSectionHeaderSpacer"), 
        Section(TextData({TemplateBox({"Pane"}, "ReferenceHyperlink"), 
           " by default displays ", StyleBox("expr", "Arg"), 
           " in \"Pane\" style."}), "Notes"), 
        Section(TextData({"With a typical default stylesheet, ", 
           TemplateBox({"Pane"}, "ReferenceHyperlink"), "(", 
           StyleBox("expr", "Arg"), 
           ") without options displays exactly like ", 
           StyleBox("expr", "Arg"), "."}), "Notes"), 
        Section(TextData({TemplateBox({"Pane"}, "ReferenceHyperlink"), 
           " has options ", TemplateBox({"Alignment"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"BaselinePosition"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"BaseStyle"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"ImageSize"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"ImageSizeAction"}, "ReferenceHyperlink"), ", and ", 
           TemplateBox({"LineBreakWithin"}, "ReferenceHyperlink"), "."}), 
         "Notes")}, All), Section("", "SectionFooterSpacer")}, 1), 
    SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
      SectionGroup({Section("Basic Examples", "ExampleSection"), 
        Section("Restrict output to a given width:", "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Pane", "(", {{"50", "!"}, ",", "100"}, ")"}), 
           "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData(
            PaneBox(
             "3041409320171337804361260816606476884437764156896051200000000000\
             0", ImageSize -> {100, Automatic})), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
        SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section("Also set the height, shrinking content if necessary:", 
           "ExampleText"), SectionGroup({
            Section(
             BoxData({"Pane", "(", {{"50", "!"}, ",", {
                 "{", {"100", ",", "50"}, "}"}}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(
             BoxData(
              PaneBox(
               "30414093201713378043612608166064768844377641568960512000000000\
               000", ImageSize -> {100, 50})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All)}, All), SectionGroup({Section("Options", "ExampleSection"), 
        SectionGroup({Section("Alignment", "ExampleSubsection"), 
          Section(TextData({"The default setting is ", 
             TemplateBox({"Alignment"}, "ReferenceHyperlink"), " \[Rule] {", 
             TemplateBox({"Left"}, "ReferenceHyperlink"), ", ", 
             TemplateBox({"Top"}, "ReferenceHyperlink"), "}:"}), 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Framed", "(", {
                "Pane", "(", {StringBox("\"Content\""), ",", {
                  "{", {"100", ",", "50"}, "}"}}, ")"}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData(FrameBox(PaneBox(StringBox("\"Content\""), 
                ImageSize -> {100, 50}))), "Output", SectionGenerated -> True, 
             SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Center-align the contents:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"Framed", "(", {
                  "Pane", "(", {StringBox("\"Content\""), ",", {
                    "{", {"100", ",", "50"}, "}"}, ",", {
                    "Alignment", "\[Rule]", "Center"}}, ")"}, ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(FrameBox(PaneBox(StringBox("\"Content\""), 
                  Alignment -> Center, ImageSize -> {100, 50}))), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({
          Section("BaselinePosition", "ExampleSubsection"), 
          Section("Vertically align panes:", "ExampleText"), 
          SectionGroup({
            Section(
             BoxData({"Row", "(", {
                {"Table", "(", {
                  {"Pane", "(", {{"15", "!"}, ",", "30", ",", {
                     "BaselinePosition", "\[Rule]", "p"}}, ")"}, ",", {
                   "p", "\[Rule]", {"{", {"Automatic", ",", "Top", ",", 
                     "Center", ",", "Baseline", ",", "Bottom"}, "}"}}}, ")"}, 
                ",", StringBox("\"x\"")}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(
             BoxData(TemplateBox({
                "x", "x", PaneBox("1307674368000", ImageSize -> 30, 
                 BaselinePosition -> Automatic), 
                PaneBox("1307674368000", ImageSize -> 30, 
                 BaselinePosition -> Top), PaneBox("1307674368000", 
                 ImageSize -> 30, BaselinePosition -> Center), 
                PaneBox("1307674368000", ImageSize -> 30, 
                 BaselinePosition -> Baseline), 
                PaneBox("1307674368000", ImageSize -> 30, 
                 BaselinePosition -> Bottom)}, "RowWithSeparators")), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
           All)}, 1), SectionGroup({
          Section("ImageSizeAction", "ExampleSubsection"), 
          Section("Accomodate for oversized content:", "ExampleText"), 
          SectionGroup({
            Section(
             BoxData({"Grid", "@", {
                "Table", "(", {
                 {"{", {"a", ",", {"Framed", "(", {
                     "Pane", "(", {{"50", "!"}, ",", {
                       "{", {"50", ",", "50"}, "}"}, ",", {
                       "ImageSizeAction", "\[Rule]", "a"}}, ")"}, ")"}, ",", {
                    "Framed", "(", {"Pane", "(", {
                      "123", ",", {"{", {"50", ",", "50"}, "}"}, ",", {
                       "ImageSizeAction", "\[Rule]", "a"}}, ")"}, ")"}}, "}"}, 
                 ",", {"a", "\[Rule]", {
                   "{", {StringBox("\"Clip\""), ",", 
                    StringBox("\"ShrinkToFit\""), ",", 
                    StringBox("\"ResizeToFit\"")}, "}"}}}, ")"}}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(
             BoxData(
              TagBox(
               GridBox({{StringBox("\"Clip\""), 
                  FrameBox(
                   PaneBox(
                    "304140932017133780436126081660647688443776415689605120000\
                    00000000", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "Clip")), 
                  FrameBox(PaneBox("123", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "Clip"))}, {
                  StringBox("\"ShrinkToFit\""), 
                  FrameBox(
                   PaneBox(
                    "304140932017133780436126081660647688443776415689605120000\
                    00000000", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "ShrinkToFit")), 
                  FrameBox(PaneBox("123", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "ShrinkToFit"))}, {
                  StringBox("\"ResizeToFit\""), 
                  FrameBox(
                   PaneBox(
                    "304140932017133780436126081660647688443776415689605120000\
                    00000000", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "ResizeToFit")), 
                  FrameBox(PaneBox("123", ImageSize -> {50, 50}, 
                    ImageSizeAction -> "ResizeToFit"))}}), "Grid")), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         1), SectionGroup({Section("LineBreakWithin", "ExampleSubsection"), 
          Section("By default, content is broken into multiple lines:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Framed", "(", {
                "Pane", "(", {{"Array", "(", "10", ")"}, ",", "100"}, ")"}, 
               ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(
              FrameBox(
               PaneBox({"{", {"1", ",", "2", ",", "3", ",", "4", ",", "5", 
                  ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}, "}"}, 
                ImageSize -> {100, Automatic}))), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          Section("Suppess line breaks and shrink contents instead:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Framed", "(", {
                "Pane", "(", {{"Array", "(", "10", ")"}, ",", "100", ",", {
                  "LineBreakWithin", "\[Rule]", "False"}}, ")"}, ")"}), 
             "Input", SectionLabel -> "in [2]:"), 
            Section(
             BoxData(
              FrameBox(
               PaneBox({"{", {"1", ",", "2", ",", "3", ",", "4", ",", "5", 
                  ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}, "}"}, 
                ImageSize -> {100, Automatic}, LineBreakWithin -> False))), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [2]:")}, 
           All)}, 1)}, 1), SectionGroup({
        Section("Properties & Relations", "ExampleSection"), 
        Section(TextData({"Use ", TemplateBox({"Pane"}, "ReferenceHyperlink"), 
           " to inhibit automatic stretching of controls inside ", 
           TemplateBox({"Filler"}, "ReferenceHyperlink"), " or ", 
           TemplateBox({"Grid"}, "ReferenceHyperlink"), ":"}), "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Filler", "(", {
              "Pane", "(", {"Button", "(", StringBox("\"Click\""), ")"}, ")"}, 
             ")"}), "Input", SectionLabel -> "in [1]:"), 
          Section(BoxData(FillBox(PaneBox(ButtonBox(StringBox("\"Click\""))), 
             StripOnInput -> False)), "Output", SectionGenerated -> True, 
           SectionLabel -> "out [1]:")}, All), 
        Section(
         TextData({"Without ", TemplateBox({"Pane"}, "ReferenceHyperlink"), 
           ", certain constructs like ", TemplateBox({"Button"}, 
            "ReferenceHyperlink"), " or ", TemplateBox({"Slider"}, 
            "ReferenceHyperlink"), " are automatically enlarged by ", 
           TemplateBox({"Filler"}, "ReferenceHyperlink"), " or inside ", 
           TemplateBox({"Grid"}, "ReferenceHyperlink"), " tables:"}), 
         "ExampleText"), SectionGroup({
          Section(BoxData({"Filler", "(", {
              "Button", "(", StringBox("\"Click\""), ")"}, ")"}), "Input", 
           SectionLabel -> "in [2]:"), 
          Section(BoxData(FillBox(ButtonBox(StringBox("\"Click\"")), 
             StripOnInput -> False)), "Output", SectionGenerated -> True, 
           SectionLabel -> "out [2]:")}, All), 
        SectionGroup({
          Section(
           BoxData({"Grid", "(", {
              "{", {{"{", {{"Button", "(", StringBox("\"long\""), ")"}, ",", {
                  "Pane", "(", {"Button", "(", StringBox("\"short\""), ")"}, 
                  ")"}}, "}"}, ",", {
                "{", {{"10", "^", "9"}, ",", {"10", "^", "9"}}, "}"}}, "}"}, 
             ")"}), "Input", SectionLabel -> "in [3]:"), 
          Section(
           BoxData(
            TagBox(
             GridBox({{ButtonBox(StringBox("\"long\"")), 
                PaneBox(ButtonBox(StringBox("\"short\"")))}, {
                "1000000000", "1000000000"}}), "Grid")), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [3]:")}, All)}, 1), 
      Section("", "SectionFooterSpacer")}, All), 
    SectionGroup({Section("See Also", "SeeAlsoSection"), 
      Section(TextData({TemplateBox({"Panel"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"ImageSizeAction"}, 
          "ReferenceHyperlink"), "\[NonBreakingSpace]\[Dot] ", 
         TemplateBox({"LineBreakWithin"}, "ReferenceHyperlink")}), 
       "SeeAlso")}, All)}, All)}, StyleDefinitions -> "Reference.pmathdoc", 
 Visible -> True)