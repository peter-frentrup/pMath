/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("Button", "ObjectName"), 
      Section(BoxData(TemplateBox({"Button"}, "UsageReference")), "Usage")}, 
     All), SectionGroup({Section("Details", "NotesSection"), 
      SectionGroup({Section("", "NotesSectionHeaderSpacer"), 
        Section(TextData({TemplateBox({"Button"}, "ReferenceHyperlink"), 
           " has attribute ", TemplateBox({"HoldRest"}, "ReferenceHyperlink"), 
           " to prevent premature evaluation of ", StyleBox("action", "Arg"), 
           ", but it evaluates all remaining arguments immediately (as \
           options)."}), "Notes"), 
        Section(TextData({"With the default setting ", 
           TemplateBox({"Method"}, "ReferenceHyperlink"), 
           " \[Rule] \"Preemptive\", clicking the button will preempt any \
           running evaluation to execute ", StyleBox("action", "TI"), 
           " and wait for the result. After a time-out, ", 
           StyleBox("action", "Arg"), " is aborted."}), "Notes"), 
        Section(
         TextData({"Use ", TemplateBox({"Method"}, "ReferenceHyperlink"), 
           " \[Rule] \"Queued\" to facilitate longer-running actions without \
           freezing the front-end. "}), "Notes"), 
        Section(TextData({TemplateBox({"Button"}, "ReferenceHyperlink"), 
           " has options ", TemplateBox({"Alignment"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"BaselinePosition"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"BaseStyle"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"ButtonFrame"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"ContentPadding"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"Enabled"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"ImageSize"}, "ReferenceHyperlink"), ", and ", 
           TemplateBox({"Method"}, "ReferenceHyperlink"), "."}), "Notes"), 
        Section(TextData({TemplateBox({"Button"}, "ReferenceHyperlink"), 
           " by default applies the current stylesheet\[Prime]s \"Button\" \
           style."}), "Notes")}, All), Section("", "SectionFooterSpacer")}, 
     1), SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
      SectionGroup({Section("Basic Examples", "ExampleSection"), 
        Section("A simple button:", "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Button", "(", {StringBox("\"Click me!\""), ",", {
               "Print", "(", StringBox("\"Thank you.\""), ")"}}, ")"}), 
           "Input", SectionLabel -> "in [1]:"), 
          Section(BoxData(ButtonBox(StringBox("\"Click me!\""), 
             ButtonFunction -> Function(Print("Thank you.")))), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
        SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section("Preempt a long-running task:", "ExampleText"), 
          SectionGroup({
            Section(
             BoxData(
              /\/({
                {"Print", "(", {"Button", "(", {
                   StringBox("\"Stop\""), ",", {"Abort", "(", ")"}}, ")"}, 
                 ")"}, ";"}, "\n", {
                "Do", "(", {{{"Pause", "(", "1", ")"}, ";", {
                   "Print", "(", "i", ")"}}, ",", {"i", "\[Rule]", "10"}}, 
                ")"})), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(TemplateBox({
                ButtonBox(StringBox("\"Stop\""), 
                 ButtonFunction -> Function(Abort()))}, "RowDefault")), 
             "Print", SectionGenerated -> True), 
            Section(BoxData(TemplateBox({"1"}, "RowDefault")), "Print", 
             SectionGenerated -> True), 
            Section(BoxData(TemplateBox({"2"}, "RowDefault")), "Print", 
             SectionGenerated -> True), Section(BoxData("$Aborted"), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All)}, All), SectionGroup({Section("Options", "ExampleSection"), 
        SectionGroup({Section("Alignment", "ExampleSubsection"), 
          Section(TextData({"The default setting is ", 
             TemplateBox({"Alignment"}, "ReferenceHyperlink"), " \[Rule] ", 
             TemplateBox({"Center"}, "ReferenceHyperlink"), ":"}), 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Button", "(", {
                "123", ",", {"ImageSize", "\[Rule]", "Medium"}}, ")"}), 
             "Input", SectionLabel -> "in [1]:"), 
            Section(BoxData(ButtonBox("123", 
               ImageSize -> {Medium, Automatic})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Left-align the contents:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"Button", "(", {
                  "123", ",", {"ImageSize", "\[Rule]", "Medium"}, ",", {
                   "Alignment", "\[Rule]", "Left"}}, ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(ButtonBox("123", Alignment -> Left, 
                 ImageSize -> {Medium, Automatic})), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({
          Section("BaselinePosition", "ExampleSubsection"), 
          Section("Vertically align buttons:", "ExampleText"), 
          SectionGroup({
            Section(
             BoxData({"Row", "(", {
                {"Table", "(", {
                  {"Button", "(", {"p", ",", "None", ",", {
                     "BaselinePosition", "\[Rule]", "p"}}, ")"}, ",", {
                   "p", "\[Rule]", {"{", {"Automatic", ",", "Top", ",", 
                     "Center", ",", "Baseline", ",", "Bottom"}, "}"}}}, ")"}, 
                ",", StringBox("\"x\"")}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(
             BoxData(TemplateBox({
                "x", "x", ButtonBox("Automatic", 
                 BaselinePosition -> Automatic), 
                ButtonBox("Top", BaselinePosition -> Top), 
                ButtonBox("Center", BaselinePosition -> Center), 
                ButtonBox("Baseline", BaselinePosition -> Baseline), 
                ButtonBox("Bottom", BaselinePosition -> Bottom)}, 
               "RowWithSeparators")), "Output", SectionGenerated -> True, 
             SectionLabel -> "out [1]:")}, All)}, 1), 
        SectionGroup({Section("BaseStyle", "ExampleSubsection"), 
          Section("Specify appearance and behavior via a stylesheet:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Button", "(", {StringBox("\"Paste me!\""), ",", 
                "None", ",", {"BaseStyle", "\[Rule]", 
                 StringBox("\"Paste\"")}}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData(ButtonBox(StringBox("\"Paste me!\""), 
               BaseStyle -> "Paste")), "Output", SectionGenerated -> True, 
             SectionLabel -> "out [1]:")}, All)}, 1), 
        SectionGroup({Section("ButtonFrame", "ExampleSubsection"), 
          Section("Hyperlinks are buttons without a frame:", "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Button", "(", {
                {"Style", "(", {StringBox("\"More ...\""), ",", {
                   "FontColor", "\[Rule]", {"Dynamic", "(", {
                     "If", "(", {
                      {"CurrentValue", "(", StringBox("\"MouseOver\""), ")"}, 
                      ",", "Red", ",", "Blue"}, ")"}, ")"}}}, ")"}, ",", {
                 "Print", "(", StringBox("\"... possiblities\""), ")"}, ",", {
                 "ButtonFrame", "\[Rule]", StringBox("\"Frameless\"")}}, 
               ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(BoxData(ButtonBox(StyleBox(StringBox("\"More ...\""), 
                FontColor -> Dynamic(If(CurrentValue("MouseOver"), Red, 
                   Blue)), StripOnInput -> False), ButtonFrame -> "Frameless", 
               ButtonFunction -> Function(Print("... possiblities")))), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("A collection of useful appearances is available:", 
             "ExampleText"), SectionGroup({
              Section(BoxData({"Table", "(", {
                  {"Button", "(", {"bf", ",", ",", {
                     "ButtonFrame", "\[Rule]", "bf"}}, ")"}, ",", {
                   "bf", "\[Rule]", {
                    "{", {"None", ",", "Automatic", ",", 
                     StringBox("\"Frameless\""), ",", 
                     StringBox("\"DialogBox\""), ",", 
                     StringBox("\"Defaulted\""), ",", 
                     StringBox("\"Palette\""), ",", StringBox("\"Generic\""), 
                     ",", StringBox("\"ListViewItem\""), ",", 
                     StringBox("\"ListViewItemSelected\"")}, "}"}}}, ")"}), 
               "Input", SectionLabel -> "in [1]:"), 
              Section(
               BoxData({
                 "{", {ButtonBox("None", ButtonFrame -> None, 
                   ButtonFunction -> Function(/\/)), ",", 
                  ButtonBox("Automatic", ButtonFunction -> Function(/\/)), 
                  ",", ButtonBox(StringBox("\"Frameless\""), 
                   ButtonFrame -> "Frameless", 
                   ButtonFunction -> Function(/\/)), ",", 
                  ButtonBox(StringBox("\"DialogBox\""), 
                   ButtonFrame -> "DialogBox", 
                   ButtonFunction -> Function(/\/)), ",", 
                  ButtonBox(StringBox("\"Defaulted\""), 
                   ButtonFrame -> "Defaulted", 
                   ButtonFunction -> Function(/\/)), ",", 
                  ButtonBox(StringBox("\"Palette\""), 
                   ButtonFrame -> "Palette", ButtonFunction -> Function(/\/)), 
                  ",", ButtonBox(StringBox("\"Generic\""), 
                   ButtonFrame -> "Generic", ButtonFunction -> Function(/\/)), 
                  ",", ButtonBox(StringBox("\"ListViewItem\""), 
                   ButtonFrame -> "ListViewItem", 
                   ButtonFunction -> Function(/\/)), ",", 
                  ButtonBox(StringBox("\"ListViewItemSelected\""), 
                   ButtonFrame -> "ListViewItemSelected", 
                   ButtonFunction -> Function(/\/))}, "}"}), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({
          Section("ContentPadding", "ExampleSubsection"), 
          Section(TextData({"The default setting ", 
             TemplateBox({"ContentPadding"}, "ReferenceHyperlink"), 
             " \[Rule] ", TemplateBox({"True"}, "ReferenceHyperlink"), 
             " ensures that the content's vertical size is at least one \
             line-height:"}), "ExampleText"), 
          SectionGroup({
            Section(
             BoxData({"{", {{"Button", "(", "g", ")"}, ",", {
                 "Button", "(", "b", ")"}}, "}"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData({"{", {ButtonBox("g"), ",", ButtonBox("b")}, 
               "}"}), "Output", SectionGenerated -> True, 
             SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             "Shrink wrap the button frame tightly around the content:", 
             "ExampleText"), SectionGroup({
              Section(
               BoxData({
                 "{", {
                  {"Button", "(", {"g", ",", {"ContentPadding", "\[Rule]", 
                     "False"}}, ")"}, ",", {"Button", "(", {
                    "b", ",", {"ContentPadding", "\[Rule]", "False"}}, ")"}}, 
                 "}"}), "Input", SectionLabel -> "in [1]:"), 
              Section(BoxData({"{", {ButtonBox("g", ContentPadding -> False), 
                  ",", ButtonBox("b", ContentPadding -> False)}, "}"}), 
               "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All)}, All)}, 1), 
        SectionGroup({Section("Enabled", "ExampleSubsection"), 
          Section(TextData({"By default, a ", 
             TemplateBox({"Button"}, "ReferenceHyperlink"), 
             " is enabled, when placed in an enabled environment:"}), 
           "ExampleText"), SectionGroup({
            Section(
             BoxData({"Grid", "@", {
                "Table", "(", {
                 {"{", {"outer", ",", {"Panel", "(", {
                     {"Row", "@", {"Table", "(", {
                        {"Button", "(", {"inner", ",", {
                           "Print", "(", {"RandomReal", "(", ")"}, ")"}, ",", {
                           "Enabled", "\[Rule]", "inner"}}, ")"}, ",", {
                         "inner", "\[Rule]", {
                          "{", {"Automatic", ",", "True", ",", "False"}, 
                          "}"}}}, ")"}}, ",", {"Enabled", "\[Rule]", 
                      "outer"}}, ")"}}, "}"}, ",", {
                  "outer", "\[Rule]", {"{", {"True", ",", "False"}, "}"}}}, 
                ")"}}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(
              TagBox(
               GridBox({
                 {"True", 
                  PanelBox(TemplateBox({
                     ButtonBox("Automatic", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> Automatic), 
                     ButtonBox("True", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> True), 
                     ButtonBox("False", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> False)}, 
                    "RowDefault"), Enabled -> True)}, {
                  "False", 
                  PanelBox(TemplateBox({
                     ButtonBox("Automatic", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> Automatic), 
                     ButtonBox("True", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> True), 
                     ButtonBox("False", ButtonFunction -> 
                       Function(Print(RandomReal())), Enabled -> False)}, 
                    "RowDefault"), Enabled -> False)}}), "Grid")), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         1), SectionGroup({Section("ImageSize", "ExampleSubsection"), 
          Section("Use predefined button sizes:", "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Table", "(", {
                {"Button", "(", {"123", ",", {"ImageSize", "\[Rule]", "s"}}, 
                 ")"}, ",", {"s", "\[Rule]", {
                  "{", {"Tiny", ",", "Small", ",", "Medium", ",", "Large"}, 
                  "}"}}}, ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData({"{", {ButtonBox("123", ImageSize -> {Tiny, Automatic}), 
                ",", ButtonBox("123", ImageSize -> {Small, Automatic}), ",", 
                ButtonBox("123", ImageSize -> {Medium, Automatic}), ",", 
                ButtonBox("123", ImageSize -> {Large, Automatic})}, "}"}), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             "Specify the button\[HighNineQuote]s size regardless of its \
             contents:", "ExampleText"), 
            SectionGroup({
              Section(
               BoxData({"Grid", "(", {
                  "Table", "(", {
                   {"Button", "(", {{"a", "+", "b", "+", "c"}, ",", {
                      "ImageSize", "\[Rule]", {"{", {"w", ",", "h"}, "}"}}}, 
                    ")"}, ",", {"h", "\[Rule]", {
                     "{", {"30", ",", "40", ",", "50"}, "}"}}, ",", {
                    "w", "\[Rule]", {"{", {"40", ",", "50", ",", "80"}, 
                     "}"}}}, ")"}, ")"}), "Input", SectionLabel -> "in [1]:"), 
              Section(
               BoxData(
                TagBox(
                 GridBox({
                   {ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {40, 30}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {50, 30}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {80, 30})}, {
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {40, 40}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {50, 40}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {80, 40})}, {
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {40, 50}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {50, 50}), 
                    ButtonBox({"a", "+", "b", "+", "c"}, 
                     ImageSize -> {80, 50})}}), "Grid")), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({Section("Method", "ExampleSubsection"), 
          Section(TextData({"The default setting ", 
             TemplateBox({"Method"}, "ReferenceHyperlink"), 
             " \[Rule] \"Preemptive\" only allows short actions and blocks \
             updating the front-end:"}), "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Button", "(", {StringBox("\"Too long\""), ",", {
                 {"Print", "(", StringBox("\"Start\""), ")"}, ";", {
                  "Pause", "(", "10", ")"}, ";", {
                  "Print", "(", StringBox("\"Stop\""), ")"}}}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData(ButtonBox(StringBox("\"Too long\""), 
               ButtonFunction -> 
                Function(Print("Start"); Pause(10); Print("Stop")))), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             TextData({"Use ", TemplateBox({"Method"}, "ReferenceHyperlink"), 
               " \[Rule] \"Queued\" for long-running operations:"}), 
             "ExampleText"), SectionGroup({
              Section(
               BoxData({
                 "{", {{"Button", "(", {StringBox("\"Start\""), ",", {
                     "Do", "(", {{{"Print", "(", "i", ")"}, ";", {
                        "Pause", "(", "1", ")"}}, ",", {
                       "i", "\[Rule]", "10"}}, ")"}, ",", {
                     "Method", "\[Rule]", StringBox("\"Queued\"")}}, ")"}, 
                  ",", {"Button", "(", {StringBox("\"Stop\""), ",", {
                     "Abort", "(", ")"}, ",", {"Method", "\[Rule]", 
                     StringBox("\"Preemptive\"")}}, ")"}}, "}"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(
               BoxData({
                 "{", {ButtonBox(StringBox("\"Start\""), 
                   ButtonFunction -> 
                    Function(Do(Print($Context`i); Pause(1), 
                      $Context`i -> 10)), Method -> "Queued"), ",", 
                  ButtonBox(StringBox("\"Stop\""), 
                   ButtonFunction -> Function(Abort()), 
                   Method -> "Preemptive")}, "}"}), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1)}, 1), Section("", "SectionFooterSpacer")}, All), 
    SectionGroup({Section("See Also", "SeeAlsoSection"), 
      Section(TextData({TemplateBox({"Setter"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"ButtonFrame"}, 
          "ReferenceHyperlink")}), "SeeAlso")}, All)}, All)}, 
 StyleDefinitions -> "Reference.pmathdoc", Visible -> True)