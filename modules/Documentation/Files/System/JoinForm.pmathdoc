/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("JoinForm", "ObjectName"), 
      Section(BoxData(TemplateBox({"JoinForm"}, "UsageReference")), "Usage")}, 
     All), SectionGroup({Section("Details", "NotesSection"), 
      SectionGroup({Section("", "NotesSectionHeaderSpacer"), 
        Section(TextData({"The following types can be used in ", 
           TemplateBox({"JoinForm"}, "ReferenceHyperlink"), "(", 
           StyleBox("type", "Arg"), "):"}), "Notes"), 
        Section(
         TextData({
           GridBox({{"\"Bevel\"", "truncate at the corner"}, {
              StringBox("\"Round\""), {"cover", " ", "the", " ", "corner", 
               " ", "with", " ", "a", " ", "disk"}}, {
              "\"Miter\"", "extend the corner towards a point"}, {
              {"{\"Miter\", ", StyleBox("d", "Arg"), "}"}, {
               "extend by at most ", StyleBox("d", "Arg"), 
               " times the line width"}}, {
              {TemplateBox({"None"}, "ReferenceHyperlink")}, 
              "equivalent to \"Bevel\" in 2D graphics"}})}), 
         "2ColumnTableNotes"), 
        Section(
         TextData({
           BoxData({TemplateBox({"JoinForm"}, "ReferenceHyperlink"), "(", {
              "{", {StringBox("\"Miter\""), ",", " ", {
                "1", "/", {"Sin", "(", {"\[Theta]", "/", "2"}, ")"}}}, "}"}, 
             ")"}), " gives sharp edges for any join angle larger than ", 
           StyleBox({StyleBox("\[Theta]", "Arg"), "."}, "Arg")}), "Notes")}, 
       All), Section("", "SectionFooterSpacer")}, 1), 
    SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
      SectionGroup({Section("Basic Examples", "ExampleSection"), 
        Section("A rounded line join:", "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Graphics", "(", {
              {"{", {{"JoinForm", "(", StringBox("\"Round\""), ")"}, ",", {
                 "Thickness", "(", {"Scaled", "(", "0.1", ")"}, ")"}, ",", {
                 "Line", "(", {"{", {{"{", {{"-", "1"}, ",", "0"}, "}"}, ",", {
                    "{", {"0", ",", "1"}, "}"}, ",", {
                    "{", {"1", ",", "0"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
               "PlotRange", "\[Rule]", {
                "{", {{{"-", "1.5"}, "..", "1.5"}, ",", {
                  {"-", "0.5"}, "..", "1.5"}}, "}"}}}, ")"}), "Input", 
           SectionLabel -> "in [1]:"), 
          Section(
           BoxData(GraphicsBox({JoinForm("Round"), 
              Thickness(Scaled(0.10000000000000001`)), 
              LineBox({{-1, 0}, {0, 1}, {1, 0}})}, 
             PlotRange -> {-1.5` .. 1.5`, -0.5` .. 1.5`})), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
       All), SectionGroup({Section("Scope", "ExampleSection"), 
        Section("Possible line joins:", "ExampleText"), 
        SectionGroup({
          Section(
           BoxData({"Grid", "(", {
              "Table", "(", {
               {"{", {"j", ",", {"Graphics", "(", {
                   {"{", {{"JoinForm", "(", "j", ")"}, ",", {
                      "Thickness", "(", {"Scaled", "(", "0.2", ")"}, ")"}, 
                     ",", {"Line", "(", {
                       "{", {{"{", {{"-", "1"}, ",", "0"}, "}"}, ",", {
                         "{", {"0", ",", "1"}, "}"}, ",", {
                         "{", {"1", ",", "0"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                    "PlotRange", "\[Rule]", {
                     "{", {{{"-", "1.5"}, "..", "1.5"}, ",", {
                       {"-", "0.5"}, "..", "1.5"}}, "}"}}}, ")"}}, "}"}, ",", {
                "j", "\[Rule]", {"{", {StringBox("\"Bevel\""), ",", 
                  StringBox("\"Round\""), ",", StringBox("\"Miter\"")}, 
                 "}"}}}, ")"}, ")"}), "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData(
            TagBox(
             GridBox({{StringBox("\"Bevel\""), 
                GraphicsBox({JoinForm("Bevel"), 
                  Thickness(Scaled(0.20000000000000001`)), 
                  LineBox({{-1, 0}, {0, 1}, {1, 0}})}, 
                 PlotRange -> {-1.5` .. 1.5`, -0.5` .. 1.5`})}, {
                StringBox("\"Round\""), 
                GraphicsBox({JoinForm("Round"), 
                  Thickness(Scaled(0.20000000000000001`)), 
                  LineBox({{-1, 0}, {0, 1}, {1, 0}})}, 
                 PlotRange -> {-1.5` .. 1.5`, -0.5` .. 1.5`})}, {
                StringBox("\"Miter\""), 
                GraphicsBox({JoinForm("Miter"), 
                  Thickness(Scaled(0.20000000000000001`)), 
                  LineBox({{-1, 0}, {0, 1}, {1, 0}})}, 
                 PlotRange -> {-1.5` .. 1.5`, -0.5` .. 1.5`})}}), "Grid")), 
           "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
         All), SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section(TextData({"If the miter limit ", StyleBox("d", "Arg"), 
             " in ", TemplateBox({"JoinForm"}, "ReferenceHyperlink"), 
             "({\"Miter\",", StyleBox(" d", "Arg"), 
             "}) is too small, \"Bevel\" is effectively used:"}), 
           "ExampleText"), SectionGroup({
            Section(
             BoxData({
               {"With", "(", {"points", "\[Assign]", {
                  "{", {{"{", {"2", ",", "0"}, "}"}, ",", {
                    "{", {"0", ",", "0"}, "}"}, ",", {
                    "{", {"1", ",", "2"}, "}"}}, "}"}}, ")"}, {
                "{", {
                 "\n", {
                  {"Graphics", "(", {
                    {"{", {{"Thickness", "(", {"Scaled", "(", "0.2", ")"}, 
                       ")"}, ",", {
                       "\n", {
                        "{", {"Red", ",", {"JoinForm", "(", {
                           "{", {StringBox("\"Miter\""), ",", "2"}, "}"}, 
                          ")"}, ",", {"Line", "(", "points", ")"}}, "}"}}, 
                      ",", {
                       "\n", {"{", {"Black", ",", {
                          "JoinForm", "(", {
                           "{", {StringBox("\"Miter\""), ",", "1"}, "}"}, 
                          ")"}, ",", {"Line", "(", "points", ")"}}, "}"}}}, 
                     "}"}, ",", {"\n", {"PlotRange", "\[Rule]", {
                       "{", {{{"-", "1"}, "..", "3"}, ",", {
                         {"-", "1"}, "..", "3"}}, "}"}}}}, ")"}, "\n"}}, 
                "}"}}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(GraphicsBox({Thickness(Scaled(0.20000000000000001`)), {
                 RGBColor(1, 0, 0), JoinForm({"Miter", 2}), 
                 LineBox({{2, 0}, {0, 0}, {1, 2}})}, {
                 GrayLevel(0), JoinForm({"Miter", 1}), 
                 LineBox({{2, 0}, {0, 0}, {1, 2}})}}, 
               PlotRange -> NCache({-1 .. 3, -1 .. 3}, {
                  -1.0` .. 3.0`, -1.0` .. 3.0`}))), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All)}, 1), SectionGroup({Section("Neat Examples", "ExampleSection"), 
        Section("Different line caps and join forms:", "ExampleText"), 
        SectionGroup({
          Section(
           BoxData({
             {"With", "(", {"points", "\[Assign]", {
                "{", {{"{", {"0", ",", "0.3"}, "}"}, ",", {
                  "{", {{"-", "0.5"}, ",", "0"}, "}"}, ",", {
                  "{", {"0.5", ",", "0"}, "}"}, ",", {
                  "{", {"0.3", ",", "0.3"}, "}"}}, "}"}}, ")"}, {
              "{", {
               "\n", {
                {"Graphics", "(", {
                  {"{", {{"Thickness", "(", {"Scaled", "(", "0.1", ")"}, ")"}, 
                    ",", {
                     "\n", {
                      "{", {"Blue", ",", {"CapForm", "(", 
                        StringBox("\"Square\""), ")"}, ",", {
                        "JoinForm", "(", StringBox("\"Miter\""), ")"}, ",", {
                        "Line", "(", "points", ")"}}, "}"}}, ",", {
                     "\n", {"{", {"Green", ",", {
                        "CapForm", "(", StringBox("\"Round\""), ")"}, ",", {
                        "JoinForm", "(", StringBox("\"Round\""), ")"}, ",", {
                        "Line", "(", "points", ")"}}, "}"}}, ",", {
                     "\n", {
                      "{", {"Red", ",", {"CapForm", "(", 
                        StringBox("\"Butt\""), ")"}, ",", {
                        "JoinForm", "(", StringBox("\"Bevel\""), ")"}, ",", {
                        "Line", "(", "points", ")"}}, "}"}}}, "}"}, ",", {
                   "\n", {"PlotRange", "\[Rule]", {
                     "{", {{{"-", "1"}, "..", "1"}, ",", {
                       {"-", "0.5"}, "..", "0.7"}}, "}"}}}}, ")"}, "\n"}}, 
              "}"}}), "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData(GraphicsBox({Thickness(Scaled(0.10000000000000001`)), {
               RGBColor(0, 0, 1), CapForm("Square"), JoinForm("Miter"), 
               LineBox({{0, 0.29999999999999999`}, {-0.5`, 0}, {0.5`, 0}, {
                  0.29999999999999999`, 0.29999999999999999`}})}, {
               RGBColor(0, 1, 0), CapForm("Round"), JoinForm("Round"), 
               LineBox({{0, 0.29999999999999999`}, {-0.5`, 0}, {0.5`, 0}, {
                  0.29999999999999999`, 0.29999999999999999`}})}, {
               RGBColor(1, 0, 0), CapForm("Butt"), JoinForm("Bevel"), 
               LineBox({{0, 0.29999999999999999`}, {-0.5`, 0}, {0.5`, 0}, {
                  0.29999999999999999`, 0.29999999999999999`}})}}, 
             PlotRange -> NCache({-1 .. 1, -0.5` .. 0.69999999999999996`}, {
                -1.0` .. 1.0`, -0.5` .. 0.69999999999999996`}))), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 1), 
      Section("", "SectionFooterSpacer")}, All), 
    SectionGroup({Section("See Also", "SeeAlsoSection"), 
      Section(TextData({TemplateBox({"CapForm"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"Thickness"}, 
          "ReferenceHyperlink"), "\[NonBreakingSpace]\[Dot] ", 
         TemplateBox({"Line"}, "ReferenceHyperlink")}), "SeeAlso")}, All)}, 
   All)}, StyleDefinitions -> "Reference.pmathdoc", Visible -> True)