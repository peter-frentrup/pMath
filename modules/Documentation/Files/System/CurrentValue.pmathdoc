/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("CurrentValue", "ObjectName"), 
      Section(BoxData(TemplateBox({"CurrentValue"}, "UsageReference")), 
       "Usage")}, All), SectionGroup({
      Section("Details and Options", "NotesSection"), 
      SectionGroup({Section("", "NotesSectionHeaderSpacer"), 
        Section(TextData({TemplateBox({"CurrentValue"}, "ReferenceHyperlink"), 
           " by default refers to the location where it appears in the \
           document."}), "Notes"), 
        Section(TextData({TemplateBox({"CurrentValue"}, "ReferenceHyperlink"), 
           " may be used inside ", TemplateBox({"Dynamic"}, 
            "ReferenceHyperlink"), "."}), "Notes"), 
        Section(TextData({"Certain items can be reset with ", {
            {TemplateBox({"CurrentValue"}, "ReferenceHyperlink"), "(", 
             StyleBox("item", "Arg"), ")"}, "\[Assign]", 
            StyleBox("val", "Arg")}, ", or implicitly via ", 
           TemplateBox({"Dynamic"}, "ReferenceHyperlink"), "."}), "Notes"), 
        Section(TextData({"Any document option can be accessed with ", {
            TemplateBox({"CurrentValue"}, "ReferenceHyperlink"), "(", 
            StyleBox("opt", "Arg"), ")"}, "."}), "Notes")}, All), 
      Section("", "SectionFooterSpacer")}, 1), 
    SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
      SectionGroup({Section("Basic Examples", "ExampleSection"), 
        Section("Get the current document file name", "ExampleText"), 
        SectionGroup({
          Section(BoxData({"CurrentValue", "(", 
             StringBox("\"DocumentFileName\""), ")"}), "Input", 
           SectionLabel -> "in [1]:"), 
          Section(BoxData(StringBox("\"CurrentValue.pmathdoc\"")), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
        SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section("Dynamically update the current value:", "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Dynamic", "(", {
                "CurrentValue", "(", StringBox("\"MouseOver\""), ")"}, ")"}), 
             "Input", SectionLabel -> "in [1]:"), 
            Section(BoxData(DynamicBox(ToBoxes(CurrentValue("MouseOver")))), 
             "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
           All)}, All)}, All), 
      SectionGroup({Section("Scope", "ExampleSection"), 
        SectionGroup({Section("Options", "ExampleSubsection"), 
          Section(
           "Get the current value of an option for a document (rather than for \
           the evaluation box):", "ExampleText"), 
          SectionGroup({
            Section(BoxData({"CurrentValue", "(", {
                {"EvaluationDocument", "(", ")"}, ",", "Editable"}, ")"}), 
             "Input", SectionLabel -> "in [1]:"), 
            Section(BoxData("True"), "Output", SectionGenerated -> True, 
             SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             "Evaluate the effectively used font size at a document \
             location:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"Style", "(", {
                  {{"Dynamic", "(", {"CurrentValue", "(", "FontSize", ")"}, 
                    ")"}, "^", {"Dynamic", "(", {
                     "CurrentValue", "(", "FontSize", ")"}, ")"}}, ",", {
                   "FontSize", "\[Rule]", "24"}}, ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(
               BoxData(StyleBox({DynamicBox(ToBoxes(CurrentValue(FontSize))), 
                  SuperscriptBox(
                   DynamicBox(ToBoxes(CurrentValue(FontSize))))}, 
                 FontSize -> 24, StripOnInput -> False)), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Access nested option values:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"CurrentValue", "(", {
                  "{", {StringBox("\"SyntaxErrorStyle\""), ",", "FontColor"}, 
                  "}"}, ")"}), "Input", SectionLabel -> "in [1]:"), 
              Section(BoxData({"RGBColor", "(", {"1", ",", "0", ",", "0"}, 
                 ")"}), "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All)}, All)}, 1), 
        SectionGroup({Section("Font", "ExampleSubsection"), 
          Section("Get the system\[HighNineQuote]s user interface font name:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"CurrentValue", "(", 
               StringBox("\"ControlsFontFamily\""), ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData(StringBox("\"Segoe UI\"")), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("The system\[HighNineQuote]s user interface font size:", 
             "ExampleText"), SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"ControlsFontSize\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), Section(BoxData("9"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("The system\[HighNineQuote]s user interface font slant:", 
             "ExampleText"), SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"ControlsFontSlant\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), Section(BoxData("Plain"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("The system\[HighNineQuote]s user interface font weight:", 
             "ExampleText"), SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"ControlsFontWeight\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), Section(BoxData("Plain"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({Section("Document", "ExampleSubsection"), 
          Section("Explore menu commands under the mouse cursor:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Dynamic", "(", {
                "CurrentValue", "(", StringBox("\"SelectedMenuCommand\""), 
                ")"}, ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(DynamicBox(
               ToBoxes(CurrentValue("SelectedMenuCommand")))), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             "Get the owning document object of an embedded style definitions \
             document:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"StyleDefinitionsOwner\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), Section(BoxData("None"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             TextData({"Obtain a document\[HighNineQuote]s directory (or ", 
               TemplateBox({"None"}, "ReferenceHyperlink"), "):"}), 
             "ExampleText"), SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"DocumentDirectory\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(
               BoxData(
                StringBox(
                 "\"D:\\\\User\\\\frentrup\\\\Programmieren\\\\pmath\\\\module\
                 s\\\\Documentation\\\\Files\\\\System\"")), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             TextData({
               "Obtain a document\[HighNineQuote]s file name without directory \
               path (or ", TemplateBox({"None"}, "ReferenceHyperlink"), 
               "):"}), "ExampleText"), 
            SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"DocumentFileName\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(StringBox("\"CurrentValue.pmathdoc\"")), 
               "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All), 
            Section(
             "Change a document\[HighNineQuote]s file name without actually \
             saving it to disk:", "ExampleText"), 
            SectionGroup({
              Section(
               BoxData({
                 {"CurrentValue", "(", StringBox("\"DocumentFileName\""), 
                  ")"}, "\[Assign]", StringBox("\"test.pmathdoc\"")}), 
               "Input", SectionLabel -> "in [2]:"), 
              Section(BoxData(StringBox("\"test.pmathdoc\"")), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [2]:")}, All), 
            Section(
             TextData({
               "Reset the file name (but not the directory) so that File \
               \[Rule] Save (", TemplateBox({"S"}, "ControlKeyEvent"), 
               ") would pop-up a save dialog:"}), "ExampleText"), 
            SectionGroup({
              Section(
               BoxData({
                 {"CurrentValue", "(", StringBox("\"DocumentFileName\""), 
                  ")"}, "\[Assign]", "None"}), "Input", 
               SectionLabel -> "in [3]:"), Section(BoxData("None"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [3]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             TextData({
               "Obtain a document\[HighNineQuote]s full file path (or ", 
               TemplateBox({"None"}, "ReferenceHyperlink"), "):"}), 
             "ExampleText"), SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"DocumentFullFileName\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(
               BoxData(
                StringBox(
                 "\"D:\\\\User\\\\frentrup\\\\Programmieren\\\\pmath\\\\module\
                 s\\\\Documentation\\\\Files\\\\System\\\\CurrentValue.pmathdo\
                 c\"")), "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All)}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Get the current window title:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"CurrentValue", "(", "WindowTitle", ")"}), 
               "Input", SectionLabel -> "in [1]:"), 
              Section(BoxData(StringBox("\"CurrentValue.pmathdoc\"")), 
               "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All), 
            Section(
             "In contrast, the window title option does not evaluate \
             further:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"Options", "(", {
                  {"EvaluationDocument", "(", ")"}, ",", "WindowTitle"}, 
                 ")"}), "Input", SectionLabel -> "in [2]:"), 
              Section(BoxData({"{", {"WindowTitle", "\[Rule]", "Inherited"}, 
                 "}"}), "Output", SectionGenerated -> True, 
               SectionLabel -> "out [2]:")}, All)}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Change the window title:", "ExampleText"), 
            SectionGroup({
              Section(
               BoxData({
                 {"CurrentValue", "(", {{"EvaluationDocument", "(", ")"}, ",", 
                   "WindowTitle"}, ")"}, "\[Assign]", 
                 StringBox("\"PhD is a title\"")}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(StringBox("\"PhD is a title\"")), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(
             "Find out the resolution of the screen that displays a \
             document:", "ExampleText"), 
            SectionGroup({
              Section(BoxData({"CurrentValue", "(", 
                 StringBox("\"DocumentScreenDpi\""), ")"}), "Input", 
               SectionLabel -> "in [1]:"), Section(BoxData("96"), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All)}, 1), SectionGroup({
          Section("Environment", "ExampleSubsection"), 
          Section("Find all available items, disregarding options:", 
           "ExampleText"), SectionGroup({
            Section(
             BoxData({
               {"CurrentValue", "(", StringBox("\"CurrentValueProviders\""), 
                ")"}, ".", "Select", "(", "IsString", ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(BoxData({"{", {StringBox("\"SyntaxErrorStyle\""), ",", 
                StringBox("\"InlineAutoCompletionStyle\""), ",", 
                StringBox("\"DocumentFileName\""), ",", 
                StringBox("\"PatternVariableStyle\""), ",", 
                StringBox("\"SectionGroupOpen\""), ",", 
                StringBox("\"HeldTemplateSlot\""), ",", 
                StringBox("\"CommentStyle\""), ",", 
                StringBox("\"OccurenceHighlightStyle\""), ",", 
                StringBox("\"SectionInsertionPointColor\""), ",", 
                StringBox("\"SymbolShadowingStyle\""), ",", 
                StringBox("\"DocumentScreenDpi\""), ",", 
                StringBox("\"SelectedMenuCommand\""), ",", 
                StringBox("\"StyleDefinitionsOwner\""), ",", 
                StringBox("\"ControlsFontSlant\""), ",", 
                StringBox("\"MouseOver\""), ",", 
                StringBox("\"TemplateSlotCount\""), ",", 
                StringBox("\"ResolvedEvaluationContext\""), ",", 
                StringBox("\"DebugFollowMouse\""), ",", 
                StringBox("\"ControlsFontSize\""), ",", 
                StringBox("\"MatchingBracketHighlightStyle\""), ",", 
                StringBox("\"CharacterNameStyle\""), ",", 
                StringBox("\"LocalVariableStyle\""), ",", 
                StringBox("\"LocalScopeConflictStyle\""), ",", 
                StringBox("\"DebugSelectionBounds\""), ",", 
                StringBox("\"MouseOverBox\""), ",", 
                StringBox("\"CurrentValueProviders\""), ",", 
                StringBox("\"ControlsFontWeight\""), ",", 
                StringBox("\"KeywordSymbolStyle\""), ",", 
                StringBox("\"ExcessOrMissingArgumentStyle\""), ",", 
                StringBox("\"Color\""), ",", 
                StringBox("\"FunctionLocalVariableStyle\""), ",", 
                StringBox("\"FunctionNameStyle\""), ",", 
                StringBox("\"ImplicitOperatorStyle\""), ",", 
                StringBox("\"DocumentDirectory\""), ",", 
                StringBox("\"DocumentFullFileName\""), ",", 
                StringBox("\"PageWidthCharacters\""), ",", 
                StringBox("\"ControlsFontFamily\""), ",", 
                StringBox("\"DebugColorizeChanges\""), ",", 
                StringBox("\"StringStyle\""), ",", 
                StringBox("\"UnknownOptionStyle\""), ",", 
                StringBox("\"UndefinedSymbolStyle\"")}, "}"}), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section("Investigate front-end graphics issues interactively:", 
             "ExampleText"), SectionGroup({
              Section(
               BoxData({
                 {{"{", {StringBox("\"DebugColorizeChanges\""), ",", 
                    StringBox("\"DebugFollowMouse\""), ",", 
                    StringBox("\"DebugSelectionBounds\"")}, "}"}, ".", "Map", 
                  "(", {
                   {"{", {{"ToggleSwitch", "(", {
                       "Dynamic", "(", {"CurrentValue", "(", {
                         "$FrontEndSession", ",", "#"}, ")"}, ")"}, ")"}, ",", 
                     "#"}, "}"}, "&"}, ")"}, ".", "Grid"}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(
               BoxData(
                TagBox(
                 GridBox({
                   {TemplateBox({
                      Dynamic(CurrentValue($FrontEndSession, 
                        "DebugColorizeChanges"))}, "ToggleSwitch"), 
                    StringBox("\"DebugColorizeChanges\"")}, {
                    TemplateBox({
                      Dynamic(CurrentValue($FrontEndSession, 
                        "DebugFollowMouse"))}, "ToggleSwitch"), 
                    StringBox("\"DebugFollowMouse\"")}, {
                    TemplateBox({
                      Dynamic(CurrentValue($FrontEndSession, 
                        "DebugSelectionBounds"))}, "ToggleSwitch"), 
                    StringBox("\"DebugSelectionBounds\"")}}), "Grid")), 
               "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All)}, All), 
          SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(TextData({"Resolve the current ", 
               TemplateBox({"EvaluationContext"}, "ReferenceHyperlink"), 
               " to its default namespace:"}), "ExampleText"), 
            SectionGroup({
              Section(BoxData({"Dynamic", "(", {
                  "{", {{"CurrentValue", "(", "EvaluationContext", ")"}, ",", {
                    "CurrentValue", "(", 
                    StringBox("\"ResolvedEvaluationContext\""), ")"}}, "}"}, 
                 ")"}), "Input", SectionLabel -> "in [1]:"), 
              Section(
               BoxData(DynamicBox(
                 ToBoxes({CurrentValue(EvaluationContext), 
                   CurrentValue("ResolvedEvaluationContext")}))), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(TextData({"Extract a ", TemplateBox({"TemplateBox"}, 
                "ReferenceHyperlink"), " argument:"}), "ExampleText"), 
            SectionGroup({
              Section(BoxData({"RawBoxes", "@", {
                  "TemplateBox", "(", {
                   {"{", {"SqrtBox", "(", StringBox("\"5\""), ")"}, "}"}, ",", 
                   StringBox("\"MyTag\""), ",", {"DisplayFunction", "\[Rule]", 
                    {"Function", "(", {"PanelBox", "(", {
                       "{", {{"\n", {"FrameBox", "(", {"#", "1"}, ")"}}, ",", 
                        StringBox("\"\\n\""), ",", {
                         "\n", {"DynamicBox", "(", {
                           "ToBoxes", "(", {"CurrentValue", "(", {
                             "{", {"TemplateSlot", ",", "1"}, "}"}, ")"}, 
                           ")"}, ")"}}, ",", StringBox("\"\\n\""), ",", {
                         "\n", {"ButtonBox", "(", {StringBox("\"Reset\""), 
                           ",", {"ButtonFunction", "\[Rule]", {
                             "Function", "(", {
                              {"CurrentValue", "(", {
                                "{", {"TemplateSlot", ",", "1"}, "}"}, ")"}, 
                              "\[Assign]", {"SqrtBox", "(", 
                               StringBox("\"2\""), ")"}}, ")"}}}, ")"}}}, 
                       "}"}, ")"}, ")"}}}, ")"}}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(TemplateBox({SqrtBox("5")}, "MyTag", 
                 DisplayFunction -> 
                  Function(PanelBox({FrameBox(#1), "\n", 
                     DynamicBox(ToBoxes(CurrentValue({TemplateSlot, 1}))), 
                     "\n", ButtonBox("Reset", ButtonFunction -> 
                       Function(CurrentValue({TemplateSlot, 1}):= 
                         SqrtBox("2")))})))), "Output", 
               SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
           All), SectionGroup({
            Section(BoxData(InterpretationBox("", $Line:= 0;, 
               Editable -> False)), "ExampleDelimiter"), 
            Section(TextData({"Get the number of ", 
               TemplateBox({"TemplateBox"}, "ReferenceHyperlink"), 
               " arguments:"}), "ExampleText"), 
            SectionGroup({
              Section(BoxData({"RawBoxes", "@", {
                  "TemplateBox", "(", {
                   {"{", {StringBox("\"a\""), ",", StringBox("\"b\"")}, "}"}, 
                   ",", StringBox("\"MyTag\""), ",", {
                    "DisplayFunction", "\[Rule]", {
                     "Function", "(", {"PanelBox", "(", {
                       "{", {{"FrameBox", "(", {"#", "1"}, ")"}, ",", 
                        StringBox("\" \""), ",", {"FrameBox", "(", {"#", "2"}, 
                         ")"}, ",", " ", StringBox("\" \""), ",", {
                         "\n", {"DynamicBox", "(", {
                           "ToBoxes", "(", {"CurrentValue", "(", 
                            StringBox("\"TemplateSlotCount\""), ")"}, ")"}, 
                          ")"}}}, "}"}, ")"}, ")"}}}, ")"}}), "Input", 
               SectionLabel -> "in [1]:"), 
              Section(BoxData(TemplateBox({"a", "b"}, "MyTag", 
                 DisplayFunction -> 
                  Function(PanelBox({FrameBox(#1), " ", FrameBox(#2), " ", 
                     DynamicBox(
                      ToBoxes(CurrentValue("TemplateSlotCount")))})))), 
               "Output", SectionGenerated -> True, 
               SectionLabel -> "out [1]:")}, All)}, All)}, 1)}, 1), 
      SectionGroup({Section("Properties & Relations", "ExampleSection"), 
        Section(
         TextData({"Unlike ", TemplateBox({"Options"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"CurrentValue"}, "ReferenceHyperlink"), 
           " tries to resolve ", TemplateBox({"Inherited"}, 
            "ReferenceHyperlink"), 
           " definitions by considering ambient settings:"}), "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Options", "(", {{"EvaluationDocument", "(", ")"}, 
              ",", "Editable"}, ")"}), "Input", SectionLabel -> "in [1]:"), 
          Section(BoxData({"{", {"Editable", "\[Rule]", "Inherited"}, "}"}), 
           "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
         All), SectionGroup({
          Section(BoxData({"CurrentValue", "(", {
              {"EvaluationDocument", "(", ")"}, ",", "Editable"}, ")"}), 
           "Input", SectionLabel -> "in [2]:"), 
          Section(BoxData("True"), "Output", SectionGenerated -> True, 
           SectionLabel -> "out [2]:")}, All)}, 1), 
      SectionGroup({Section("Possible Issues", "ExampleSection"), 
        Section(TextData({"Assignments ", TemplateBox({"CurrentValue"}, 
            "ReferenceHyperlink"), "(", StyleBox("item", "Arg"), 
           ")\[Assign] ", StyleBox("value", "Arg"), " apply to ", 
           TemplateBox({"EvaluationBox"}, "ReferenceHyperlink"), 
           "() and thus might fail instead of applying to an outer \
           context:"}), "ExampleText"), 
        SectionGroup({
          Section(BoxData(/\/({{"CurrentValue", "(", "WindowTitle", ")"}, 
              "\[Assign]", StringBox("\"Where am I?\"")}, "\n", {
              {"DocumentGet", "(", {"EvaluationBox", "(", ")"}, ")"}, ".", 
              "Replace", "(", {{"BoxData", "(", "~", ")"}, "\[RuleDelayed]", 
               StringBox("\"\[Ellipsis]\"")}, ")"})), "Input", 
           SectionLabel -> "in [1]:", WindowTitle -> "Where am I?"), 
          Section(BoxData(StringBox("\"Where am I?\"")), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:"), 
          Section(BoxData({"Section", "(", {StringBox("\"\[Ellipsis]\""), ",", 
              StringBox("\"Input\""), ",", {"SectionLabel", "\[Rule]", 
               StringBox("\"in [1]:\"")}, ",", {
               "WindowTitle", "\[Rule]", StringBox("\"Where am I?\"")}}, 
             ")"}), "Output", SectionGenerated -> True, 
           SectionLabel -> "out [2]:")}, All), 
        Section("Explicitly specify the relevant object instead:", 
         "ExampleText"), 
        Section(
         BoxData({
           {{"CurrentValue", "(", {{"EvaluationDocument", "(", ")"}, ",", 
              "WindowTitle"}, ")"}, "\[Assign]", StringBox("\"Here I am!\"")}, 
           ";"}), "Input", SectionLabel -> "in [3]:")}, 1), 
      Section("", "SectionFooterSpacer")}, All), 
    SectionGroup({Section("See Also", "SeeAlsoSection"), 
      Section(TextData({TemplateBox({"Options"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"Dynamic"}, 
          "ReferenceHyperlink"), "\[NonBreakingSpace]\[Dot] ", 
         TemplateBox({"ControlActive"}, "ReferenceHyperlink")}), "SeeAlso")}, 
     All)}, All)}, StyleDefinitions -> "Reference.pmathdoc", Visible -> True)