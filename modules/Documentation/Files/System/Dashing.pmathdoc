/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("Dashing", "ObjectName"), 
      Section(BoxData(TemplateBox({"Dashing"}, "UsageReference")), "Usage")}, 
     All), SectionGroup({Section("Details", "NotesSection"), 
      SectionGroup({Section("", "NotesSectionHeaderSpacer"), 
        Section(TextData({"At 100% ", TemplateBox({"Magnification"}, 
            "ReferenceHyperlink"), 
           ", the absolute dash lengths are measured in \
           printer\[HighNineQuote]s points. One printer\[HighNineQuote]s point \
           equals ", BoxData(FractionBox("1", "72")), 
           " inch. One pixel on a typical low resolution (96 dpi) screen \
           equals 0.75 printer\[HighNineQuote]s points."}), "Notes"), 
        Section(TextData({"The following symbolic forms for ", 
           StyleBox({"d", SubscriptBox("i")}, "Arg"), " can be used: ", 
           TemplateBox({"Tiny"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"Small"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"Medium"}, "ReferenceHyperlink"), ", ", 
           TemplateBox({"Large"}, "ReferenceHyperlink"), ", and ", 
           TemplateBox({"Automatic"}, "ReferenceHyperlink"), "."}), "Notes"), 
        Section(TextData({"A length ", StyleBox({"d", SubscriptBox("i")}, 
            "Arg"), " of the form ", TemplateBox({"Scaled"}, 
            "ReferenceHyperlink"), "(", StyleBox("s", "Arg"), 
           ") uses a fraction ", StyleBox("s", "Arg"), 
           " of the overall plot range width (excluding graphics frame \
           margins) for the thickness."}), "Notes")}, All), 
      Section("", "SectionFooterSpacer")}, 1), 
    SectionGroup({Section("Examples", "PrimaryExamplesSection"), 
      SectionGroup({Section("Basic Examples", "ExampleSection"), 
        Section(
         "Specify the dashing of lines as successive segments with lengths in \
         printer\[HighNineQuote]s points:", "ExampleText"), 
        SectionGroup({
          Section(
           BoxData({"Table", "(", {
              {"Graphics", "(", {
                {"{", {{"Dashing", "(", {"{", {"d", ",", {"10", "-", "d"}}, 
                    "}"}, ")"}, ",", {"Line", "(", {
                    "{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                      "{", {"1", ",", "1"}, "}"}, ",", {
                      "{", {"2", ",", "0"}, "}"}, ",", {
                      "{", {"3", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                 "ImageSize", "\[Rule]", "50"}}, ")"}, ",", {
               "d", "\[Rule]", {"{", {"2", ",", "4", ",", "6", ",", "8"}, 
                "}"}}}, ")"}), "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData({
             "{", {
              GraphicsBox({Dashing({2, 8}), 
                LineBox({{0, 0}, {1, 1}, {2, 0}, {3, 1}})}, 
               ImageSize -> {50, Automatic}), ",", 
              GraphicsBox({Dashing({4, 6}), 
                LineBox({{0, 0}, {1, 1}, {2, 0}, {3, 1}})}, 
               ImageSize -> {50, Automatic}), ",", 
              GraphicsBox({Dashing({6, 4}), 
                LineBox({{0, 0}, {1, 1}, {2, 0}, {3, 1}})}, 
               ImageSize -> {50, Automatic}), ",", 
              GraphicsBox({Dashing({8, 2}), 
                LineBox({{0, 0}, {1, 1}, {2, 0}, {3, 1}})}, 
               ImageSize -> {50, Automatic})}, "}"}), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
        SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section(TextData({"Set the line dashing in plots using ", 
             TemplateBox({"PlotStyle"}, "ReferenceHyperlink"), ":"}), 
           "ExampleText"), SectionGroup({
            Section(
             BoxData({"Plot", "(", {
                {"{", {{"Sin", "(", "x", ")"}, ",", {"Cos", "(", "x", ")"}}, 
                 "}"}, ",", {"x", "\[Rule]", {"0", "..", "5"}}, ",", {
                 "PlotStyle", "\[Rule]", {
                  "{", {{"Dashing", "(", "Tiny", ")"}, ",", {
                    "Dashing", "(", "Large", ")"}}, "}"}}}, ")"}), "Input", 
             SectionLabel -> "in [1]:"), 
            Section(
             BoxData(GraphicsBox({
                {Directive(RGBColor(0.75, 0, 0), Dashing(Tiny)), 
                 LineBox(
                  CompressedData(
                    "1:c${65eN0nV7>CP8%gmtAdl%]bKxEcMvn,Pb1h(]kl,X6&aUn5EASmhp\
                    gFv8@IZYTWV+w;YOT;n5hKMc%8H]j$vg}r0aS(-x0$XuPCs?R$4,2PDg?8\
                    (,r]mBa{&Vx5^Lu{Jxz[H,&Ofl(FHrQqbv=Jvn?F7Zkr]GJ2M0z$rP=h]q\
                    lbu&HI-NPPJl3f22Hwf(+9RmDDb{&XW&HB$xQPL2H3<OFoAA1C-J0d8u)Q\
                    Ofgs#@EV}K1^X4Gt=Hb1U<R;+9<8z=0eJ$$?&P318Lxa[-djEbi@Y_,jP<\
                    ?Q!R{GQoLd!*{-XU}plxd;-MR2}SmA0}p0+0AWE4-yvKQ2-bsPmrhw?a])\
                    KIv!*fn+}=22lgQH6AJ=LSC5-prTZjc9u{-8>n{Y#HreekRNLYO]J0QH]I\
                    +eXNSobC)Wl2MFc;y9VQy$%Z8>2?dyPqO4][sA,yIB9H11n%C{_2o@fbDn\
                    -?Bj_fTH?60FZ,}7Dwp^0Z5kshpjzcM?!}0]jY%y(ynD%n}D6ggj[RPBG>\
                    4bHck4WoGI_pPvh)hS-Kej({KU=Yp!ys+h7X1a9ztE{My@&N^M,^IL}f=D\
                    xu*xs<0_2K_g#t[[@]pB32r^2MF!%@*3<4Vr]6!{gJw,*%ZboxY-u@!h,%\
                    RE6F1vo&VgUxdN$tRG8on&@1Fof*B=KkqZq}G^KHsLHr$Fw+0Q4=YAep8t\
                    t6^uGP^PDJz7l57Lz2V&>IP)Nt-r!-HDA))1;+s{3s-%o<d<0%0n*88;ID\
                    vbN[Li+vlU7X+-jNihC$!FVioRBBQjgsTGgyerXAuklwx9_QMw>[g0GhsN\
                    qp[?3{KTYRhxcXZ6u7UTB9ACdb41fRQ=#JWv=N!+og<-(zSK>!LHF1KU4D\
                    XdE7;870Io>B#hII->M![C[fnO%W;=8u3uSQ!qzHYk=^CZJpPh7Ha!hOgv\
                    WP1*]MN9<VDh7iJiYg,hh;TlVLB]w+UB[0S<G05$7=Tf,4PO&Z=M6}<aB%\
                    8}eDEj2z2^-$!k}AC-fA5nLjEZRjhBt-AN@^)ei{a28e>1(Zlb(a1[{di,\
                    =8h-?-qki%iB(stPsI>l)*K74u>y!h}u56;P+FVW7%%X3uLjkCwHE6P]KV\
                    =>+{1mhzaFIvzYWl-i0_l<*8V_)+^tdHbi*,S$rt}k]!8*{YqGrmi9!dzo\
                    ULNEQ)K}T8hdkuZ6,=,qmcb9iY4(7UQk%Cr9EbZ<xi>VshtDDB(Q(Vlk#+\
                    !dl*8;r<1v9dv^~"))}, {
                 Directive(RGBColor(0, 0, 0.75), Dashing(Large)), 
                 LineBox(
                  CompressedData(
                    "1:c$,&}eN4=89LFnn-Tm&;1Ie>_I3q*0!m#uCh>44YLTiPVv9-uT7H8VT\
                    $YUjIoq0H+Tk}w7v*X9P9!{b1usC%da+U6P-^[isDdG41-XFgE{,1[U,+2\
                    ?IpU>]-=QGAna@tqo^WW-$s!W?P(^dkynDd41e!}XIp)Pv(iMPE3mKUo2?\
                    %UAR7F(qky!S@%Nm!7YYA2u)ADG[oW$Rk,bMN]n(39BV(i;g-j}HY$_A8=\
                    v-ufCa%z7g=X$fo>aaQ<#u;D2rdwC6TAuZkTG}J0sg1oWy!#>(vjQ1KqJ@\
                    VqhY!]Cb1#?}kMd&Yq@!r7{E2q7XEim2(2uj{LTh;0W@jBBE*+TVMGS}uY\
                    pCGy-zCH0!H{-X%p@=iWwjW)L?},_hrTr&obTWPyJijsS)}NRA#&^O7r9P\
                    5,v@_m!$mPOqjpc2u-UFtcM=TFiW}%BK=!4vtV[<Ki)bk(2JOhw>PO57;+\
                    QQR%UsQCuOWM}a;wj$,=g-u-t6zQP#p]sRa7Vq[V}dlU)4USY7UYxO%UwL\
                    pC&67?=lB0ock,leh!m4v#-_A*x}vUkcS]N_vo1OLqJKQA6pw4q9N4ZFc#\
                    SCV#{<N0HSd,],3L=Rw=Q^d+A<eU,}-zz87p%djV}h&BSQ#UTwFAa(ERB#\
                    jEmS&Dh0yw%P=9&v1wmAp[fa3RBt*wsVATCVq8In1(r_TMm^!hc%$VQR7#\
                    XJCc^raV_!T(j&CN^w?]d,H?JpUd}}#Ta{PENPgCB*e9dx{lnaRsKbg;m!\
                    ^p7E)%M?n_CJF}#qgMt)&WBMN#^im><DRXAM+jMP!*Emr*ku(k;93XC+to\
                    6M(BLnIjmn$@Fu,U*nAb3tf>gBtYtn_;Jiz-b?RHpm#M(bwTt&ziV1)J-?\
                    2=A>(cDgm+U5N{t6t,P<rq2YQ}S7@&1Hx!Tj6B,-<]dVp-Db9Cw+E*4vcm\
                    h}rjhg?r]8fWi7zBOYE8Xr96V{L=c<{31-CejxxCsX7c?j+4!EFrMl^63^\
                    Flv-t#]XY1iR(&%rj-$1NRh^>8;-^ua^VN;d)%C2(,b,HiGPovBo^_l&zA\
                    -IA[EXv;ho_+5j7#ePKOtaqR2gEfLt(uIi{3*@w2i71h=K~~~"))}}, 
               AspectRatio -> NCache(1/GoldenRatio, 0.6180339887498948`), 
               Axes -> True, PlotRange -> 
                NCache({0 .. 5, -0.9999967038406539` .. 1.0}, {
                  0.0 .. 5.0, -0.9999967038406539` .. 1.0}), 
               PlotRangePadding :> {None, Scaled(0.04)})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All)}, All), SectionGroup({Section("Scope", "ExampleSection"), 
        Section("No dashing:", "ExampleText"), 
        SectionGroup({
          Section(BoxData({"Graphics", "(", {
              "{", {{"Dashing", "(", {"{", "}"}, ")"}, ",", {
                "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                   "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ")"}), 
           "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData(GraphicsBox({Dashing({}), LineBox({{0, 0}, {2, 1}})})), 
           "Output", SectionGenerated -> True, SectionLabel -> "out [1]:")}, 
         All), SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section(TextData({"For absolute or scaled ", StyleBox("d", "Arg"), 
             ", ", TemplateBox({"Dashing"}, "ReferenceHyperlink"), "(", 
             StyleBox("d", "Arg"), ") is equivalent to ", 
             TemplateBox({"Dashing"}, "ReferenceHyperlink"), "({", 
             StyleBox("d", "Arg"), ", ", StyleBox("d", "Arg"), "}):"}), 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Table", "(", {
                {"Graphics", "(", {
                  {"{", {{"Dashing", "(", "d", ")"}, ",", {
                     "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                        "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                   "ImageSize", "\[Rule]", "Tiny"}}, ")"}, ",", {
                 "d", "\[Rule]", {"{", {"1", ",", "2", ",", "4", ",", "8"}, 
                  "}"}}}, ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData({
               "{", {GraphicsBox({Dashing(1), LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic}), ",", 
                GraphicsBox({Dashing(2), LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic}), ",", 
                GraphicsBox({Dashing(4), LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic}), ",", 
                GraphicsBox({Dashing(8), LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic})}, "}"}), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All), SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section(
           TextData({"Use ", TemplateBox({"Scaled"}, "ReferenceHyperlink"), 
             " to scale with the overal plot width:"}), "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Table", "(", {
                {"Graphics", "(", {
                  {"{", {{"Dashing", "(", {"Scaled", "(", "r", ")"}, ")"}, 
                    ",", {"Line", "(", {
                      "{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                        "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                   "ImageSize", "\[Rule]", "Tiny"}}, ")"}, ",", {
                 "r", "\[Rule]", {"{", {"0.01", ",", "0.05", ",", "0.1", ",", 
                   "0.2"}, "}"}}}, ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData({
               "{", {
                GraphicsBox({Dashing(Scaled(0.01)), 
                  LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
                ",", GraphicsBox({Dashing(Scaled(0.05)), 
                  LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
                ",", GraphicsBox({Dashing(Scaled(0.1)), 
                  LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
                ",", GraphicsBox({Dashing(Scaled(0.2)), 
                  LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic})}, "}"}), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All), SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section("Specify offsets for the dash segments:", "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Table", "(", {
                {"Graphics", "(", {
                  {"{", {{"{", {"Red", ",", {"Thickness", "(", "5", ")"}, ",", 
                      {"Dashing", "(", {{"{", {"10", ",", "5"}, "}"}, ",", 
                        "o"}, ")"}, ",", {"Line", "(", {
                        "{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                          "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", 
                    {"Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                        "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                   "ImageSize", "\[Rule]", "Tiny"}}, ")"}, ",", {
                 "o", "\[Rule]", {"{", {{"-", "5"}, ",", "0", ",", "5"}, 
                  "}"}}}, ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData({
               "{", {
                GraphicsBox({{RGBColor(1, 0, 0), Thickness(5), 
                   Dashing({10, 5}, -5), LineBox({{0, 0}, {2, 1}})}, 
                  LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
                ",", GraphicsBox({
                  {RGBColor(1, 0, 0), Thickness(5), Dashing({10, 5}, 0), 
                   LineBox({{0, 0}, {2, 1}})}, LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic}), ",", 
                GraphicsBox({{RGBColor(1, 0, 0), Thickness(5), 
                   Dashing({10, 5}, 5), LineBox({{0, 0}, {2, 1}})}, 
                  LineBox({{0, 0}, {2, 1}})}, 
                 ImageSize -> {Tiny, Automatic})}, "}"}), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All), SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section("Use round cap-forms for the dash segments:", 
           "ExampleText"), SectionGroup({
            Section(BoxData({"Graphics", "(", {
                "{", {
                 {"Dashing", "(", {
                   {"{", {"0", ",", "20", ",", "10", ",", "20"}, "}"}, ",", 
                   "0", ",", {"CapForm", "(", StringBox("\"Round\""), ")"}}, 
                  ")"}, ",", {"{", {"Red", ",", {"Thickness", "(", "10", ")"}, 
                   ",", {"Line", "(", {
                     "{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                       "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                  "{", {"Black", ",", "Thin", ",", {
                    "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                       "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}}, "}"}, 
               ")"}), "Input", SectionLabel -> "in [1]:"), 
            Section(
             BoxData(GraphicsBox({
                Dashing({0, 20, 10, 20}, 0, CapForm("Round")), {
                 RGBColor(1, 0, 0), Thickness(10), LineBox({{0, 0}, {2, 1}})}, 
                {GrayLevel(0), Thin, LineBox({{0, 0}, {2, 1}})}})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 
         All)}, 1), SectionGroup({
        Section("Properties & Relations", "ExampleSection"), 
        Section(
         TextData({"Use ", TemplateBox({"Dashed"}, "ReferenceHyperlink"), 
           ", ", TemplateBox({"Dotted"}, "ReferenceHyperlink"), ", or ", 
           TemplateBox({"DotDashed"}, "ReferenceHyperlink"), 
           " for predefined dashing patterns:"}), "ExampleText"), 
        SectionGroup({
          Section(
           BoxData({"Table", "(", {
              {"Graphics", "(", {
                {"{", {"d", ",", {"Line", "(", {
                    "{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                      "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ",", {
                 "ImageSize", "\[Rule]", "Tiny"}}, ")"}, ",", {
               "d", "\[Rule]", {"{", {"Dashed", ",", "Dotted", ",", 
                 "DotDashed"}, "}"}}}, ")"}), "Input", 
           SectionLabel -> "in [1]:"), 
          Section(
           BoxData({
             "{", {
              GraphicsBox({Dashing({Small, Small}), 
                LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
              ",", GraphicsBox({Dashing({0, Small}), 
                LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic}), 
              ",", GraphicsBox({Dashing({0, Small, Small, Small}), 
                LineBox({{0, 0}, {2, 1}})}, ImageSize -> {Tiny, Automatic})}, 
             "}"}), "Output", SectionGenerated -> True, 
           SectionLabel -> "out [1]:")}, All), 
        SectionGroup({
          Section(BoxData(InterpretationBox("", $Line:= 0;, 
             Editable -> False)), "ExampleDelimiter"), 
          Section(TextData({TemplateBox({"Dashing"}, "ReferenceHyperlink"), 
             " overrides the ", TemplateBox({"CapForm"}, 
              "ReferenceHyperlink"), " directive:"}), "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Graphics", "(", {
                "{", {{"Dashing", "(", {"{", {"20", ",", "15"}, "}"}, ")"}, 
                 ",", {"CapForm", "(", StringBox("\"Round\""), ")"}, ",", {
                  "\n", {"Thickness", "(", "10", ")"}}, ",", {
                  "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                     "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ")"}), 
             "Input", SectionLabel -> "in [1]:"), 
            Section(BoxData(GraphicsBox({Dashing({20, 15}), CapForm("Round"), 
                Thickness(10), LineBox({{0, 0}, {2, 1}})})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [1]:")}, All), 
          Section(TextData({"Use the third argument of ", 
             TemplateBox({"Dashing"}, "ReferenceHyperlink"), 
             " to specify a cap-form for all dashes:"}), "ExampleText"), 
          SectionGroup({
            Section(BoxData({"Graphics", "(", {
                "{", {{"Dashing", "(", {{"{", {"20", ",", "15"}, "}"}, ",", 
                   "0", ",", StringBox("\"Round\"")}, ")"}, ",", {
                  "\n", {"Thickness", "(", "10", ")"}}, ",", {
                  "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                     "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ")"}), 
             "Input", SectionLabel -> "in [2]:"), 
            Section(BoxData(GraphicsBox({Dashing({20, 15}, 0, "Round"), 
                Thickness(10), LineBox({{0, 0}, {2, 1}})})), "Output", 
             SectionGenerated -> True, SectionLabel -> "out [2]:")}, All)}, 
         All)}, 1), SectionGroup({
        Section("Possible Issues", "ExampleSection"), 
        Section("Line caps add to the length of individual dashes:", 
         "ExampleText"), SectionGroup({
          Section(
           BoxData({"Table", "(", {
              {"Graphics", "(", {
                "{", {{"Dashing", "(", {{"{", {"20", ",", "8"}, "}"}, ",", 
                   "0", ",", {"CapForm", "(", "cap", ")"}}, ")"}, ",", {
                  "Thickness", "(", "10", ")"}, ",", {
                  "Line", "(", {"{", {{"{", {"0", ",", "0"}, "}"}, ",", {
                     "{", {"2", ",", "1"}, "}"}}, "}"}, ")"}}, "}"}, ")"}, 
              ",", {"cap", "\[Rule]", {
                "{", {"None", ",", StringBox("\"Round\"")}, "}"}}}, ")"}), 
           "Input", SectionLabel -> "in [1]:"), 
          Section(
           BoxData({
             "{", {GraphicsBox({Dashing({20, 8}, 0, CapForm(None)), 
                Thickness(10), LineBox({{0, 0}, {2, 1}})}), ",", 
              GraphicsBox({Dashing({20, 8}, 0, CapForm("Round")), 
                Thickness(10), LineBox({{0, 0}, {2, 1}})})}, "}"}), "Output", 
           SectionGenerated -> True, SectionLabel -> "out [1]:")}, All)}, 1), 
      Section("", "SectionFooterSpacer")}, All), 
    SectionGroup({Section("See Also", "SeeAlsoSection"), 
      Section(TextData({TemplateBox({"Dashed"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"Dotted"}, 
          "ReferenceHyperlink"), "\[NonBreakingSpace]\[Dot] ", 
         TemplateBox({"DotDashed"}, "ReferenceHyperlink"), 
         "\[NonBreakingSpace]\[Dot] ", TemplateBox({"Thickness"}, 
          "ReferenceHyperlink"), "\[NonBreakingSpace]\[Dot] ", 
         TemplateBox({"CapForm"}, "ReferenceHyperlink")}), "SeeAlso")}, All)}, 
   All)}, StyleDefinitions -> "Reference.pmathdoc", Visible -> True)