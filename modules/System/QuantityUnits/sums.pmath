BeginPackage("System`QuantityUnits`")

Begin("System`QuantityUnits`Private`")


QuantityPlus(~~~)::= $Failed
QuantityPlus(HoldPattern(Quantity(~mag1, ~unit)), HoldPattern(Quantity(~mag2, ~unit))) ::= newValidQuanitity(mag1 + mag2, unit)
Function QuantityPlus(HoldPattern(Quantity(~mag1, ~unit1)), HoldPattern(Quantity(~mag2, ~unit2))) {
    With(fund1 := unit1 |> Replace(~s:String :> $AllUnits[s, "FundamentalUnitValue"], 0..))
    With(fund2 := unit2 |> Replace(~s:String :> $AllUnits[s, "FundamentalUnitValue"], 0..))

    With(ratio:= fund2 / fund1)

    If(!ratio.IsReal) {
        Message(Quantity::compat, unit1, unit2)
        Return($Failed)
    }

    %newValidQuanitity(mag1 + mag2 * ratio, unit1)
    ConsolidateValidQuantityUnits(mag1 + mag2 * ratio, unit1, unit2)
}


End()

EndPackage()
