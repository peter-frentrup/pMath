BeginPackage("System`QuantityUnits`")

Begin("System`QuantityUnits`Private`")


QuantityPlus(~~~)::= $Failed
QuantityPlus(HoldPattern(Quantity(~mag1, ~unit)), HoldPattern(Quantity(~mag2, ~unit))) ::= newValidQuanitity(mag1 + mag2, unit)
Function QuantityPlus(HoldPattern(Quantity(~mag1, ~unit1)), HoldPattern(Quantity(~mag2, ~unit2))) {
    With(fund1 := unit1 |> Replace(~s:String :> $AllUnits[s, "FundamentalUnitValue"], 0..))
    With(fund2 := unit2 |> Replace(~s:String :> $AllUnits[s, "FundamentalUnitValue"], 0..))

    With(ratio:= fund2 / fund1)

    If(!ratio.IsReal) {
        Message(Quantity::compat, unit1, unit2)
        Return($Failed)
    }

    % TODO: choose best from unit1 and unit2 so that
    % Quantity(1, "Meters") + Quantity(4, "Centimeters") 
    % gives Quantity(104, "Centimeters") instead of Quantity(26/25, "Meters")
    newValidQuanitity(mag1 + mag2 * ratio, unit1)
}


End()

EndPackage()
