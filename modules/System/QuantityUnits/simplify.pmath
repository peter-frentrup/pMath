BeginPackage("System`QuantityUnits`")

ConsolidateValidQuantityUnits

Begin("System`QuantityUnits`Private`")


Function ConsolidateValidQuantityUnits(~mag, ~unit) {
    If(IsNumeric(unit)) {
        Return(mag * unit)
    }

    With(unitCases:= reducedUnitsCases(unit))
    
    If(Length(unitCases) === 1) {
        With(newUnit:= First(unitCases))

        If(IsNumeric(newUnit)) {
            Return(mag * newUnit)
        }

        With(factor:= newUnit.Replace(~:String -> 1, 0..))

        Return(newValidQuanitity(factor * mag, newUnit / factor))
    }
    
    % Choose best of the cases, which minimizes approx. Abs(Log(10, factor * mag / 100))
    % using Log(10, x/100) = Log(x)/Log(10) - 2 = (Log(2,x) - 6.6438561897747...) Log(2) / Log(10)
    With(factors:= unitCases.Replace(~:String -> 1, 0..))
    With({newMag, newUnit}:= {mag * factors, unitCases / factors} |> Transpose |> 
            SortBy(Function(Abs(Log(2.0, First(#)) - 6.65))) |> First)

    newValidQuanitity(newMag, newUnit)
}




% Reduces units that are just numeric factors of each other and gives all possible choises of such reductions.
Function reducedUnitsCases(~unit) {
    With(unitGroups:= unit |> 
        Cases(~u:String :> ($AllUnits[u, "UnitDimensions"] -> u), 0..) |> 
        Merge(Union))
    With(unitChoices:= unitGroups |> Select(Function(Length(#[2]) > 1)) |> Part(All, 2))
    With(unitNoChoice:= unitGroups |> Select(Function(Length(#[2]) === 1)) |> Part(All, 2, 1) |> Apply(Times))
    
    unitNoChoice * reducedUnitsCasesEach(unit / unitNoChoice, unitChoices)
}

reducedUnitsCasesEach(~unit, {}) ::= {unit}
reducedUnitsCasesEach(~unit, {~group, ~~~rest})::=
    reduceUnitGroup(unit, group) |> 
        Union |> 
        Map(Function(reducedUnitsCasesEach(#, {rest}))) |> 
        Flatten

reduceUnitGroup(~unit, ~group) ::= group |> 
    Map({~u :> Block {
        With(fu:= $AllUnits[u, "FundamentalUnitValue"]) 
        With(rules:= group |> Cases(Except(u)) |>
            Map(Function(# -> $AllUnits[#, "FundamentalUnitValue"]/fu * u)))
        unit |> Replace(rules, 0..)
    }})


End()

EndPackage()
