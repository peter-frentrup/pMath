BeginPackage("System`QuantityUnits`")

Begin("System`QuantityUnits`Private`")


% Returns $Failed insetad of Times @@ factorList if it cannot simplify the product. 
Function QuantityProduct(~factorList) {
    With({{{null, units}, magnitudes}, others}:= factorList |> 
        Scan({
            HoldPattern(Quantity(~mag, ~unit)) ? IsValidQuantity :> (Emit(unit, UNIT); Emit(mag, MAGNITUDE)),
            ~x ? IsNumeric :> Emit(x, MAGNITUDE),
            ~x :> Emit(x, OTHER)
        }) |> 
        Gather(UNIT) |> 
        Gather(MAGNITUDE) |> 
        Gather(OTHER))
    
    If(units === {}) {
        Return($Failed)
    }
    
    If(Length(units) === 1) {
        If(Length(magnitudes) <= 1) {
            Return($Failed)
        }
        Return((Times @@ others) * newValidQuanitity(Times @@ magnitudes, units.First))
    }
    
    (Times @@ others) * ConsolidateValidQuantityUnits(Times @@ magnitudes, Times @@ units)
}


End()

EndPackage()
