BeginPackage("System`QuantityUnits`")

Begin("System`QuantityUnits`Private`")



simpleUnitDimensionName(~s)::= s

Function simpleUnitDimensionCanonicalUnit(~dimName:String) {

    % Slow search:
    With(possibleResults:= $AllUnits |> Cases((~name -> {~~~, "UnitDimensions" -> dimName, ~~~}) :> name,1) |> Sort)

    Message(simpleUnitDimensionCanonicalUnit::unspecified, dimName, possibleResults)

    If(possibleResults === {}) {
        Return(simpleUnitDimensionCanonicalUnit(dimName):= None)
    } Else {
        Return(simpleUnitDimensionCanonicalUnit(dimName):= First(possibleResults))
    }
}


unitKindLocalizedDescription(~lang, ~~)::= Lookup(allLocalizedUnitKindDescriptions(lang), "UnknownUnitType")
unitKindLocalizedDescription(~lang, UnitKindObject(~s:String))::= Lookup(allLocalizedUnitKindDescriptions(lang), s, s)
unitKindLocalizedDescription(~lang, UnitKindObject(~, l: {(~ -> ~)**}))::= Row({Lookup(allLocalizedUnitKindDescriptions(lang), "UnknownUnitType"), ": ", l.Map({(~u -> ~n) :> simpleUnitDimensionName(u)^If(n < 0, HoldForm(n), n)}) |> Riffle("-") |> Row})
(~uko: UnitKindObject)("Description")::=                        unitKindLocalizedDescription("English", uko)
(~uko: UnitKindObject)("LocalizedDescription", ~lang:String)::= unitKindLocalizedDescription(lang,      uko)

unitKindName(~~)::= None
unitKindName(UnitKindObject(~s:String))::= s
(~uko: UnitKindObject)("Name")::= unitKindName(uko)

unitKindCanonicalUnit(~~~):= $Failed
unitKindCanonicalUnit(UnitKindObject(~, l: {(~ -> ~)**}))::= l.Map({(~u -> ~n) :> simpleUnitDimensionCanonicalUnit(u)^n}).Apply(Times)
unitKindCanonicalUnit(UnitKindObject("Dimensionless")):= 1
(~uko: UnitKindObject)("CanonicalUnit")::= unitKindCanonicalUnit(uko)

unitKindDimensions(~~~):= $Failed
unitKindDimensions(UnitKindObject(~, l: {(~ -> ~)**}))::= l
unitKindDimensions(UnitKindObject("Dimensionless")):= {}
(~uko: UnitKindObject)("UnitDimensions")::= unitKindDimensions(uko)
UnitKindObject /: UnitDimensions(~uko: UnitKindObject)::= unitKindDimensions(uko)


UnitKindObject /: MakeBoxes(HoldPattern(uko: UnitKindObject(~~args)))::= 
    HoldComplete(args) |> Map(MakeBoxes) |> Apply(List) |> TemplateBox("UnitKindObject")

UnitKindObject /: Format(HoldPattern(uko: UnitKindObject(~~args)))::= unitKindName(uko)


unitKindFromUnitDimensions(~)::=               UnitKindObject("UnknownUnitType")
unitKindFromUnitDimensions({})::=              UnitKindObject("Dimensionless")
unitKindFromUnitDimensions(l: {(~ -> ~)**})::= UnitKindObject("UnknownUnitType", l)


Function makeCanonicalUnit(~unit, ~name) {
    With(dim:= Sort @ UnitDimensions(unit))
    With(uko:= UnitKindObject(name))
    unitKindFromUnitDimensions(dim):= uko
    unitKindDimensions(uko):= dim
    unitKindCanonicalUnit(uko):= unit
}

Function makeCanonicalFundamentalUnit(~unit:String, ~name) {
    With(dimName:= $AllUnits[unit, "UnitDimensions"])
    If(!IsMatch(dimName, ~:String)) { Message(makeCanonicalFundamentalUnit::composite, unit) }
    With(uko:= UnitKindObject(name))
    simpleUnitDimensionName(dimName):= name
    simpleUnitDimensionCanonicalUnit(dimName):= unit
    unitKindFromUnitDimensions({dimName -> 1}):= uko
    unitKindDimensions(uko):= {dimName -> 1}
    unitKindCanonicalUnit(uko):= unit
}

makeCanonicalFundamentalUnit("Meters",                  "Length")
makeCanonicalUnit("Meters"^2,                           "Area")
makeCanonicalUnit("Meters"^3,                           "Volume")
makeCanonicalFundamentalUnit("Seconds",                 "Time")
makeCanonicalUnit(1/"Seconds",                          "Frequency")
makeCanonicalUnit("Meters" / "Seconds",                 "Velocity")
makeCanonicalUnit("Meters" / "Seconds"^2,               "Acceleration")
makeCanonicalFundamentalUnit("Kilograms",               "Mass")
makeCanonicalUnit("Kilograms" * "Meters" / "Seconds",   "Momentum")
makeCanonicalUnit("Kilograms" / "Meters"^2,             "AreaDensity")
makeCanonicalUnit("Kilograms" / "Meters",               "LinearMassDensity")
makeCanonicalUnit("Meters" / "Kilograms",               "ReciprocalLinearMassDensity")
makeCanonicalUnit("Newtons",                            "Force")
makeCanonicalUnit("Joules",                             "Energy") % Caution: 1 J = 1 N m, but J is only used for energy, while N m is also used for torque. Cannot tell the difference just by unit dimensions
makeCanonicalUnit("Watts",                              "Power")
makeCanonicalUnit("Pascals",                            "Pressure")
makeCanonicalUnit("Kilograms" * "Meters"^2 / "Seconds", "AngularMomentum")
makeCanonicalUnit("Kilograms" * "Meters"^2,             "MomentOfInertia")
makeCanonicalUnit("Meters"^3 / "Seconds",               "Flow") % volumetric flow rate
makeCanonicalUnit("Kilograms" / "Meters"^3,             "MassDensity")
makeCanonicalUnit("Meters"^3 / "Kilograms",             "SpecificVolume")
makeCanonicalFundamentalUnit("Kelvins",                 "Temperature")
makeCanonicalFundamentalUnit("Amperes",                 "ElectricCurrent")
makeCanonicalUnit("Amperes" / "Meters"^2,               "ElectricCurrentDensity")
makeCanonicalUnit("Amperes" * "Meters"^2,               "MagneticMoment")
makeCanonicalUnit("Joules" / "Meters"^2,                "SurfaceTension")
makeCanonicalUnit("Coulombs",                           "Charge")
makeCanonicalUnit("Coulombs" / "Meters"^2,              "SurfaceChargeDensity")
makeCanonicalUnit("Coulombs" / "Meters"^3,              "ElectricChargeDensity")
makeCanonicalUnit("Volts",                              "ElectricPotential")
makeCanonicalUnit("Volts" / "Meters",                   "ElectricFieldStrength")
makeCanonicalUnit("Amperes" / "Meters",                 "MagneticFieldStrength")
makeCanonicalUnit("Ohms",                               "ElectricResistance")
makeCanonicalUnit("Siemens",                            "ElectricConductance")
makeCanonicalUnit("Ohms" * "Meters",                    "ElectricResistivity")
makeCanonicalUnit("Siemens" / "Meters",                 "ElectricConductivity")
makeCanonicalUnit("Farads",                             "Capacitance")
makeCanonicalUnit("Webers",                             "MagneticFlux")
%makeCanonicalUnit("Henrys",                             "Inductance")
makeCanonicalUnit("Teslas",                             "MagneticFluxDensity")
makeCanonicalUnit("Joules" / "Kelvins",                 "HeatCapacity")
makeCanonicalUnit("Joules" / "Kilograms" / "Kelvins",   "SpecificHeatCapacity")
%makeCanonicalUnit("Sturgeons",                          "MagneticReluctance")
%makeCanonicalUnit(1 / "Henrys",                         "MagneticReluctance")
makeCanonicalFundamentalUnit("Moles",                    "Amount")
makeCanonicalUnit("Moles" / "Liters",                    "ConcentrationByVolume")
makeCanonicalUnit("Moles" / "Kilograms",                 "ConcentrationByMass")
makeCanonicalUnit("Meters"^3 / "Moles",                  "MolarVolume")
makeCanonicalUnit("Grams" / "Moles",                     "MolarMass")
makeCanonicalUnit("Pascals" * "Seconds",                 "Viscosity")
makeCanonicalUnit("Lumens" * "Seconds",                  "LuminousEnergy")
makeCanonicalUnit("Lumens",                              "LuminousFlux")
makeCanonicalFundamentalUnit("Candelas",                 "LuminousIntensity")
makeCanonicalUnit("Candelas" / "Meters"^2,               "Luminance")
%makeCanonicalUnit("Lumens" / "Meters"^2,                 "Illuminance")
%makeCanonicalUnit("Lux",                                 "Illuminance")
%makeCanonicalUnit("Lux" * "Seconds",                    "LuminousExposure")
makeCanonicalUnit("Lumens" / "Watts",                    "LuminousEfficacy")
makeCanonicalUnit("Watts" / "Meters"   / "Kelvins",      "ThermalConductivity")
makeCanonicalUnit("Watts" / "Meters"^2 / "Kelvins",      "ThermalConductance")
makeCanonicalUnit("Kelvins" / "Watts",                   "ThermalResistance")
makeCanonicalUnit("Meters"   * "Kelvins" / "Watts",      "ThermalResistivity")
makeCanonicalUnit("Meters"^2 * "Kelvins" / "Watts",      "ThermalInsulance")
makeCanonicalUnit("Joules" / "Kilograms",                "SpecificEnergy")
makeCanonicalUnit("Watts" / "Meters"^2,                  "HeatFluxDensity")
makeCanonicalUnit("Joules" / "Moles",                    "MolarEnergy")
makeCanonicalUnit("Joules" / "Moles" / "Kelvins",        "MolarHeatCapacity")
makeCanonicalFundamentalUnit("Bits",                     "Information")
makeCanonicalFundamentalUnit("Radians",                  "DimensionlessAngle")


$TranslationDirectory:= $Input.DirectoryName
Function allLocalizedUnitKindDescriptions(~lang:String) {
    With(found:= $TranslationDirectory |> FileNames("unit-kind-descriptions." ++ lang ++ ".pmath"))
    If(found === {}) {
        Return(allLocalizedUnitKindDescriptions("English"))
    }

    % TODO: ensure delay loading works in SecuredEvaluation
    Return(allLocalizedUnitKindDescriptions(lang):= Get(First(found)))
}

UnitKind(~~~args) /? (IsValidArgumentCount(UnitKind, Length(Hold(args)), 1, 1); False) := $Failed
UnitKind(~unit)::= With({dims:= tryGetUnitDimensions(unit)}, unitKindFromUnitDimensions(Sort(dims)) /? dims =!= $Failed)


End()

EndPackage()
