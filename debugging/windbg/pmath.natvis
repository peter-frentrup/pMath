<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="pmath_t">
		<DisplayString Condition="((s.tag &amp; 0x7FF00000) != 0x7FF00000)">{as_double}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FFFFFFF">invalid (locked) {s.u.as_int32}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000">magic {s.u.as_int32}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF20000">{s.u.as_int32}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF30000">{(wchar_t*)s.u.as_chars,[0]}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF40000">{(wchar_t*)s.u.as_chars,[1]}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF50000">{(wchar_t*)s.u.as_chars,[2]}</DisplayString>
		<DisplayString Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; ((as_bits * 0x1000) == 0)">(null)</DisplayString>
		<DisplayString Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000)">{*(pmath.dll!_pmath_t*)((as_bits * 0x1000) / 0x1000)}</DisplayString>
		<DisplayString>magic {s.tag,x} value {s.u.as_int32,x}</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; ((as_bits * 0x1000) != 0)">
				*(pmath.dll!_pmath_t*)((as_bits * 0x1000) / 0x1000)
			</ExpandedItem>
			<Synthetic Name="length" Condition="s.tag == 0x7FF30000" ExcludeView="simple">
				<DisplayString>0</DisplayString>
			</Synthetic>
			<Synthetic Name="length" Condition="s.tag == 0x7FF40000" ExcludeView="simple">
				<DisplayString>1</DisplayString>
			</Synthetic>
			<Synthetic Name="length" Condition="s.tag == 0x7FF50000" ExcludeView="simple">
				<DisplayString>2</DisplayString>
			</Synthetic>
		</Expand>
	</Type>
	<!--<Type Name="_pmath_t*">
		<DisplayString>{*(_pmath_t*)((((uint64_t)this) * 0x1000) / 0x1000)}</DisplayString>
		<Expand>
			<Item Name="[deref]" Condition="((uint64_t)this &gt;&gt; 52) == 0xFFF">
				*(_pmath_t*)((((uint64_t)this) * 0x1000) / 0x1000)
			</Item>
		</Expand>
	</Type>-->
	<Type Name="_pmath_t">
		<DisplayString Condition="type_shift ==  0">{*(pmath.dll!_pmath_mp_float_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  1">{*(pmath.dll!_pmath_mp_int_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  2">{*(pmath.dll!_pmath_quotient_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  3">{*(pmath.dll!_pmath_string_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  4">{*(pmath.dll!_pmath_symbol_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  5">{*(pmath.dll!_pmath_expr_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  6">{*(pmath.dll!_pmath_expr_part_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  7">{*(pmath.dll!_pmath_multirule_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  8">{*(pmath.dll!_pmath_custom_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  9">{*(pmath.dll!_pmath_blob_t*)this}</DisplayString>
		<DisplayString Condition="type_shift == 10">{*(pmath.dll!_pmath_packed_array_t*)this}</DisplayString>
		<DisplayString Condition="type_shift == 11">{*(pmath.dll!_pmath_interval_t*)this}</DisplayString>
		<DisplayString>object tag {type_shift}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[deref]" Condition="type_shift == 0">
				*(pmath.dll!_pmath_mp_float_t*)this
			</Item>
			
			<Item Name="[deref]" Condition="type_shift == 1">
				*(pmath.dll!_pmath_mp_int_t*)this
			</Item>
			
			<ExpandedItem Condition="type_shift == 2">
				*(pmath.dll!_pmath_quotient_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 3">
				*(pmath.dll!_pmath_string_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 4">
				*(pmath.dll!_pmath_symbol_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 5">
				*(pmath.dll!_pmath_expr_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 6">
				*(pmath.dll!_pmath_expr_part_t*)this
			</ExpandedItem>
			
			<Item Name="[deref]" Condition="type_shift == 7">
				*(pmath.dll!_pmath_multirule_t*)this
			</Item>
			
			<Item Name="[deref]" Condition="type_shift == 8">
				*(pmath.dll!_pmath_custom_t*)this
			</Item>
			
			<Item Name="[deref]" Condition="type_shift == 9">
				*(pmath.dll!_pmath_blob_t*)this
			</Item>
			
			<ExpandedItem Condition="type_shift == 10">
				*(pmath.dll!_pmath_packed_array_t*)this
			</ExpandedItem>
			
			<Item Name="[deref]" Condition="type_shift == 11">
				*(pmath.dll!_pmath_interval_t*)this
			</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_mp_float_t">
		<DisplayString>mp float</DisplayString>
	</Type>
	<Type Name="_pmath_mp_int_t">
		<DisplayString>mp int</DisplayString>
	</Type>
	<Type Name="_pmath_quotient_t">
		<DisplayString>quotient</DisplayString>
		<Expand>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_quotient_t*)this,!</Item>
			<Item Name="numerator">numerator</Item>
			<Item Name="denominator">denominator</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_string_t">
		<DisplayString Condition="buffer == 0">{(wchar_t*)((char*)this + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)),[length]na}</DisplayString>
		<DisplayString Condition="buffer != 0">{(wchar_t*)((char*)buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + capacity_or_start,[length]na}</DisplayString>
		<StringView    Condition="buffer == 0" >(wchar_t*)((char*)this + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)),[length]na</StringView>
		<StringView    Condition="buffer != 0" >(wchar_t*)((char*)buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + capacity_or_start,[length]na</StringView>
		<Expand HideRawView="true">
			<!--
			<Item Name="[header size]">((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)</Item>
			-->
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_string_t*)this,!</Item>
			<Item Name="length" ExcludeView="simple">length</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_symbol_t">
		<DisplayString>{name,sub}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_symbol_t*)this,!</Item>
			<Synthetic Name="attributes">
				<DisplayString>{attributes,b}</DisplayString>
				<Expand>
					<Synthetic Name="Protected"        Condition="attributes &amp;     0x1"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldFirst"        Condition="attributes &amp;     0x2"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldRest"         Condition="attributes &amp;     0x4"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Symmetric"        Condition="attributes &amp;     0x8"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Associative"      Condition="attributes &amp;    0x10"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NHoldFirst"       Condition="attributes &amp;    0x20"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NHoldRest"        Condition="attributes &amp;    0x40"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Temporary"        Condition="attributes &amp;    0x80"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Listable"         Condition="attributes &amp;   0x100"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="DeepHoldAll"      Condition="attributes &amp;   0x200"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldAllComplete"  Condition="attributes &amp;   0x400"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="OneIdentity"      Condition="attributes &amp;   0x800"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="ThreadLocal"      Condition="attributes &amp;  0x1000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NumericFunction"  Condition="attributes &amp;  0x2000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="ReadProtected"    Condition="attributes &amp;  0x4000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="SequenceHold"     Condition="attributes &amp;  0x8000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Removed"          Condition="attributes &amp; 0x10000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="DefiniteFunction" Condition="attributes &amp; 0x20000"><DisplayString>yes</DisplayString></Synthetic>
				</Expand>
			</Synthetic>
			<Item Name="value">value</Item>
			<Item Name="rules">*(pmath.dll!_pmath_symbol_rules_t*)rules._data</Item>
			<Item Name="prev">*prev</Item>
			<Item Name="next">*next</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_expr_t">
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 1">{{ {items[1]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 2">{{ {items[1]}, {items[2]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 3">{{ {items[1]}, {items[2]}, {items[3]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 4">{{ {items[1]}, {items[2]}, {items[3]}, {items[4]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_Range_symbol[0].as_bits &amp;&amp; length == 2">{items[1]} .. {items[2]}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_DebugInfoSource_symbol[0].as_bits &amp;&amp; length == 2">at {items[2]} in {items[1]}</DisplayString>
		<DisplayString Condition="length==0">{items[0]}()</DisplayString>
		<DisplayString>{items[0]}(&lt;&lt;{length,d}&gt;&gt;)</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple" Condition="inherited.inherited.inherited.type_shift == 6">
				*(pmath.dll!_pmath_expr_part_t*)this,!
			</Item>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_expr_t*)this,!
			</Item>
			<Item Name="[length]" ExcludeView="simple">length,d</Item>
			<Item Name="debug_info" Condition="debug_ptr != 0">*debug_ptr</Item>
			<Item Name="head">items[0]</Item>
			<ArrayItems Condition="inherited.inherited.inherited.type_shift == 5">
				<Size>length</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer>&amp;items[1]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_expr_part_t">
		<DisplayString Condition="length==0">{inherited.items[0]}()</DisplayString>
		<DisplayString>{inherited.items[0]}(&lt;&lt;{inherited.length,d}&gt;&gt;)</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_expr_part_t*)this,!
			</Item>
			<Item Name="[length]" ExcludeView="simple">inherited.length,d</Item>
			<Item Name="debug_info" Condition="inherited.debug_ptr != 0">*inherited.debug_ptr</Item>
			<Item Name="head">inherited.items[0]</Item>
			<ArrayItems>
				<Size>inherited.length</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer>&amp;buffer-&gt;items[start]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_multirule_t">
		<DisplayString>multirule</DisplayString>
	</Type>
	<Type Name="_pmath_custom_t">
		<DisplayString>custom object</DisplayString>
	</Type>
	<Type Name="_pmath_blob_t">
		<DisplayString>blob</DisplayString>
	</Type>
	<Type Name="_pmath_packed_array_t">
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 1">packed double array [{sizes_and_steps[0],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 2">packed double array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 3">packed double array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d} x {sizes_and_steps[2],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions &gt;= 3">packed double array [{sizes_and_steps[0],d} x ... x {sizes_and_steps[dimensions-2],d} x {sizes_and_steps[dimensions-1],d}]</DisplayString>
		<DisplayString Condition="element_type == 1"                              >packed double array</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 1">packed int32 array [{sizes_and_steps[0],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 2">packed int32 array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 3">packed int32 array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d} x {sizes_and_steps[2],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions &gt;= 3">packed int32 array [{sizes_and_steps[0],d} x ... x {sizes_and_steps[dimensions-2],d} x {sizes_and_steps[dimensions-1],d}]</DisplayString>
		<DisplayString Condition="element_type == 2"                              >packed int32 array</DisplayString>
		<DisplayString>packed array</DisplayString>
		<Expand>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_packed_array_t*)this,!
			</Item>
			<Item Name="element_type">(pmath.dll!pmath_packed_type_t)element_type</Item>
			<Item Name="dimensions">dimensions,d</Item>
			<Synthetic Name="sizes">
				<DisplayString Condition="dimensions == 1">[{(intptr_t)sizes_and_steps[0]}]</DisplayString>
				<DisplayString Condition="dimensions == 2">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]}]</DisplayString>
				<DisplayString Condition="dimensions == 3">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]}]</DisplayString>
				<DisplayString Condition="dimensions == 4">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]}]</DisplayString>
				<DisplayString Condition="dimensions == 5">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]} x {(intptr_t)sizes_and_steps[4]}]</DisplayString>
				<DisplayString Condition="dimensions == 6">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]} x {(intptr_t)sizes_and_steps[4]} x {(intptr_t)sizes_and_steps[5]}]</DisplayString>
				<DisplayString Condition="dimensions &gt; 6">[{(intptr_t)sizes_and_steps[0]} x ... x {(intptr_t)sizes_and_steps[dimensions-1]}]</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>dimensions</Size>
						<ValuePointer>&amp;sizes_and_steps[0]</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="steps">
				<DisplayString Condition="dimensions == 1">({(intptr_t)sizes_and_steps[dimensions]})</DisplayString>
				<DisplayString Condition="dimensions == 2">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]})</DisplayString>
				<DisplayString Condition="dimensions == 3">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]})</DisplayString>
				<DisplayString Condition="dimensions == 4">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]})</DisplayString>
				<DisplayString Condition="dimensions == 5">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]}, {(intptr_t)sizes_and_steps[dimensions+4]})</DisplayString>
				<DisplayString Condition="dimensions == 6">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]}, {(intptr_t)sizes_and_steps[dimensions+4]}, {(intptr_t)sizes_and_steps[dimensions+5]})</DisplayString>
				<DisplayString Condition="dimensions &gt; 6">({(intptr_t)sizes_and_steps[dimensions]}, ..., {(intptr_t)sizes_and_steps[2*dimensions-1]})</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>dimensions</Size>
						<ValuePointer>&amp;sizes_and_steps[dimensions]</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Item Name="blob">*blob</Item>
			<Item Name="[data]" Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</Item>
			<Item Name="[data]" Condition="element_type == 2">(int*)   ((char*)blob-&gt;data + offset)</Item>
			<Item Name="[data]"                              >(void*)  ((char*)blob-&gt;data + offset)</Item>
			<!--<ArrayItems Condition="dimensions == 1">
				<Size>sizes_and_steps[0]</Size>
				<ValuePointer Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</ValuePointer>
				<ValuePointer Condition="element_type == 2">(int*)((char*)blob-&gt;data + offset)</ValuePointer>
			</ArrayItems>-->
			<ArrayItems Condition="non_continuous_dimensions_count == 0">
				<Direction>Forward</Direction>
				<Rank>dimensions</Rank>
				<Size>sizes_and_steps[$i]</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</ValuePointer>
				<ValuePointer Condition="element_type == 2">(int*)((char*)blob-&gt;data + offset)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_interval_t">
		<DisplayString>interval</DisplayString>
	</Type>
	
	<Type Name="pmath_locked_t">
		<DisplayString>{_data}</DisplayString>
		<Expand>
			<ExpandedItem>_data</ExpandedItem>
		</Expand>
	</Type>
	<!--<Type Name="pmath_atomic_t">
		<DisplayString>{_data}</DisplayString>
	</Type>-->
	<Type Name="_pmath_symbol_rules_t">
		<DisplayString Condition="_messages._data == 0">{{ up={up_rules}, down={down_rules}, sub={sub_rules}, approx={approx_rules}, default={default_rules}, format={format_rules} }}</DisplayString>
		<DisplayString                                 >{{ up={up_rules}, down={down_rules}, sub={sub_rules}, approx={approx_rules}, default={default_rules}, format={format_rules}, messages={(pmath.dll!_pmath_hashtable_t*)_messages._data} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="up">up_rules</Item>
			<Item Name="down">down_rules</Item>
			<Item Name="sub">sub_rules</Item>
			<Item Name="approx">approx_rules</Item>
			<Item Name="default">default_rules</Item>
			<Item Name="format">format_rules</Item>
			<Item      Name="messages" Condition="_messages._data != 0">(pmath.dll!_pmath_hashtable_t*)_messages._data,view(EntriesOnly)</Item>
			<Synthetic Name="messages" Condition="_messages._data == 0"><DisplayString>none</DisplayString></Synthetic>
		</Expand>
	</Type>
	<Type Name="_pmath_rulecache_t">
		<DisplayString Condition="_table._data == 0 &amp;&amp; _more._data.as_bits == 0xFFF0000000000000ULL">none</DisplayString>
		<DisplayString Condition="_table._data == 0">{{ 0 literal, more={_more._data} }}</DisplayString>
		<DisplayString Condition="_table._data != 0 &amp;&amp; _more._data.as_bits == 0xFFF0000000000000ULL">{{ {((pmath.dll!_pmath_hashtable_t*)_table._data)-&gt;used_count} literal }}</DisplayString>
		<DisplayString Condition="_table._data != 0">{{ {((pmath.dll!_pmath_hashtable_t*)_table._data)-&gt;used_count} literal, more={_more._data} }}</DisplayString>
		<DisplayString>rule_cache</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem>(pmath.dll!_pmath_hashtable_t*)_table._data,view(EntriesOnly)</ExpandedItem>
			<Item Name="more" Condition="_more._data.as_bits != 0xFFF0000000000000ULL">_more._data</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_hashtable_t">
		<DisplayString>{{ count={used_count} }}</DisplayString>
		<Expand>
			<Item Name="class" ExcludeView="EntriesOnly">klass</Item>
			<Item Name="capacity" ExcludeView="EntriesOnly">capacity</Item>
			<Item Name="count" ExcludeView="EntriesOnly">used_count</Item>
			<!--<Item Name="entries" ExcludeView="EntriesOnly" Condition="klass == &amp;pmath.dll!pmath_ht_obj_class">(_pmath_object_entry_t**)table,[capacity]</Item>
			<Item Name="entries" ExcludeView="EntriesOnly">table,[capacity]</Item>-->
			<CustomListItems Condition="klass == &amp;pmath.dll!pmath_ht_obj_class" MaxItemsPerView="1000">
				<Variable Name="pBucket" InitialValue="(_pmath_object_entry_t**)table" />
				
				<Size>used_count</Size>
				<Loop>
					<If Condition="((uintptr_t)*pBucket != (uintptr_t)0) &amp;&amp; (((uintptr_t)*pBucket) + (uintptr_t)1 != (uintptr_t)0)">
						<Item Name="[{pBucket[0][0].key}]">pBucket[0][0]</Item>
					</If>
					<Exec>pBucket = pBucket + 1</Exec>  
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>
	<Type Name="_pmath_object_entry_t">
		<DisplayString>{value}</DisplayString>
	</Type>
	
	<Type Name="_memory_header_t">
		<DisplayString>debug header for {((uintptr_t)this + ((sizeof(pmath.dll!_memory_header_t) + 9 + 2*sizeof(size_t) - 1) / (2*sizeof(size_t))) * 2*sizeof(size_t)),!}</DisplayString>
		<Expand>
			<Item Name="[ptr]">(void*)((char*)this + ((sizeof(pmath.dll!_memory_header_t) + 9 + 2*sizeof(size_t) - 1) / (2*sizeof(size_t))) * 2*sizeof(size_t)),[size]</Item>
			<Item Name="size">size</Item>
			<Item Name="alloc_time">alloc_time</Item>
			<Item Name="prev">prev</Item>
			<Item Name="next">next</Item>
		</Expand>
	</Type>
</AutoVisualizer>
