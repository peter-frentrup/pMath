$$ Print an expression from its bit-pattern or a link if it has depth > 0
$$
$$   ${pmath-print-object-simple}  bits  [location]

.if (${/d:$arg1} == 0) { 
	.printf /oe "ERROR: uint64_t value expected"
}
.else {
	r $t1 = ${$arg1}
	r? $t1 = @@c++((uint64_t)@$t1)
	
	r $t0 = 0
$$	r $t1 = 0;	$$ obj.as_bits -- the argument $arg1
	r $t2 = 0
	r $t3 = 0
	r $t4 = 0
	r $t5 = 0
	r $t6 = 0
	r $t7 = 0
	r $t8 = 0
	r $t9 = 0
	r $t10 = 0
	r $t11 = 0;	$$ obj.s.tag
	r $t12 = 0;	$$ pointer of obj
	r $t13 = 0
	r $t14 = 0
	r $t15 = 0
	r $t16 = 0
	r $t17 = 0
	r $t18 = 0
	r $t19 = 0
	
	$$	r $t11 = @@c++((@$t1.s.tag))
	r $t11 = (@$t1>>0n32)
	
	.if ((@$t11 & 0x7FF00000) != 0x7FF00000) {
		$$ double
		.printf "%lf", @$t1
	}
	.elsif (@$t11 == 0x7FF20000) {
		$$ int32
		.printf "%d", ((@$t1<<32)>>32)
	}
	.elsif (@@c++((@$t11 == 0x7FF30000) || (@$t11 == 0x7FF40000) || (@$t11 == 0x7FF50000))) {
		$$ str0, str1, str2
		.push /r /q
		${pmath-print-string-buffer} /e @$t1
		.pop /r /q
	}
	.elsif ((@$t11 & 0xFFF00000) == 0xFFF00000) {
		$$ Some pointer
		
		.if ($ptrsize == 4) {
			$$	r? $t12 = @@masm(@$t1.s.u.as_pointer_32)
			r? $t12 = @@c++( (pmath!_pmath_t*)((@$t1 << 32) >> 32) )
		}
		.else {
			$$	r? $t12 = @@c++((pmath!_pmath_t *)((@$t1.as_bits << 12) >> 12))
			r? $t12 = @@c++( (pmath!_pmath_t*)((@$t1 << 12) >> 12) )
		}
		
		.if (@$t12 == 0x0) {
			.printf "/\\/"
		}
		.else {
			$$ Cannot use .elsif here, because if @$t12 = 0, then skipping
			$$ over .elsif, which dereferences @$t12, gives an error.
			
			.if (@@c++((@$t12->type_shift)) == 3) {
				$$ string
				.push /r /q
				${pmath-print-string-buffer} /e @$t1
				.pop /r /q
			}
			.elsif (@@c++((@$t12->type_shift)) == 4) {
				$$ symbol
				.push /r /q
				${pmath-print-string-buffer} @@c++(((pmath!_pmath_symbol_t*)@$t12)->name.as_bits)
				.pop /r /q
			}
			.else {
				.push /r /q
				${pmath-print-object-link} @$t1  ${/f:$arg2}
				.pop /r /q
			}
		}
	}
	.else {
		.push /r /q
		${pmath-print-object-link} @$t1  ${/f:$arg2}
		.pop /r /q
	}
}