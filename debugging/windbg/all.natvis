<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="pmath_t">
		<DisplayString Condition="((s.tag &amp; 0x7FF00000) != 0x7FF00000)">{as_double}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FFFFFFF">invalid (locked) {s.u.as_int32}</DisplayString>
		
		<DisplayString Condition="s.tag == 0x7FF10000 &amp;&amp; s.u.as_int32 == 255">undefined</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000 &amp;&amp; s.u.as_int32 == 254">{{ magic abort exception }}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000 &amp;&amp; s.u.as_int32 == 253">{{ magic parser arguments }}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000 &amp;&amp; s.u.as_int32 == 252">{{ magic parse symbols }}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000 &amp;&amp; s.u.as_int32 == 2">{{ magic pattern sequence }}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF10000">{{ magic {s.u.as_int32} }}</DisplayString>
		
		<DisplayString Condition="s.tag == 0x7FF20000">{s.u.as_int32}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF30000">{(wchar_t*)s.u.as_chars,[0]na}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF40000">{(wchar_t*)s.u.as_chars,[1]na}</DisplayString>
		<DisplayString Condition="s.tag == 0x7FF50000">{(wchar_t*)s.u.as_chars,[2]na}</DisplayString>
		<DisplayString Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; ((as_bits * 0x1000) == 0)">(null)</DisplayString>
		<DisplayString Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000)">{*(pmath.dll!_pmath_t*)((as_bits * 0x1000) / 0x1000)}</DisplayString>
		<DisplayString>magic {s.tag,x} value {s.u.as_int32,x}</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem Condition="((s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; ((as_bits * 0x1000) != 0)">
				*(pmath.dll!_pmath_t*)((as_bits * 0x1000) / 0x1000)
			</ExpandedItem>
			<Synthetic Name="length" Condition="s.tag == 0x7FF30000" ExcludeView="simple">
				<DisplayString>0</DisplayString>
			</Synthetic>
			<Synthetic Name="length" Condition="s.tag == 0x7FF40000" ExcludeView="simple">
				<DisplayString>1</DisplayString>
			</Synthetic>
			<Synthetic Name="length" Condition="s.tag == 0x7FF50000" ExcludeView="simple">
				<DisplayString>2</DisplayString>
			</Synthetic>
		</Expand>
	</Type>
	<!--<Type Name="_pmath_t*">
		<DisplayString>{*(_pmath_t*)((((uint64_t)this) * 0x1000) / 0x1000)}</DisplayString>
		<Expand>
			<Item Name="[deref]" Condition="((uint64_t)this &gt;&gt; 52) == 0xFFF">
				*(_pmath_t*)((((uint64_t)this) * 0x1000) / 0x1000)
			</Item>
		</Expand>
	</Type>-->
	<Type Name="_pmath_t">
		<DisplayString Condition="type_shift ==  0">{*(pmath.dll!_pmath_mp_float_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  1">{*(pmath.dll!_pmath_mp_int_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  2">{*(pmath.dll!_pmath_quotient_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  3">{*(pmath.dll!_pmath_string_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  4">{*(pmath.dll!_pmath_symbol_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  5">{*(pmath.dll!_pmath_expr_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  6">{*(pmath.dll!_pmath_expr_part_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  7">{*(pmath.dll!_pmath_multirule_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  8">{*(pmath.dll!_pmath_custom_t*)this}</DisplayString>
		<DisplayString Condition="type_shift ==  9">{*(pmath.dll!_pmath_blob_t*)this}</DisplayString>
		<DisplayString Condition="type_shift == 10">{*(pmath.dll!_pmath_packed_array_t*)this}</DisplayString>
		<DisplayString>object tag {type_shift}</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem Condition="type_shift == 0">
				*(pmath.dll!_pmath_mp_float_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 1">
				*(pmath.dll!_pmath_mp_int_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 2">
				*(pmath.dll!_pmath_quotient_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 3">
				*(pmath.dll!_pmath_string_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 4">
				*(pmath.dll!_pmath_symbol_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 5">
				*(pmath.dll!_pmath_expr_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 6">
				*(pmath.dll!_pmath_expr_part_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 7">
				*(pmath.dll!_pmath_multirule_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 8">
				*(pmath.dll!_pmath_custom_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 9">
				*(pmath.dll!_pmath_blob_t*)this
			</ExpandedItem>
			
			<ExpandedItem Condition="type_shift == 10">
				*(pmath.dll!_pmath_packed_array_t*)this
			</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="_pmath_mp_float_t">
		<DisplayString>{*value_new}</DisplayString>
		<Expand>
			<Item Name="mid">value_new-&gt;mid</Item>
			<Item Name="radius">value_new-&gt;rad</Item>
			<Item Name="prec">working_precision</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_mp_int_t">
		<DisplayString>mp int</DisplayString>
	</Type>
	<Type Name="_pmath_quotient_t">
		<DisplayString>quotient</DisplayString>
		<Expand>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_quotient_t*)this,!</Item>
			<Item Name="numerator">numerator</Item>
			<Item Name="denominator">denominator</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_string_t">
		<DisplayString Condition="buffer == 0">{(wchar_t*)((char*)this + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)),[length]na}</DisplayString>
		<DisplayString Condition="buffer != 0">{(wchar_t*)((char*)buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + capacity_or_start,[length]na}</DisplayString>
		<StringView    Condition="buffer == 0" >(wchar_t*)((char*)this + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)),[length]na</StringView>
		<StringView    Condition="buffer != 0" >(wchar_t*)((char*)buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + capacity_or_start,[length]na</StringView>
		<Expand HideRawView="true">
			<!--
			<Item Name="[header size]">((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)</Item>
			-->
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_string_t*)this,!</Item>
			<Item Name="debug_info" Condition="debug_info != 0" ExcludeView="simple">*debug_info</Item>
			<Item Name="length" ExcludeView="simple">length</Item>
			<ExpandedItem Condition="buffer == 0">
				(wchar_t*)((char*)this + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)),[length]na
			</ExpandedItem>
			<ExpandedItem Condition="buffer != 0">
				(wchar_t*)((char*)buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + capacity_or_start,[length]na
			</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="_pmath_symbol_t">
		<DisplayString>{name,sub}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">*(pmath.dll!_pmath_symbol_t*)this,!</Item>
			<Synthetic Name="attributes">
				<!--<DisplayString>{attributes,b}</DisplayString>-->
				<DisplayString>{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestProtected)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestHoldFirst)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestHoldRest)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestSymmetric)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestAssociative)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestNHoldFirst)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestNHoldRest)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestTemporary)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestListable)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestDeepHoldAll)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestHoldAllComplete)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestOneIdentity)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestThreadLocal)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestNumericFunction)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestReadProtected)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestSequenceHold)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestRemoved)}{*(pmath.dll!_pmath_debug_symbol_attribute_t*)&amp;attributes,view(TestDefiniteFunction)}</DisplayString>
				<Expand>
					<Synthetic Name="Protected"        Condition="attributes &amp;     0x1"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldFirst"        Condition="attributes &amp;     0x2"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldRest"         Condition="attributes &amp;     0x4"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Symmetric"        Condition="attributes &amp;     0x8"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Associative"      Condition="attributes &amp;    0x10"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NHoldFirst"       Condition="attributes &amp;    0x20"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NHoldRest"        Condition="attributes &amp;    0x40"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Temporary"        Condition="attributes &amp;    0x80"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Listable"         Condition="attributes &amp;   0x100"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="DeepHoldAll"      Condition="attributes &amp;   0x200"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="HoldAllComplete"  Condition="attributes &amp;   0x400"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="OneIdentity"      Condition="attributes &amp;   0x800"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="ThreadLocal"      Condition="attributes &amp;  0x1000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="NumericFunction"  Condition="attributes &amp;  0x2000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="ReadProtected"    Condition="attributes &amp;  0x4000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="SequenceHold"     Condition="attributes &amp;  0x8000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="Removed"          Condition="attributes &amp; 0x10000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="DefiniteFunction" Condition="attributes &amp; 0x20000"><DisplayString>yes</DisplayString></Synthetic>
					<Synthetic Name="[value]"><DisplayString>{attributes,b}</DisplayString></Synthetic>
				</Expand>
			</Synthetic>
			<Item Name="value">value</Item>
			<Item Name="rules">(pmath.dll!_pmath_symbol_rules_t*)rules._data,na</Item>
			<Item Name="prev">*prev</Item>
			<Item Name="next">*next</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_debug_symbol_attribute_t">
		<DisplayString Condition="value == 0">none</DisplayString>
		<DisplayString Condition="value &amp;     0x1" IncludeView="TestProtected"        >+ Protected</DisplayString>
		<DisplayString Condition="value &amp;     0x2" IncludeView="TestHoldFirst"        >+ HoldFirst</DisplayString>
		<DisplayString Condition="value &amp;     0x4" IncludeView="TestHoldRest"         >+ HoldRest</DisplayString>
		<DisplayString Condition="value &amp;     0x4" IncludeView="TestHoldRest"         >+ HoldRest</DisplayString>
		<DisplayString Condition="value &amp;     0x8" IncludeView="TestSymmetric"        >+ Symmetric</DisplayString>
		<DisplayString Condition="value &amp;    0x10" IncludeView="TestAssociative"      >+ Associative</DisplayString>
		<DisplayString Condition="value &amp;    0x20" IncludeView="TestNHoldFirst"       >+ NHoldFirst</DisplayString>
		<DisplayString Condition="value &amp;    0x40" IncludeView="TestNHoldRest"        >+ NHoldRest</DisplayString>
		<DisplayString Condition="value &amp;    0x80" IncludeView="TestTemporary"        >+ Temporary</DisplayString>
		<DisplayString Condition="value &amp;   0x100" IncludeView="TestListable"         >+ Listable</DisplayString>
		<DisplayString Condition="value &amp;   0x200" IncludeView="TestDeepHoldAll"      >+ DeepHoldAll</DisplayString>
		<DisplayString Condition="value &amp;   0x400" IncludeView="TestHoldAllComplete"  >+ HoldAllComplete</DisplayString>
		<DisplayString Condition="value &amp;   0x800" IncludeView="TestOneIdentity"      >+ OneIdentity</DisplayString>
		<DisplayString Condition="value &amp;  0x1000" IncludeView="TestThreadLocal"      >+ ThreadLocal</DisplayString>
		<DisplayString Condition="value &amp;  0x2000" IncludeView="TestNumericFunction"  >+ NumericFunction</DisplayString>
		<DisplayString Condition="value &amp;  0x4000" IncludeView="TestReadProtected"    >+ ReadProtected</DisplayString>
		<DisplayString Condition="value &amp;  0x8000" IncludeView="TestSequenceHold"     >+ SequenceHold</DisplayString>
		<DisplayString Condition="value &amp; 0x10000" IncludeView="TestRemoved"          >+ Removed</DisplayString>
		<DisplayString Condition="value &amp; 0x20000" IncludeView="TestDefiniteFunction" >+ DefiniteFunction</DisplayString>
		<DisplayString></DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
	<Type Name="_pmath_expr_t">
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 1">{{ {items[1]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 2">{{ {items[1]}, {items[2]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 3">{{ {items[1]}, {items[2]}, {items[3]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_List_symbol[0].as_bits &amp;&amp; length == 4">{{ {items[1]}, {items[2]}, {items[3]}, {items[4]} }}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_Range_symbol[0].as_bits &amp;&amp; length == 2">{items[1]} .. {items[2]}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_Rule_symbol[0].as_bits &amp;&amp; length == 2">{items[1]} -&gt; {items[2]}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_RuleDelayed_symbol[0].as_bits &amp;&amp; length == 2">{items[1]} :&gt; {items[2]}</DisplayString>
		<DisplayString Condition="items[0].as_bits == pmath.dll!_pmath_DebugInfoSource_symbol[0].as_bits &amp;&amp; length == 2">at {items[2]} in {items[1]}</DisplayString>
		<DisplayString Condition="length==0">{items[0]}()</DisplayString>
		<DisplayString>{items[0]}(&lt;&lt;{length,d}&gt;&gt;)</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple" Condition="inherited.inherited.inherited.type_shift == 6">
				*(pmath.dll!_pmath_expr_part_t*)this,!
			</Item>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_expr_t*)this,!
			</Item>
			<Item Name="length" ExcludeView="simple">length,d</Item>
			<Item Name="debug_info" Condition="debug_ptr != 0">*debug_ptr</Item>
			<Item Name="head">items[0]</Item>
			<ArrayItems Condition="inherited.inherited.inherited.type_shift == 5">
				<Size>length</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer>&amp;items[1]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_expr_part_t">
		<DisplayString Condition="inherited.length==0">{inherited.items[0]}()</DisplayString>
		<DisplayString>{inherited.items[0]}(&lt;&lt;{inherited.length,d}&gt;&gt;)</DisplayString>
		<Expand HideRawView="true">
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_expr_part_t*)this,!
			</Item>
			<Item Name="length" ExcludeView="simple">inherited.length,d</Item>
			<Item Name="debug_info" Condition="inherited.debug_ptr != 0">*inherited.debug_ptr</Item>
			<Item Name="head">inherited.items[0]</Item>
			<ArrayItems>
				<Size>inherited.length</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer>&amp;buffer-&gt;items[start]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_multirule_t">
		<DisplayString IncludeView="single">{pattern} :&gt; {body}</DisplayString>
		<DisplayString ExcludeView="single">multirule</DisplayString>
		<Expand HideRawView="true">
			<Item Name="pattern" IncludeView="single">pattern</Item>
			<Item Name="body"    IncludeView="single">body</Item>
			<CustomListItems MaxItemsPerView="10" ExcludeView="single">
				<Variable Name="pBucket" InitialValue="this" />
				<Variable Name="iBucket" InitialValue="-1" />
				
				<Loop>
					<Exec>iBucket = iBucket + 1</Exec>
					<Item Name="[{iBucket}]">pBucket[0],view(single)</Item>
					<Break Condition="pBucket[0].next._data.as_bits == 0xFFF0000000000000ULL" />
					<Exec>pBucket = (pmath.dll!_pmath_multirule_t*)((pBucket[0].next._data.as_bits * 0x1000) / 0x1000)</Exec>
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>
	<Type Name="_pmath_custom_t">
		<DisplayString Condition="destructor == pmath.dll!destroy_binary_file">binary file</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!destroy_text_file">text file</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!textbuffer_destroy_custom_data">text buffer</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!destroy_module">module</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!_pmath_destroy_abortable_message">abortable message</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!destroy_msg_queue">message queue</DisplayString>
		<DisplayString Condition="destructor == pmath.dll!_pmath_custom_task_destroy">task</DisplayString>
		<DisplayString>custom object</DisplayString>
		<Expand>
			<ExpandedItem Condition="destructor == pmath.dll!destroy_binary_file">
				*(pmath.dll!_pmath_binary_file_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!destroy_text_file">
				*(pmath.dll!_pmath_text_file_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!textbuffer_destroy_custom_data">
				*(pmath.dll!textbuffer_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!destroy_module">
				*(pmath.dll!_module_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!_pmath_destroy_abortable_message">
				*(pmath.dll!_pmath_abortable_message_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!destroy_msg_queue">
				*(pmath.dll!msg_queue_t*)data
			</ExpandedItem>
			<ExpandedItem Condition="destructor == pmath.dll!_pmath_custom_task_destroy">
				*(pmath.dll!pmath_task_t)data
			</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="_pmath_text_file_t">
		<Expand>
			<Synthetic Name="access" Condition="readln_function != 0 &amp;&amp; write_function != 0"><DisplayString>read | write</DisplayString></Synthetic>
			<Synthetic Name="access" Condition="readln_function != 0 &amp;&amp; write_function == 0"><DisplayString>read only</DisplayString></Synthetic>
			<Synthetic Name="access" Condition="readln_function == 0 &amp;&amp; write_function != 0"><DisplayString>write only</DisplayString></Synthetic>
			<Synthetic Name="access" Condition="readln_function == 0 &amp;&amp; write_function == 0"><DisplayString>none</DisplayString></Synthetic>
			<Item Name="buffer">buffer</Item>
			<Item Name="extra" Condition="inherited.extra_destructor == pmath.dll!destroy_bintext_extra">
				*(pmath.dll!_bintext_extra_t*)inherited.extra
			</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_blob_t">
		<DisplayString>blob</DisplayString>
	</Type>
	<Type Name="_pmath_packed_array_t">
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 1">packed double array [{sizes_and_steps[0],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 2">packed double array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions    == 3">packed double array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d} x {sizes_and_steps[2],d}]</DisplayString>
		<DisplayString Condition="element_type == 1 &amp;&amp; dimensions &gt;= 3">packed double array [{sizes_and_steps[0],d} x ... x {sizes_and_steps[dimensions-2],d} x {sizes_and_steps[dimensions-1],d}]</DisplayString>
		<DisplayString Condition="element_type == 1"                              >packed double array</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 1">packed int32 array [{sizes_and_steps[0],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 2">packed int32 array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions    == 3">packed int32 array [{sizes_and_steps[0],d} x {sizes_and_steps[1],d} x {sizes_and_steps[2],d}]</DisplayString>
		<DisplayString Condition="element_type == 2 &amp;&amp; dimensions &gt;= 3">packed int32 array [{sizes_and_steps[0],d} x ... x {sizes_and_steps[dimensions-2],d} x {sizes_and_steps[dimensions-1],d}]</DisplayString>
		<DisplayString Condition="element_type == 2"                              >packed int32 array</DisplayString>
		<DisplayString>packed array</DisplayString>
		<Expand>
			<Item Name="[&lt;Raw&gt;]" ExcludeView="simple">
				*(pmath.dll!_pmath_packed_array_t*)this,!
			</Item>
			<Item Name="element_type">(pmath.dll!pmath_packed_type_t)element_type</Item>
			<Item Name="dimensions">dimensions,d</Item>
			<Synthetic Name="sizes">
				<DisplayString Condition="dimensions == 1">[{(intptr_t)sizes_and_steps[0]}]</DisplayString>
				<DisplayString Condition="dimensions == 2">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]}]</DisplayString>
				<DisplayString Condition="dimensions == 3">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]}]</DisplayString>
				<DisplayString Condition="dimensions == 4">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]}]</DisplayString>
				<DisplayString Condition="dimensions == 5">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]} x {(intptr_t)sizes_and_steps[4]}]</DisplayString>
				<DisplayString Condition="dimensions == 6">[{(intptr_t)sizes_and_steps[0]} x {(intptr_t)sizes_and_steps[1]} x {(intptr_t)sizes_and_steps[2]} x {(intptr_t)sizes_and_steps[3]} x {(intptr_t)sizes_and_steps[4]} x {(intptr_t)sizes_and_steps[5]}]</DisplayString>
				<DisplayString Condition="dimensions &gt; 6">[{(intptr_t)sizes_and_steps[0]} x ... x {(intptr_t)sizes_and_steps[dimensions-1]}]</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>dimensions</Size>
						<ValuePointer>&amp;sizes_and_steps[0]</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="steps">
				<DisplayString Condition="dimensions == 1">({(intptr_t)sizes_and_steps[dimensions]})</DisplayString>
				<DisplayString Condition="dimensions == 2">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]})</DisplayString>
				<DisplayString Condition="dimensions == 3">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]})</DisplayString>
				<DisplayString Condition="dimensions == 4">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]})</DisplayString>
				<DisplayString Condition="dimensions == 5">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]}, {(intptr_t)sizes_and_steps[dimensions+4]})</DisplayString>
				<DisplayString Condition="dimensions == 6">({(intptr_t)sizes_and_steps[dimensions]}, {(intptr_t)sizes_and_steps[dimensions+1]}, {(intptr_t)sizes_and_steps[dimensions+2]}, {(intptr_t)sizes_and_steps[dimensions+3]}, {(intptr_t)sizes_and_steps[dimensions+4]}, {(intptr_t)sizes_and_steps[dimensions+5]})</DisplayString>
				<DisplayString Condition="dimensions &gt; 6">({(intptr_t)sizes_and_steps[dimensions]}, ..., {(intptr_t)sizes_and_steps[2*dimensions-1]})</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>dimensions</Size>
						<ValuePointer>&amp;sizes_and_steps[dimensions]</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Item Name="blob">*blob</Item>
			<Item Name="[data]" Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</Item>
			<Item Name="[data]" Condition="element_type == 2">(int*)   ((char*)blob-&gt;data + offset)</Item>
			<Item Name="[data]"                              >(void*)  ((char*)blob-&gt;data + offset)</Item>
			<!--<ArrayItems Condition="dimensions == 1">
				<Size>sizes_and_steps[0]</Size>
				<ValuePointer Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</ValuePointer>
				<ValuePointer Condition="element_type == 2">(int*)((char*)blob-&gt;data + offset)</ValuePointer>
			</ArrayItems>-->
			<ArrayItems Condition="non_continuous_dimensions_count == 0">
				<Direction>Forward</Direction>
				<Rank>dimensions</Rank>
				<Size>sizes_and_steps[$i]</Size>
				<LowerBound>1</LowerBound>
				<ValuePointer Condition="element_type == 1">(double*)((char*)blob-&gt;data + offset)</ValuePointer>
				<ValuePointer Condition="element_type == 2">(int*)((char*)blob-&gt;data + offset)</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="pmath_locked_t">
		<DisplayString>{_data}</DisplayString>
		<Expand>
			<ExpandedItem>_data</ExpandedItem>
		</Expand>
	</Type>
	<!--<Type Name="pmath_atomic_t">
		<DisplayString>{_data}</DisplayString>
	</Type>-->
	<Type Name="_pmath_symbol_rules_t">
		<DisplayString Condition="_messages._data == 0">{{ up={up_rules}, down={down_rules}, sub={sub_rules}, approx={approx_rules}, default={default_rules}, format={format_rules} }}</DisplayString>
		<DisplayString                                 >{{ up={up_rules}, down={down_rules}, sub={sub_rules}, approx={approx_rules}, default={default_rules}, format={format_rules}, messages={(pmath.dll!_pmath_hashtable_t*)_messages._data} }}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="up">up_rules</Item>
			<Item Name="down">down_rules</Item>
			<Item Name="sub">sub_rules</Item>
			<Item Name="approx">approx_rules</Item>
			<Item Name="default">default_rules</Item>
			<Item Name="format">format_rules</Item>
			<Item      Name="messages" Condition="_messages._data != 0">(pmath.dll!_pmath_hashtable_t*)_messages._data,view(EntriesOnly)</Item>
			<Synthetic Name="messages" Condition="_messages._data == 0"><DisplayString>none</DisplayString></Synthetic>
		</Expand>
	</Type>
	<Type Name="_pmath_rulecache_t">
		<DisplayString Condition="_table._data == 0 &amp;&amp; _more._data.as_bits == 0xFFF0000000000000ULL">none</DisplayString>
		<DisplayString Condition="_table._data == 0">{{ 0 literal, more={_more._data} }}</DisplayString>
		<DisplayString Condition="_table._data != 0 &amp;&amp; _more._data.as_bits == 0xFFF0000000000000ULL">{{ {((pmath.dll!_pmath_hashtable_t*)_table._data)-&gt;used_count} literal }}</DisplayString>
		<DisplayString Condition="_table._data != 0">{{ {((pmath.dll!_pmath_hashtable_t*)_table._data)-&gt;used_count} literal, more={_more._data} }}</DisplayString>
		<DisplayString>rule_cache</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem>(pmath.dll!_pmath_hashtable_t*)_table._data,view(EntriesOnly)</ExpandedItem>
			<Item Name="more" Condition="_more._data.as_bits != 0xFFF0000000000000ULL">_more._data</Item>
		</Expand>
	</Type>
	<Type Name="_pmath_hashtable_t">
		<DisplayString>{{ count={used_count} }}</DisplayString>
		<Expand>
			<Item Name="class" ExcludeView="EntriesOnly">klass</Item>
			<Item Name="capacity" ExcludeView="EntriesOnly">capacity</Item>
			<Item Name="count" ExcludeView="EntriesOnly">used_count</Item>
			<!--<Item Name="entries" ExcludeView="EntriesOnly" Condition="klass == &amp;pmath.dll!pmath_ht_obj_class">(_pmath_object_entry_t**)table,[capacity]</Item>
			<Item Name="entries" ExcludeView="EntriesOnly">table,[capacity]</Item>-->
			<CustomListItems Condition="klass == &amp;pmath.dll!pmath_ht_obj_class" MaxItemsPerView="1000">
				<Variable Name="pBucket" InitialValue="(_pmath_object_entry_t**)table" />
				
				<Size>used_count</Size>
				<Loop>
					<If Condition="((uintptr_t)*pBucket != (uintptr_t)0) &amp;&amp; (((uintptr_t)*pBucket) + (uintptr_t)1 != (uintptr_t)0)">
						<Item Name="[{pBucket[0][0].key}]">pBucket[0][0]</Item>
					</If>
					<Exec>pBucket = pBucket + 1</Exec>  
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>
	<Type Name="_pmath_object_entry_t">
		<DisplayString>{value}</DisplayString>
	</Type>
	
	<Type Name="_pmath_span_array_t">
		<DisplayString>{{ length={length} }}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>length</Size>
				<ValuePointer>(pmath.dll!_pmath_debug_span_t*)items</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<Type Name="_pmath_debug_span_t">
		<DisplayString Condition="value == 0">-</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 0 &amp;&amp; value/4 != 0">end={((pmath.dll!_pmath_span_t*)((value / 4) * 4))-&gt;end}</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 1 &amp;&amp; value/4 != 0">token end, end={((pmath.dll!_pmath_span_t*)((value / 4) * 4))-&gt;end}</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 2 &amp;&amp; value/4 != 0">operand start, end={((pmath.dll!_pmath_span_t*)((value / 4) * 4))-&gt;end}</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 3 &amp;&amp; value/4 != 0">operand start, token end, end={((pmath.dll!_pmath_span_t*)((value / 4) * 4))-&gt;end}</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 1">token end</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 2">operand start</DisplayString>
		<DisplayString Condition="(value &amp; 3) == 3">operand start, token end</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem Condition="value / 4 != 0">*(pmath.dll!_pmath_span_t*)((value / 4) * 4)</ExpandedItem>
		</Expand>
	</Type>
	
	<Type Name="_memory_header_t">
		<DisplayString>debug header for {((uintptr_t)this + ((sizeof(pmath.dll!_memory_header_t) + 9 + 2*sizeof(size_t) - 1) / (2*sizeof(size_t))) * 2*sizeof(size_t)),!}</DisplayString>
		<Expand>
			<Item Name="[ptr]">(void*)((char*)this + ((sizeof(pmath.dll!_memory_header_t) + 9 + 2*sizeof(size_t) - 1) / (2*sizeof(size_t))) * 2*sizeof(size_t)),[size]</Item>
			<Item Name="size">size</Item>
			<Item Name="alloc_time">alloc_time</Item>
			<Item Name="prev">prev</Item>
			<Item Name="next">next</Item>
		</Expand>
	</Type>
	
	<Type Name="arb_struct">
		<DisplayString>[ {mid} +/- {rad} ]</DisplayString>
	</Type>
	
	<Type Name="arf_struct">
		<DisplayString Condition="size==0 &amp;&amp; exp==0">0</DisplayString>
		<DisplayString Condition="size==0 &amp;&amp; (4 * (1-exp) == 0)">nan</DisplayString>
		<DisplayString Condition="size==0 &amp;&amp; (4 * (2-exp) == 0)">+inf</DisplayString>
		<DisplayString Condition="size==0 &amp;&amp; (4 * (3-exp) == 0)">-inf</DisplayString>
		<DisplayString Condition="size == 2">0.{((pmath.dll!_pmath_limb_t*)d.noptr.d)[0],x} *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<DisplayString Condition="size == 3">-0.{((pmath.dll!_pmath_limb_t*)d.noptr.d)[0],x} *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<!--<DisplayString Condition="size &amp; 1">-0.({size/2} limbs) *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<DisplayString                         >0.({size/2} limbs) *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>-->
		<DisplayString Condition="size == 4">0.{((pmath.dll!_pmath_limb_t*)d.noptr.d)[1],x}... *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<DisplayString Condition="size == 5">-0.{((pmath.dll!_pmath_limb_t*)d.noptr.d)[1],x}... *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<DisplayString Condition="size &amp; 1">-0.{((pmath.dll!_pmath_limb_t*)d.ptr.d)[size/2 - 1],x}... *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<DisplayString>0.{((pmath.dll!_pmath_limb_t*)d.ptr.d)[size/2 - 1],x}... *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<Expand>
			<Item Name="sign">((size &amp; 1) == 1) ? -1 : 1</Item>
			<Synthetic Name="mantissa">
				<DisplayString Condition="size/2 == 1">{d.noptr.d[0],x}</DisplayString>
				<DisplayString Condition="size/2 == 2">{d.noptr.d[1],x}_{d.noptr.d[0],x}</DisplayString>
				<DisplayString>({size/2} limbs)</DisplayString>
				<Expand>
					<!--<Item Name="limbs">size / 2</Item>-->
					<ArrayItems>
						<Size>size / 2</Size>
						<ValuePointer Condition="size/2 &lt;= 2">d.noptr.d,x</ValuePointer>
						<ValuePointer Condition="size/2 &gt; 2">d.ptr.d,x</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Item Name="exp">*(pmath.dll!_pmath_fmpz_t*)&amp;exp</Item>
		</Expand>
	</Type>
	
	<Type Name="mag_struct">
		<DisplayString Condition="man==0 &amp;&amp; exp==0">0</DisplayString>
		<DisplayString Condition="man==0 &amp;&amp; exp!=0">inf</DisplayString>
		<!--<DisplayString>{man,x} *2^ ({*(pmath.dll!_pmath_fmpz_t*)&amp;exp} - 30)</DisplayString>-->
		<DisplayString>0.{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF0000000UL) / 0x10000000UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF000000UL) / 0x1000000UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF00000UL) / 0x100000UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF0000UL) / 0x10000UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF000UL) / 0x1000UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF00UL) / 0x100UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + ((((uint32_t)man*4) &amp; 0xF0UL) / 0x10UL)),1sb}{
			(pmath.dll!_pmath_debug_hex + (((uint32_t)man*4) &amp; 0xFUL)),1sb} *2^ {*(pmath.dll!_pmath_fmpz_t*)&amp;exp}</DisplayString>
		<Expand>
			<!-- only least 30 bit of mantissa are used -->
			<Item Name="mantissa">(uint32_t)man*4</Item>
			<Item Name="exp">*(pmath.dll!_pmath_fmpz_t*)&amp;exp</Item>
			<Synthetic Name="alt">
				<DisplayString>{man,x} *2^ ({*(pmath.dll!_pmath_fmpz_t*)&amp;exp} - 30)</DisplayString>
			</Synthetic>
		</Expand>
	</Type>
	
	<Type Name="_pmath_fmpz_t">
		<DisplayString Condition="1 == ((sizeof(void*) == 8) ? (value[0] / 0x4000000000000000ULL) : (value[0] / 0x40000000UL))">{(pmath.dll!__mpz_struct*)(value[0] * 4)}</DisplayString>
		<DisplayString>{value[0]}</DisplayString>
		<Expand HideRawView="true">
			<Item Name="hex" Condition="0 == ((sizeof(void*) == 8) ? (value[0] / 0x4000000000000000ULL) : (value[0] / 0x40000000UL))">value[0],x</Item>
			<ExpandedItem Condition="1 == ((sizeof(void*) == 8) ? (value[0] / 0x4000000000000000ULL) : (value[0] / 0x40000000UL))">
				(pmath.dll!__mpz_struct*)(value[0] * 4)
			</ExpandedItem>
		</Expand>
	</Type>
	
	<Type Name="__mpz_struct">
		<Expand>
			<Item Name="sign">(_mp_size &lt; 0) ? -1 : 1</Item>
			<Item Name="limbs">(_mp_size &lt; 0) ? -_mp_size : _mp_size</Item>
			<ArrayItems>
				<Size>((_mp_size &lt; 0) ? -_mp_size : _mp_size)</Size>
				<ValuePointer>_mp_d,x</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	
	<Type Name="_pmath_uint8_t">
		<DisplayString>{(pmath.dll!_pmath_debug_hex + (value / 16)),1sb}{(pmath.dll!_pmath_debug_hex + (value &amp; 0xF)),1sb}</DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
	<Type Name="_pmath_uint16_t">
		<DisplayString>{hi}{lo}</DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
	<Type Name="_pmath_uint32_t">
		<DisplayString>{hi}{lo}</DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
	<Type Name="_pmath_uint64_t">
		<DisplayString>{hi}_{lo}</DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
	<Type Name="_pmath_limb_t">
		<DisplayString>{parts}</DisplayString>
	</Type>
	
    <Type Name="pmath::Expr">
		<DisplayString>{_obj}</DisplayString>
		<Expand HideRawView="true">
			<ExpandedItem>_obj</ExpandedItem>
		</Expand>
	</Type>






	<Type Name="richmath::Array&lt;*&gt;">
		<DisplayString>{{ length={_length} }}</DisplayString>
		<Expand>
			<Item Name="capacity" ExcludeView="simple">_capacity</Item>
			<Item Name="length" ExcludeView="simple">_length</Item>
			<ArrayItems>
				<Size>_length</Size>
				<ValuePointer>_items</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="richmath::Hashtable&lt;*&gt;">
		<DisplayString>{{ size={used_count} }}</DisplayString>
		<Expand>
			<Item Name="capacity" ExcludeView="EntriesOnly">capacity</Item>
			<Item Name="size" ExcludeView="EntriesOnly">used_count</Item>
			<CustomListItems MaxItemsPerView="1000">
				<Variable Name="pBucket" InitialValue="table" />
				
				<Size>used_count</Size>
				<Loop>
					<If Condition="((uintptr_t)*pBucket != (uintptr_t)0) &amp;&amp; (((uintptr_t)*pBucket) + (uintptr_t)1 != (uintptr_t)0)">
						<Item Name="[{pBucket[0][0].key}]">pBucket[0][0]</Item>
					</If>
					<Exec>pBucket = pBucket + 1</Exec>  
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>
	
	<Type Name="richmath::SharedPtr&lt;*&gt;">
		<SmartPointer Usage="Minimal">_ptr</SmartPointer>
		<DisplayString>{_ptr}</DisplayString>
		<Expand>
			<ExpandedItem>_ptr</ExpandedItem>
		</Expand>
	</Type>
	
	<Type Name="richmath::SpanExpr">
		<DisplayString Condition="_sequence != 0 &amp;&amp; (_sequence-&gt;str._obj.s.tag == 0x7FF30000 || _sequence-&gt;str._obj.s.tag == 0x7FF40000 || _sequence-&gt;str._obj.s.tag == 0x7FF50000)"
		>[{_start} .. {_end}]: {(wchar_t*)_sequence-&gt;str._obj.s.u.as_chars + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer == 0)"
		>[{_start} .. {_end}]: {(wchar_t*)((char*)((pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)) + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer != 0)"
		>[{_start} .. {_end}]: {(wchar_t*)((char*)(*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + (*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).capacity_or_start + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString>[{_start} .. {_end}]</DisplayString>
		<Expand>
			<Synthetic Name="range"><DisplayString>{_start} .. {_end}</DisplayString></Synthetic>
			<Synthetic Name="text">
				<DisplayString Condition="_sequence != 0 &amp;&amp; (_sequence-&gt;str._obj.s.tag == 0x7FF30000 || _sequence-&gt;str._obj.s.tag == 0x7FF40000 || _sequence-&gt;str._obj.s.tag == 0x7FF50000)"
				>{(wchar_t*)_sequence-&gt;str._obj.s.u.as_chars + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer == 0)"
				>{(wchar_t*)((char*)((pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)) + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer != 0)"
				>{(wchar_t*)((char*)(*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + (*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).capacity_or_start + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString>???</DisplayString>
			</Synthetic>
			<Synthetic Name="items">
				<DisplayString>{{ count={_items._length} }}</DisplayString>
				<Expand>
					<Item Name="count">_items._length</Item>
					<CustomListItems MaxItemsPerView="1000">
						<Variable Name="theIndex" InitialValue="0" />
						
						<Size>_items._length</Size>
						<Loop>
							<If Condition="_items._items[theIndex] == 0">
								<Item Name="[{theIndex}] at">_items_pos._items[theIndex]</Item>
							</If>
							<Else>
								<Item Name="[{theIndex}]">_items._items[theIndex]</Item>
							</Else>
							<Exec>theIndex = theIndex + 1</Exec>  
						</Loop>  
					</CustomListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="items_pos">
				<DisplayString>{_items_pos._items,[_items_pos._length]na}</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>_items_pos._length</Size>
						<ValuePointer>_items_pos._items</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="richmath::BaseDebugImpl">
		<DisplayString>{{ {count._data} live objects }}</DisplayString>
		<Expand>
			<Item Name="count">count._data</Item>
			<LinkedListItems>
				<Size>count._data</Size>
				<HeadPointer>non_freed_objects_list</HeadPointer>
				<NextPointer>debug_next</NextPointer>
				<ValueNode>this</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="richmath::Base">
		<DisplayString>{{ t={debug_alloc_time} {debug_tag,na} }}</DisplayString>
	</Type>

	<Type Name="richmath::StyleOptionName">
		<DisplayString IncludeView="StyleOptionNameIsDynamic" Condition="(_value &amp; 0x10000000) == 0x10000000">,dynamic</DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsDynamic"></DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsVolatile" Condition="(_value &amp; 0x20000000) == 0x20000000">,volatile</DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsVolatile"></DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFFFFFF) &lt; 0x10000">{(richmath::IntStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFFFFFF) &lt; 0x20000">{(richmath::FloatStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFFFFFF) &lt; 0x30000">{(richmath::StringStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFFFFFF) &lt; 0x40000">{(richmath::ObjectStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase">{(_value &amp; 0xFFFFFFF)}</DisplayString>
		<DisplayString>{*this,view(StyleOptionNameBase)}{*this,view(StyleOptionNameIsDynamic)}{*this,view(StyleOptionNameIsVolatile)}</DisplayString>
	</Type>

	<Type Name="richmath::FrontEndReference">
		<DisplayString>{_id}</DisplayString>
		<Expand HideRawView="true">
		</Expand>
	</Type>
</AutoVisualizer>
