<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="richmath::Array&lt;*&gt;">
		<DisplayString>{{ length={_items ? ((DataHeader*)((uintptr_t)_items - (uintptr_t)&amp;((DataHeader*)0)-&gt;items[0]))-&gt;length : 0} }}</DisplayString>
		<Expand>
			<Item Name="capacity" ExcludeView="simple">_items ? ((DataHeader*)((uintptr_t)_items - (uintptr_t)&amp;((DataHeader*)0)-&gt;items[0]))-&gt;capacity : 0</Item>
			<Item Name="length"   ExcludeView="simple">_items ? ((DataHeader*)((uintptr_t)_items - (uintptr_t)&amp;((DataHeader*)0)-&gt;items[0]))-&gt;length : 0</Item>
			<ArrayItems>
				<Size>_items ? ((DataHeader*)((uintptr_t)_items - (uintptr_t)&amp;((DataHeader*)0)-&gt;items[0]))-&gt;length : 0</Size>
				<ValuePointer>_items</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>

	<Type Name="richmath::Hashtable&lt;*&gt;">
		<DisplayString>{{ size={used_count} }}</DisplayString>
		<Expand>
			<Item Name="capacity" ExcludeView="EntriesOnly">capacity</Item>
			<Item Name="size" ExcludeView="EntriesOnly">used_count</Item>
			<CustomListItems MaxItemsPerView="1000">
				<Variable Name="pBucket" InitialValue="table" />
				
				<Size>used_count</Size>
				<Loop>
					<If Condition="((uintptr_t)*pBucket != (uintptr_t)0) &amp;&amp; (((uintptr_t)*pBucket) + (uintptr_t)1 != (uintptr_t)0)">
						<Item Name="[{pBucket[0][0].key}]">pBucket[0][0]</Item>
					</If>
					<Exec>pBucket = pBucket + 1</Exec>  
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>

	<Type Name="richmath::Length">
		<DisplayString Condition="_raw_value &lt; 0">{(SymbolicSize)(int)_raw_value}</DisplayString>
		<DisplayString Condition="_raw_value &gt;= 0">{_raw_value}</DisplayString>
	</Type>

	<Type Name="richmath::RleArrayIterator&lt;*&gt;">
		<DisplayString IncludeView="valueonly" Condition="predictor_type::_debug_predictor_kind == 0">{
				(_group &gt;= 0) ? (
					((*_array).groups._items[_group].next_value)
				) : (
					value_default_type::value
				)
		}</DisplayString>
		<DisplayString IncludeView="valueonly" Condition="predictor_type::_debug_predictor_kind == 1">{
				(_group &gt;= 0) ? (
					((*_array).groups._items[_group].next_value)
					+ (_index - (*_array).groups._items[_group].first_index)
				) : (
					value_default_type::value
					+ (_index - 0)
				)
		}</DisplayString>
		<DisplayString ExcludeView="valueonly">{{ index={_index} value={*this,view(valueonly)} }}</DisplayString>
		<Expand>
			<Item Name="index" ExcludeView="valueonly">_index</Item>
			
			<Item Name="value" Condition="predictor_type::_debug_predictor_kind == 0">
				(_group &gt;= 0) ? (
					((*_array).groups._items[_group].next_value)
				) : (
					value_default_type::value
				)
			</Item>
			<Item Name="value" Condition="predictor_type::_debug_predictor_kind == 1">
				(_group &gt;= 0) ? (
					((*_array).groups._items[_group].next_value)
					+ (_index - (*_array).groups._items[_group].first_index)
				) : (
					value_default_type::value
					+ (_index - 0)
				)
			</Item>
			<!--<Item Name="value" Condition="predictor_type::_debug_predictor_kind == 2">
				(_group &gt;= 0) ? (
					(_index == (*_array).groups._items[_group].first_index) ? (
						(*_array).groups._items[_group].next_value
					) : (
						predictor_type::value_default_type::value
					)
				) : (
					(_index == 0) ? (
						value_default_type::value
					) : (
						predictor_type::value_default_type::value
					)
				)
			</Item>-->
			
			<Item ExcludeView="valueonly" Name="index in group" Condition="_group &gt;= 0">_index - (*_array).groups._items[_group].first_index</Item>
			<Item ExcludeView="valueonly" Name="index in group" Condition="_group &lt;  0">_index - 0</Item>
			<Item ExcludeView="valueonly" Name="group" Condition="_group &gt;= 0">*(predictor_type*)&amp;(*_array).groups._items[_group].next_value</Item>
			<Item ExcludeView="valueonly" Name="group" Condition="_group &lt;  0">*(predictor_type*)&amp;value_default_type::value</Item>
			<Synthetic ExcludeView="valueonly" Name="(predictor)" Condition="predictor_type::_debug_predictor_kind == 0">
				<DisplayString>const</DisplayString>
			</Synthetic>
			<Synthetic ExcludeView="valueonly" Name="(predictor)" Condition="predictor_type::_debug_predictor_kind == 1">
				<DisplayString>linear</DisplayString>
			</Synthetic>
			<Synthetic ExcludeView="valueonly" Name="(predictor)" Condition="predictor_type::_debug_predictor_kind == 2">
				<DisplayString>event</DisplayString>
			</Synthetic>
			<!--<Item ExcludeView="valueonly" Name="(predictor)">*(predictor_type*)1,view(nameonly)</Item>-->
		</Expand>
	</Type>

	<Type Name="richmath::BasicSequenceIterator&lt;*&gt;">
		<DisplayString>{{ glyph:{_text_pos_iter._index} text:{_text_pos_iter,view(valueonly)} seq:{_inline_seq_iter,view(valueonly)} }}</DisplayString>
		<Expand>
			<Item Name="glyph_index">_text_pos_iter._index</Item>
			<Item Name="text_index">_text_pos_iter,view(valueonly)</Item>
			<Item Name="current_char">(wchar_t)_current_char</Item>
			<Item Name="sequence">_inline_seq_iter,view(valueonly)</Item>
			<Item Name="outermost_sequence">_owning_seq</Item>
		</Expand>
	</Type>

	<Type Name="richmath::GlyphIterator">
		<DisplayString>{_basic_iter}</DisplayString>
		<Expand>
			<ExpandedItem>_basic_iter</ExpandedItem>
			<Item Name="semantic_style">_semantic_style_iter</Item>
		</Expand>
	</Type>

	<Type Name="richmath::SharedPtr&lt;*&gt;">
		<SmartPointer Usage="Minimal">_ptr</SmartPointer>
		<DisplayString>{_ptr}</DisplayString>
		<Expand>
			<ExpandedItem>_ptr</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="richmath::TintedPtr&lt;*&gt;">
		<DisplayString Condition="_data == 0">nullptr</DisplayString>
		<DisplayString Condition="(_data &amp; 1) == 0">{*($T1*)_data}</DisplayString>
		<DisplayString Condition="(_data &amp; 1) == 1">{*($T2*)((_data / 2) * 2)}</DisplayString>
		<Expand>
			<Synthetic Name="kind">
				<DisplayString Condition="(_data &amp; 1) == 0">normal ({"$T1",sb})</DisplayString>
				<DisplayString Condition="(_data &amp; 1) == 0">tinted ({"$T2",sb})</DisplayString>
			</Synthetic>
			<ExpandedItem Condition="(_data &amp; 1) == 0 &amp;&amp; _data != 0">*($T1*)_data</ExpandedItem>
			<ExpandedItem Condition="(_data &amp; 1) != 0">*($T2*)((_data / 2) * 2)</ExpandedItem>
		</Expand>
	</Type>
	
	<Type Name="richmath::SpanExpr">
		<DisplayString Condition="_sequence != 0 &amp;&amp; (_sequence-&gt;str._obj.s.tag == 0x7FF30000 || _sequence-&gt;str._obj.s.tag == 0x7FF40000 || _sequence-&gt;str._obj.s.tag == 0x7FF50000)"
		>[{_start} .. {_end}]: {(wchar_t*)_sequence-&gt;str._obj.s.u.as_chars + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer == 0)"
		>[{_start} .. {_end}]: {(wchar_t*)((char*)((pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)) + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer != 0)"
		>[{_start} .. {_end}]: {(wchar_t*)((char*)(*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + (*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).capacity_or_start + _start,[_end-_start+1]na}</DisplayString>
		<DisplayString>[{_start} .. {_end}]</DisplayString>
		<Expand>
			<Synthetic Name="range"><DisplayString>{_start} .. {_end}</DisplayString></Synthetic>
			<Synthetic Name="text">
				<DisplayString Condition="_sequence != 0 &amp;&amp; (_sequence-&gt;str._obj.s.tag == 0x7FF30000 || _sequence-&gt;str._obj.s.tag == 0x7FF40000 || _sequence-&gt;str._obj.s.tag == 0x7FF50000)"
				>{(wchar_t*)_sequence-&gt;str._obj.s.u.as_chars + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer == 0)"
				>{(wchar_t*)((char*)((pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)) + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString Condition="_sequence != 0 &amp;&amp; ((_sequence-&gt;str._obj.s.tag &amp; 0xFFF00000) == 0xFFF00000) &amp;&amp; (_sequence-&gt;str._obj.as_bits * 0x1000 != 0) &amp;&amp; ((*(pmath.dll!_pmath_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).type_shift == 3) &amp;&amp; ((*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer != 0)"
				>{(wchar_t*)((char*)(*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).buffer + ((sizeof(pmath.dll!_pmath_string_t) + sizeof(size_t) - 1)/sizeof(size_t))*sizeof(size_t)) + (*(pmath.dll!_pmath_string_t*)((_sequence-&gt;str._obj.as_bits * 0x1000) / 0x1000)).capacity_or_start + _start,[_end-_start+1]na}</DisplayString>
				<DisplayString>???</DisplayString>
			</Synthetic>
			<Synthetic Name="items">
				<DisplayString>{{ count={_items._length} }}</DisplayString>
				<Expand>
					<Item Name="count">_items._length</Item>
					<CustomListItems MaxItemsPerView="1000">
						<Variable Name="theIndex" InitialValue="0" />
						
						<Size>_items._length</Size>
						<Loop>
							<If Condition="_items._items[theIndex] == 0">
								<Item Name="[{theIndex}] at">_items_pos._items[theIndex]</Item>
							</If>
							<Else>
								<Item Name="[{theIndex}]">_items._items[theIndex]</Item>
							</Else>
							<Exec>theIndex = theIndex + 1</Exec>  
						</Loop>  
					</CustomListItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="items_pos">
				<DisplayString>{_items_pos._items,[_items_pos._length]na}</DisplayString>
				<Expand>
					<ArrayItems>
						<Size>_items_pos._length</Size>
						<ValuePointer>_items_pos._items</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="richmath::BaseDebugImpl">
		<DisplayString>{{ {count._data} live objects }}</DisplayString>
		<Expand>
			<Item Name="count">count._data</Item>
			<LinkedListItems>
				<Size>count._data</Size>
				<HeadPointer>non_freed_objects_list</HeadPointer>
				<NextPointer>debug_next</NextPointer>
				<ValueNode>this</ValueNode>
			</LinkedListItems>
		</Expand>
	</Type>

	<Type Name="richmath::Base">
		<DisplayString>{{ t={debug_alloc_time} {debug_tag,na} }}</DisplayString>
	</Type>

	<Type Name="richmath::StyleOptionName">
		<DisplayString IncludeView="StyleOptionNameIsDynamic" Condition="(_value &amp; 0x10000000) == 0x10000000">,dynamic</DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsDynamic"></DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsVolatile" Condition="(_value &amp; 0x20000000) == 0x20000000">,volatile</DisplayString>
		<DisplayString IncludeView="StyleOptionNameIsVolatile"></DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFF0000) == 0x10000">{(richmath::IntStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFF0000) == 0x20000">{(richmath::FloatStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFF0000) == 0x30000">{(richmath::LengthStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFF0000) == 0x40000">{(richmath::StringStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase" Condition="(_value &amp; 0xFFF0000) == 0x50000">{(richmath::ObjectStyleOptionName)(_value &amp; 0xFFFFFFF),en}</DisplayString>
		<DisplayString IncludeView="StyleOptionNameBase">{(_value &amp; 0xFFFFFFF)}</DisplayString>
		<DisplayString>{*this,view(StyleOptionNameBase)}{*this,view(StyleOptionNameIsDynamic)}{*this,view(StyleOptionNameIsVolatile)}</DisplayString>
	</Type>

	<Type Name="richmath::FrontEndReference">
		<DisplayString>{_id}</DisplayString>
		<Expand HideRawView="true">
			<CustomListItems Condition="_id != 0" MaxItemsPerView="1">
				<Variable Name="pBucket" InitialValue="richmath.exe!TheCache.table.table" />
				<Variable Name="pBucketEnd" InitialValue="richmath.exe!TheCache.table.table + richmath.exe!TheCache.table.capacity" />
				
				<Size>1</Size>
				<Loop>
					<If Condition="((uintptr_t)*pBucket != (uintptr_t)0) &amp;&amp; (((uintptr_t)*pBucket) + (uintptr_t)1 != (uintptr_t)0)">
						<If Condition="pBucket[0][0].key._id == _id">
							<Item Name="found">pBucket[0][0].value</Item>
							<Break/>
						</If>
					</If>
					<If Condition="pBucket == pBucketEnd">
						<Item Name="not found">(void*)0</Item>
						<Break/>
					</If>
					<Exec>pBucket = pBucket + 1</Exec>  
				</Loop>  
			</CustomListItems>
		</Expand>
	</Type>
</AutoVisualizer>