/* pMath Document */

Document({
  SectionGroup({Section("Using $WindowFrameImage", "Title"), 
    Section(
     "You need to turn on \[HighSixDoubleQuote]Aero \
     Glass\[HighNineDoubleQuote] to see the frame image.", "Text"), 
    SectionGroup({
      Section(
       BoxData({"Button", "(", {StringBox("\"Open Window with Frame Image\""), 
          ",", {
           "\n", {"With", "(", {
             {"{", {"imgFile", "\[Assign]", {"FE`FileOpenDialog", "(", {
                 {"If", "(", {{"IsString", "(", "lastChosenImage", ")"}, ",", 
                   "lastChosenImage", ",", StringBox("\"\"")}, ")"}, ",", {
                  "{", {StringBox("\"PNG Images\""), "->", 
                   StringBox("\"*.png\"")}, "}"}}, ")"}}, "}"}, ",", {
              "\n", {{"If", "(", {{"IsString", "(", "imgFile", ")"}, ",", {
                  "\n", {{"lastChosenImage", "\[Assign]", "imgFile"}, ";", {
                    "\n", {"Block", "(", {{"{", "FE`$WindowFrameImage", "}"}, 
                      ",", {{"FE`$WindowFrameImage", "\[Assign]", "imgFile"}, 
                       ";", {"CreateDocument", "@@", {
                         "DocumentGet", "(", {"EvaluationDocument", "(", ")"}, 
                         ")"}}}}, ")"}}}}}, ")"}, ";"}}}, ")"}}}, ")"}), 
       "Input"), 
      Section(BoxData(ButtonBox(StringBox("\"Open Window with Frame Image\""), 
         ButtonFunction -> 
          Function(
           With({
             Global`imgFile:= FE`FileOpenDialog(
               If(IsString(Global`lastChosenImage), Global`lastChosenImage, 
                ""), {"PNG Images" -> "*.png"})}, 
            If(IsString(Global`imgFile), 
              Global`lastChosenImage:= Global`imgFile; 
               Block({FE`$WindowFrameImage}, 
                FE`$WindowFrameImage:= Global`imgFile; 
                 Apply(DocumentGet(EvaluationDocument()), 
                  CreateDocument)));)))), "Output", 
       SectionGenerated -> True)}, 2), 
    SectionGroup({
      Section(
       BoxData({"Grid", "(", {
          "{", {{"{", {StringBox("\"last chosen image:\""), "++", {
              "StringExpression", "@@", {"ConstantArray", "(", {
                StringBox("\"\\[U+2003]\""), ",", "20"}, ")"}}}, "}"}, ",", {
            "\n", {"{", {"InputField", "(", {
               {"Dynamic", "(", "lastChosenImage", ")"}, ",", "String"}, ")"}, 
             "}"}}}, "}"}, ")"}), "Input"), 
      Section(
       BoxData(
        TagBox(
         GridBox({
           {StringBox(
             "\"last chosen \
             image:\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\
             \[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\
             \[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\[U+2003]\"\
             ")}, {InputFieldBox(Dynamic(Global`lastChosenImage), String)}}), 
         "Grid")), "Output", SectionGenerated -> True)}, 2), 
    SectionGroup({
      Section(BoxData({"Button", "(", {StringBox("\"+\""), ",", {
           "\n", {
            {"With", "(", {
              {"{", {"old", "\[Assign]", {"CurrentValue", "(", {
                  {"EvaluationDocument", "(", ")"}, ",", {
                   "{", {"DockedSections", ",", StringBox("\"TopGlass\"")}, 
                   "}"}}, ")"}}, "}"}, ",", {
               {"CurrentValue", "(", {{"EvaluationDocument", "(", ")"}, ",", {
                  "{", {"DockedSections", ",", StringBox("\"TopGlass\"")}, 
                  "}"}}, ")"}, "\[Assign]", {
                "Flatten", "@", {
                 "{", {"old", ",", {"Section", "(", {
                    StringBox("\"\""), ",", StringBox("\"Docked\"")}, ")"}}, 
                 "}"}}}}, ")"}, "\n"}}}, ")"}), "Input", 
       SectionLabel -> "in [14]:"), 
      Section(BoxData(ButtonBox(StringBox("\"+\""), 
         ButtonFunction -> 
          Function(
           With({$Context`old:= CurrentValue(EvaluationDocument(), {
                DockedSections, "TopGlass"})}, 
            CurrentValue(EvaluationDocument(), {DockedSections, "TopGlass"}):= 
             Flatten({$Context`old, Section("", "Docked")}))))), "Output", 
       SectionGenerated -> True, SectionLabel -> "out [14]:")}, 2), 
    SectionGroup({
      Section(BoxData({"Button", "(", {StringBox("\"-\""), ",", {
           "\n", {
            {"With", "(", {
              {"{", {"old", "\[Assign]", {"CurrentValue", "(", {
                  {"EvaluationDocument", "(", ")"}, ",", {
                   "{", {"DockedSections", ",", StringBox("\"TopGlass\"")}, 
                   "}"}}, ")"}}, "}"}, ",", {
               "\n", {{"If", "(", {{{"Length", "(", "old", ")"}, ">", "0"}, 
                  ",", {{"CurrentValue", "(", {
                     {"EvaluationDocument", "(", ")"}, ",", {
                      "{", {"DockedSections", ",", StringBox("\"TopGlass\"")}, 
                      "}"}}, ")"}, "\[Assign]", {"Most", "(", "old", ")"}}}, 
                 ")"}, "\n"}}}, ")"}, "\n"}}}, ")"}), "Input", 
       SectionLabel -> "in [15]:"), 
      Section(BoxData(ButtonBox(StringBox("\"-\""), 
         ButtonFunction -> 
          Function(
           With({$Context`old:= CurrentValue(EvaluationDocument(), {
                DockedSections, "TopGlass"})}, If(Length($Context`old) > 0, 
             CurrentValue(EvaluationDocument(), {
                DockedSections, "TopGlass"}):= Most($Context`old)))))), 
       "Output", SectionGenerated -> True, SectionLabel -> "out [15]:")}, 2)}, 
   All)}, Background -> GrayLevel(1), 
 DockedSections :> {"TopGlass" -> {Section("", "Docked")}}, Editable -> True, 
 Selectable -> True, ShowSectionBracket -> False, 
 StyleDefinitions -> "Default.pmathdoc", Visible -> True, 
 WindowFrame -> "Dialog", WindowTitle -> "Using $WindowFrameImage")