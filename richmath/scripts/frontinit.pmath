
BeginPackage("FE`")

$FrontEndDirectory;
$MathShapers;
$FallbackFonts;
SymbolInfo;
SymbolDefinitions;
BoxesToText;
SectionsToBoxes;
FileOpenDialog;
FileSaveDialog;

Begin("FE`Private`")

oldNamespacePath:= $NamespacePath;
$NamespacePath:= Prepend($NamespacePath, "FE`")


$FrontEndDirectory:= DirectoryName($Input)
Protect($FrontEndDirectory)


Options(FileOpenDialog):= Options(FileSaveDialog):= {WindowTitle -> Automatic}


$MathShapers:= {"Cambria Math", "Asana Math", "Neo Euler", "XITS Math", "Latin Modern Math"}
Protect($MathShapers)


/* should not contain more than 6 fonts: */
$FallbackFonts:= {"pMathFallback", "Asana Math", "Arial Unicode MS", "Unifont"}
Protect($FallbackFonts)


$Path:= Prepend($Path, $FrontEndDirectory)

SymbolInfo(~name:String)::= Try(
	With(
		{sym:= name.MakeExpression(ParseSymbols -> False)},
		If(sym.Match(HoldComplete(Symbol(~))),
			Return(False)); /* symbol does not exist */
		
		If(!sym.Match(HoldComplete(~s:Symbol)),
			Return(True)); /* name parses to something not a symbol */
		
		If(Union($NamespacePath, {$Namespace}).Map(MakeExpression(# ++ name, ParseSymbols -> False)&).Cases(HoldComplete(Except(Symbol(~)))).Length() > 1,
			Return(Alternatives));
		
		Return(Namespace @@ sym =!= "Global`"
			|| Attributes @@ sym =!= {} 
			|| DownRules @@ sym =!= {} 
			|| UpRules @@ sym =!= {} 
			|| SubRules @@ sym =!= {} 
			|| OwnRules @@ sym =!= {});
		),
	Syntax)

Attributes(SymbolDefinitions):= {HoldAllComplete}
SymbolDefinitions(~sym:Symbol)::= Flatten(HoldComplete @@ Gather(
	With({r:= OwnRules(sym)},     If(Length(r) > 0, Emit(HoldComplete(OwnRules(sym):=     r))));
	With({r:= DownRules(sym)},    If(Length(r) > 0, Emit(HoldComplete(DownRules(sym):=    r))));
	With({r:= UpRules(sym)},      If(Length(r) > 0, Emit(HoldComplete(UpRules(sym):=      r))));
	With({r:= SubRules(sym)},     If(Length(r) > 0, Emit(HoldComplete(SubRules(sym):=     r))));
	With({r:= DefaultRules(sym)}, If(Length(r) > 0, Emit(HoldComplete(DefaultRules(sym):= r))));
	With({r:= FormatRules(sym)},  If(Length(r) > 0, Emit(HoldComplete(FormatRules(sym):=  r))));
	With({r:= NRules(sym)},       If(Length(r) > 0, Emit(HoldComplete(NRules(sym):=       r))));
	)[2])

SectionsToBoxes(~b)::= ReplaceRepeated(b, {Section(BoxData(~x), ~~~) :> {x, "\n"}, Section(~x, ~~~) :> {x, "\n"}, SectionGroup(~x, ~) :> x})

$NamespacePath:= oldNamespacePath

If(Length($CommandLine) > 1 && StringMatch($CommandLine[2], ".png" ++ EndOfString),
	FE`$WindowFrameImage:= $CommandLine[2];
	)

End()

EndPackage()

Protect(
   FE`Graphics`StepSize, 
   FE`Graphics`TickPositions)

AutoLoad(Hold(Button, ButtonBox, Checkbox, CheckboxBox, Dynamic, DynamicBox, DynamicSetting, InputField, InputFieldBox, ProgressIndicator, ProgressIndicatorBox, RadioButton, RadioButtonBar, RadioButtonBox, Setter, SetterBar, SetterBox, Slider, SliderBox, Tooltip, TooltipBox), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "guiboxes.pmath"));
AutoLoad(Hold(ShowDefinition), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "showdefinition.pmath"));
AutoLoad(Hold(FE`Graphics`StepSize, FE`Graphics`TickPositions), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "graphics.pmath"));
Get(ToFileName({$FrontEndDirectory, "auto", "frontend"}, "boxestotext.pmath"))
