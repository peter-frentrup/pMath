
BeginPackage("FE`", "ExperimentalSyntax`")

$FrontEndDirectory;
$StylesheetDirectory;
$PaletteSearchPath;
$MathShapers;
$FallbackFonts;
$PrivateStartupFontFiles;
SymbolInfo;
SymbolDefinitions;
BoxesToText;
SectionsToBoxes;
FileOpenDialog;
FileSaveDialog;
$ControlActive;
AutoCompleteName;
AutoCompleteFile;

Begin("FE`Private`")

If($SystemId === "Windows") {
	<<Windows`
}

oldNamespacePath:= $NamespacePath;
$NamespacePath:= Prepend($NamespacePath, "FE`")


$FrontEndDirectory:= DirectoryName($Input)
Protect($FrontEndDirectory)

$StylesheetDirectory:= ToFileName({FE`$FrontEndDirectory, "resources", "StyleSheets"})
Protect($StylesheetDirectory)

$PaletteSearchPath:= {ToFileName({FE`$FrontEndDirectory, "resources", "Palettes"})}
Protect($PaletteSearchPath)

Options(FileOpenDialog):= Options(FileSaveDialog):= {WindowTitle -> Automatic}


$MathShapers:= {
	"Cambria Math", 
	"Asana Math", 
	"Fira Math",
	"Neo Euler", 
	/*"STIX Math", */"XITS Math", 
	"Latin Modern Math", 
	"TeX Gyre Bonum Math", 
	"TeX Gyre Pagella Math", 
	"TeX Gyre Termes Math", 
	"GFS Neohellenic Math"}
Protect($MathShapers)


/* should not contain more than 6 fonts: */
$FallbackFonts:= {"pMathFallback", "Asana Math", "Arial Unicode MS", "Unifont"}
Protect($FallbackFonts)

$PrivateStartupFontFiles:= $ApplicationFileName.DirectoryName.FileNames({"*.otf", "*.ttf"})

$Path:= Prepend($Path, $FrontEndDirectory)

parseToExistingSymbol(~name:String)::= Try(
	name.MakeExpression(ParseSymbols -> False), 
	HoldComplete(Symbol(name)),
	MakeExpression::nonewsym)

Function SymbolInfo(~name:String) { 
	Try(
	With(sym:= parseToExistingSymbol(name)) {
		If(sym.Match(HoldComplete(Symbol(~)))) {
			Return(False) /* symbol does not exist */
		}
		
		If(!sym.Match(HoldComplete(~s:Symbol))) {
			Return(True) /* name parses to something not a symbol */
		}
		
		If(Union($NamespacePath, {$Namespace}).Map(
				parseToExistingSymbol(# ++ name)&
			).Cases(
				HoldComplete(Except(Symbol(~)))
			).Length() > 1
		) {
			Return(Alternatives) /* multiple symbols with the same name */
		}
		
		/* todo: use Developer`HasBuiltinCode to distinguish functions from other symbols */
		Return(Namespace @@ sym =!= "Global`"
			|| Attributes @@ sym =!= {} 
			|| DownRules @@ sym =!= {} 
			|| UpRules @@ sym =!= {} 
			|| SubRules @@ sym =!= {} 
			|| OwnRules @@ sym =!= {});
	},
	Syntax)
}

Attributes(SymbolDefinitions):= {HoldAllComplete}
SymbolDefinitions(~sym:Symbol)::= Flatten(HoldComplete @@ Gather(
	With({r:= OwnRules(sym)},     If(Length(r) > 0, Emit(HoldComplete(OwnRules(sym):=     r))));
	With({r:= DownRules(sym)},    If(Length(r) > 0, Emit(HoldComplete(DownRules(sym):=    r))));
	With({r:= UpRules(sym)},      If(Length(r) > 0, Emit(HoldComplete(UpRules(sym):=      r))));
	With({r:= SubRules(sym)},     If(Length(r) > 0, Emit(HoldComplete(SubRules(sym):=     r))));
	With({r:= DefaultRules(sym)}, If(Length(r) > 0, Emit(HoldComplete(DefaultRules(sym):= r))));
	With({r:= FormatRules(sym)},  If(Length(r) > 0, Emit(HoldComplete(FormatRules(sym):=  r))));
	With({r:= NRules(sym)},       If(Length(r) > 0, Emit(HoldComplete(NRules(sym):=       r))));
	)[2])

SectionsToBoxes(~b)::= ReplaceRepeated(b, {Section(BoxData(~x), ~~~) :> {x, "\n"}, Section(~x, ~~~) :> {x, "\n"}, SectionGroup(~x, ~) :> x})

$NamespacePath:= oldNamespacePath

If(Length($CommandLine) > 1 && StringMatch($CommandLine[2], ~~~ ++ ".png" ++ EndOfString)) {
	FE`$WindowFrameImage:= $CommandLine[2]
}

FE`$InitialOpenDocuments:= $CommandLine.Rest.Select(Function(StringMatch(#, ~~~ ++ ".pmathdoc")))

Unprotect($ControlActiveSetting);
FE`$ControlActive:= False
$ControlActiveSetting::= Refresh(FE`$ControlActive === True, None)
Protect($ControlActiveSetting)

Function mmaInstallPaths() {
	If($SystemId === "Windows") {
		Local(win64ver)
		
		Do(win64ver -> {True, False}) {
			With(installKeys:= Try(
				Windows`RegEnumKeys("HKEY_LOCAL_MACHINE\\SOFTWARE\\Wolfram Research\\Installations", Windows`Win64Version -> win64ver),
				{},
				{General::hresult}))
			
			If(installKeys =!= {}) {
				% TODO: sort by product version, decending
				With(path:= installKeys.Windows`RegGetValue("ExecutablePath", Windows`Win64Version -> win64ver).Map(DirectoryName))
				Return(path)
			}
		}
	}
	Return({})
}

Function privateMmaFonts() {
	With(ttfDirs:= mmaInstallPaths().FileNames("SystemFiles").FileNames("Fonts").FileNames("TrueType"))
	With(ttfMmaSans:= ttfDirs.FileNames("MathematicaSans.ttf"))
	If(Length(ttfMmaSans) === 0) {
		Return({})
	}
	Return(ttfMmaSans[1].DirectoryName.FileNames("Mathematica*.ttf"))
}

$PrivateStartupFontFiles:= Join($PrivateStartupFontFiles, privateMmaFonts())


<<Documentation`

Unprotect(Developer`DebugInfoOpenerFunction)
Developer`DebugInfoOpenerFunction(src: Developer`DebugInfoSource(~:FrontEndObject, ~:Range))::= 
	Function(SetSelectedDocument(Automatic, src))
Protect(Developer`DebugInfoOpenerFunction)

End()

EndPackage()

Protect(FE`Graphics`DefaultAxesOrigin)
Protect(FE`Graphics`DefaultTickBoxes)
Protect(FE`Import`FileNamesDropDescription)
Protect(FE`Import`PasteFileNameContentBoxes)

AutoLoad(Hold(DocumentObject, FrontEndObject, FE`EvaluateDynamic, FE`AssignDynamicValue), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "frontendobject.pmath"));
AutoLoad(Hold(System`CreateDocument, System`DocumentDelete, System`DocumentGet, System`DocumentOpen, System`Documents, System`EvaluationBox, System`EvaluationDocument, System`SelectedDocument, System`SetSelectedDocument, Developer`DebugInfoOpenerFunction),
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "callfrontend.pmath"));
AutoLoad(Hold(Button, ButtonBox, Checkbox, CheckboxBox, Dynamic, DynamicBox, DynamicSetting, FillBox, Filler, InputField, InputFieldBox, Opener, OpenerBox, Panel, PanelBox, PaneSelector, PaneSelectorBox, ProgressIndicator, ProgressIndicatorBox, RadioButton, RadioButtonBar, RadioButtonBox, Setter, SetterBar, SetterBox, Slider, SliderBox, Tooltip, TooltipBox), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "guiboxes.pmath"));
AutoLoad(Hold(FE`FontDialog, FE`ColorDialog), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "dialogs.pmath"));
AutoLoad(Hold(ShowDefinition), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "showdefinition.pmath"));
AutoLoad(Hold(FE`Graphics`DefaultAxesOrigin, FE`Graphics`DefaultTickBoxes), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "graphics.pmath"));
AutoLoad(Hold(FE`Import`FileNamesDropDescription, FE`Import`PasteFileNameContentBoxes),
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "import.pmath"));
AutoLoad(Hold(FE`Styles`MakeStyleDataBoxes, FE`Styles`$DefaultDisplayFunction, FE`Styles`$DefaultDisplayFunctionTooltip), 
	ToFileName({$FrontEndDirectory, "auto", "frontend"}, "styles.pmath"));

Get(ToFileName({$FrontEndDirectory, "auto", "frontend"}, "autocompletion.pmath"))
Get(ToFileName({$FrontEndDirectory, "auto", "frontend"}, "boxestotext.pmath"))
