Begin("FE`Private`")

<<AutoCompletion`

FE`AutoCompleteName(~part:String)::=              AutoCompletion`AutoCompleteName(Names(), part)
FE`AutoCompleteName(~names:List, ~part:String)::= AutoCompletion`AutoCompleteNameNoNamespace(names, part)

FE`AutoCompleteFile(~part:String)::= AutoCompletion`AutoCompleteFullFilename(part)

FE`AutoCompleteOther(~list, ~part)::= AutoCompletion`AutoCompleteOther(list, part)

FE`Private`ParseStringContent(~str:String) ::= 
    MakeExpression(StringBox("\"" ++ str ++ "\""), ParseSymbols -> False) |>
    {HoldComplete(~s:String) :> s, ~ -> $Failed}
FE`Private`ParseStringContent(~)::= $Failed
FE`Private`MakeEscapedStringContent(~str: String)::= MakeBoxes(str) |> 
    {StringBox(~s:String) :> s |> StringReplace((StartOfString ++ "\"") | ("\"" ++ EndOfString) -> ""), 
    ~ -> $Failed}
FE`Private`MakeEscapedStringContent(~)::= $Failed
%FE`Private`MakeEscapedStringContentList(~l:List)::= l |> Map(FE`Private`MakeEscapedStringContent)

Function FE`AttachAutoCompletionPopup(~loc) {
    %Return($Failed)
    Local(prevIndex:= 0)
    Return(FE`AttachBoxes(loc, Bottom, {
        % Section(
        %     BoxData({"\"Auto completion in ", DynamicBox(ToBoxes(CurrentValue({"AttachmentSourceBox", WindowTitle})))," \[Ellipsis]\""}),
        %     "PopupWindowSection",
        %     SectionMargins -> {{4,4}, {4,2}},
        %     LineBreakWithin -> False),
        % Section(
        %     BoxData({"\"Index: \"", DynamicBox(ToBoxes(CurrentValue({"AttachmentSourceBox", "AutoCompletionSuggestionIndex"})))}),
        %     "PopupWindowSection",
        %     SectionMargins -> {{4,4}, {2,4}},
        %     LineBreakWithin -> False),
        Section(
            BoxData(DynamicBox(Block {
                With(suggestions:= CurrentValue({"AttachmentSourceBox", "AutoCompletionSuggestionsList"}))
                PaneSelectorBox({111 -> DynamicBox(
                        Array(Length(suggestions)) |>
                        Map(Function({
                            SetterBox(
                                Dynamic(CurrentValue({"AttachmentSourceBox", "AutoCompletionSuggestionIndex"}),
                                    {Automatic,
                                    Function {
                                        DocumentWrite(CurrentValue("AttachmentSource"), suggestions[#2]),
                                        DocumentClose(EvaluationDocument())
                                    }}),
                                #,
                                suggestions[#],
                                ButtonFrame -> "ListViewItem",
                                FrameMargins -> Small,
                                Alignment -> Left,
                                BoxID -> {"ResultButton", #})
                            })) |> 
                        GridBox(GridBoxRowSpacing -> 0)
                    )},
                    Dynamic(Block {
                        With(idx:= CurrentValue({"AttachmentSourceBox", "AutoCompletionSuggestionIndex"}))
                        If(idx =!= prevIndex) {
                            prevIndex:= idx
                            With(id := {"ResultButton", idx})
                            With(popup:= EvaluationDocument())
                            FE`CallFrontEnd(Block {
                                With(newbox:= FrontEnd`BoxReferenceBoxObject(FE`BoxReference(popup, {id})))
                                FrontEnd`ScrollIntoView(newbox)
                            })
                        }
                        111
                    }))
            })),
            "PopupWindowSection",
            SectionMargins -> 0,
            LineBreakWithin -> False,
            AutoSpacing -> False)
        },
        RemovalConditions -> {"MouseClickOutsidePopup", "WindowFocusLost"}, % Cannot use "SelectionExit", because then the popup would be removed as soon as we type/tab through the completions
        WindowFrame -> "ThinFrame", % "ThinFrameCallout"
        Background -> CurrentValue(loc, Background),
        FontColor -> CurrentValue(loc, FontColor)))
}

End()
