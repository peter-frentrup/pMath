/* Generating Boxes from Gui constructs */

Begin("System`Private`GuiBoxes`")

Attributes(isDynamic):= Attributes(isNumberOrDynamic):= Attributes(isStringOrDynamic):= {HoldAllComplete}
isDynamic(~):= False
isDynamic(Dynamic(~)):= True
isDynamic(Dynamic(~,~)):= True
isNumberOrDynamic(~x)::= IsNumber(Unevaluated(x)) || isDynamic(x)
isStringOrDynamic(~x)::= IsString(Unevaluated(x)) || isDynamic(x)

allowGuiBoxes::= Refresh(System`BoxForm`$UseTextFormatting =!= True, None)
Protect(allowGuiBoxes)

toBeProtected:= Unprotect(
	System`Setting`$Rules,
	Button,
	ButtonBox,
	Checkbox,
	CheckboxBox,
	Dynamic,
	DynamicBox,
	DynamicSetting,
	Opener,
	OpenerBox,
	Panel,
	PanelBox,
	PaneSelector,
	PaneSelectorBox,
	ProgressIndicator,
	ProgressIndicatorBox,
	Setter,
	SetterBar,
	SetterBox, 
	Setting,
	Slider,
	SliderBox,
	Tooltip,
	TooltipBox)

Attributes(makeNullBoxes):= {HoldAllComplete}
makeNullBoxes(/\/):= ""
makeNullBoxes(~x)::= MakeBoxes(x)


Attributes(makeSymbolBoxes):= {HoldAllComplete}
makeSymbolBoxes(~x)::= With({box:= MakeBoxes(x)}, If(IsString(box), box, {"(", box, ")"}))


Attributes(makeCallBoxes):= {HoldAllComplete}
makeCallBoxes(~h())::= {makeSymbolBoxes(h), "(", ")"}
makeCallBoxes(~h(~x))::= {makeSymbolBoxes(h), "(", MakeBoxes(x), ")"}
makeCallBoxes(~h(~~xs))::= {makeSymbolBoxes(h), "(", Unevaluated({xs}).Map(MakeBoxes).Riffle(","), ")"}


Attributes(makeGuiBoxes):= {HoldAllComplete}
makeGuiBoxes(~x)::= makeCallBoxes(x)



MakeBoxes(Button(~text, ~code, options:OptionsPattern()))::= ButtonBox(MakeBoxes(text), ButtonFunction -> (code &), options) /? allowGuiBoxes

MakeBoxes(Checkbox())::=                                               CheckboxBox(False) /? allowGuiBoxes
MakeBoxes(Checkbox(~state,               options:OptionsPattern()))::= CheckboxBox(state, options) /? allowGuiBoxes
MakeBoxes(Checkbox(~state, values:{~,~}, options:OptionsPattern()))::= CheckboxBox(state, values, options) /? allowGuiBoxes

MakeBoxes(DocumentObject(~feo:FrontEndObject))::= TemplateBox({feo}, "DocumentObject") /? allowGuiBoxes

MakeBoxes(Dynamic(~var, options:OptionsPattern())) ::= DynamicBox(ToBoxes(var), options) /? allowGuiBoxes

MakeBoxes(DynamicSetting(~expr))::= TagBox(MakeBoxes(expr), Setting) /? allowGuiBoxes

MakeBoxes(InputField())::=                                                                                                   InputFieldBox(,      Expression) /? allowGuiBoxes
MakeBoxes(InputField(~value,                                                                   options:OptionsPattern()))::= InputFieldBox(value, Expression, options) /? allowGuiBoxes
MakeBoxes(InputField(~value?isStringOrDynamic, String,                                         options:OptionsPattern()))::= InputFieldBox(value, String,     options) /? allowGuiBoxes
MakeBoxes(InputField(~value?isNumberOrDynamic, Number,                                         options:OptionsPattern()))::= InputFieldBox(value, Number,     options) /? allowGuiBoxes
MakeBoxes(InputField(~value,                   type: Expression | RawBoxes | Hold(Expression), options:OptionsPattern()))::= InputFieldBox(value, type,       options) /? allowGuiBoxes


MakeBoxes(~x: Opener)::= makeGuiBoxes(x) /? allowGuiBoxes

makeGuiBoxes(Opener())::=                                 OpenerBox(False)
makeGuiBoxes(Opener(~state, options:OptionsPattern()))::= OpenerBox(state, options)


MakeBoxes(Panel())::=                                 PanelBox("") /? allowGuiBoxes
MakeBoxes(Panel(~expr, options:OptionsPattern()))::=  PanelBox(MakeBoxes(expr), options) /? allowGuiBoxes


MakeBoxes(~p: PaneSelector)::= makeGuiBoxes(p) /? allowGuiBoxes

Attributes(HOLD):= {HoldAllComplete}

makeGuiBoxes(PaneSelector(panes: {~~}, ~sel, options:OptionsPattern()))::= 
	PaneSelectorBox(paneSelectorListToBoxes(panes), sel, options).Replace(HOLD(~x) :> x)
makeGuiBoxes(PaneSelector(panes: {~~}, ~sel, ~def, options:OptionsPattern()))::= 
	PaneSelectorBox(paneSelectorListToBoxes(panes), sel, MakeBoxes(def), options).Replace(HOLD(~x) :> x)

Attributes(paneSelectorRuleToBoxes):= {HoldAll}
paneSelectorRuleToBoxes(~val:HoldPattern -> ~pane)::=             val  -> makeNullBoxes(pane)
paneSelectorRuleToBoxes(~val             -> ~pane)::= HoldPattern(val) -> makeNullBoxes(pane)
paneSelectorRuleToBoxes(~val:HoldPattern :> ~pane)::= RuleDelayed @@ {            val,  makeNullBoxes(pane)}
paneSelectorRuleToBoxes(~val             :> ~pane)::= RuleDelayed @@ {HoldPattern(val), makeNullBoxes(pane)}

Attributes(paneSelectorListToBoxes):= {HoldAll}
paneSelectorListToBoxes(rules: {(Rule|RuleDelayed)(~,~)**})::= Unevaluated(rules).Map(paneSelectorRuleToBoxes)
paneSelectorListToBoxes(~values: List)::= With({indices:= Array(Length(Unevaluated(values)))}, 
	Unevaluated({indices, values}).MapThread(Function(,paneSelectorRuleToBoxes(#1 -> #2),HoldAllComplete)))


MakeBoxes(ProgressIndicator())::=                                     ProgressIndicatorBox(0, 0..1) /? allowGuiBoxes
MakeBoxes(ProgressIndicator(~val ? isNumberOrDynamic))::=             ProgressIndicatorBox(val, 0..1) /? allowGuiBoxes
MakeBoxes(ProgressIndicator(~val ? isNumberOrDynamic, ~min..~max))::= ProgressIndicatorBox(val, min..max) /? allowGuiBoxes

MakeBoxes(RadioButton())::=                                         RadioButtonBox(False) /? allowGuiBoxes
MakeBoxes(RadioButton(~state))::=                                   RadioButtonBox(state) /? allowGuiBoxes
MakeBoxes(RadioButton(~state, ~value, options:OptionsPattern()))::= RadioButtonBox(state, value, options) /? allowGuiBoxes


MakeBoxes(rb: RadioButtonBar(~var:Dynamic, values:{((~ -> ~) | (~ :> ~))**}, options:OptionsPattern()))::= 
	With({boxes:= ToBoxes(Grid({values.Map(Setter(var, #[1], Row({RadioButton(var, #[1]), #[2]}, "\[InvisibleSpace]"), ButtonFrame->None)&)}))},
		InterpretationBox(boxes, rb)) /? allowGuiBoxes

MakeBoxes(rb: RadioButtonBar(~var:Dynamic, values:{~~}, options:OptionsPattern()))::= 
	With({boxes:= ToBoxes(Grid({values.Map(Setter(var, #, Row({RadioButton(var, #), #}, "\[InvisibleSpace]"), ButtonFrame->None)&)}))},
		InterpretationBox(boxes, rb)) /? allowGuiBoxes

MakeBoxes(RadioButtonBar(val: Except(~:Dynamic), values:{~~}, options:OptionsPattern()))::=
	TagBox(
		DynamicLocalBox({var}, 
			MakeBoxes(Interpretation(
				RadioButtonBar(Dynamic(var), values, options), 
				RadioButtonBar(var, values, options))), 
			DynamicLocalValues :> {var:= val}),
		Setting(#, 0) &) /? allowGuiBoxes

MakeBoxes(Setter(~var, ~value,                                    options:OptionsPattern()))::= SetterBox(var, value, MakeBoxes(value), options) /? allowGuiBoxes
MakeBoxes(Setter(~var, ~value, label:Except((~ -> ~) | (~ :> ~)), options:OptionsPattern()))::= SetterBox(var, value, MakeBoxes(label), options) /? allowGuiBoxes


MakeBoxes(sb: SetterBar(~var:Dynamic, values:{((~ -> ~) | (~ :> ~))**}, options:OptionsPattern(SetterBar)))::= 
	With({boxes:= Riffle(values.Map(ToBoxes(Setter(var, #[1], #[2], options))&), "\[InvisibleSpace]")},
		InterpretationBox(boxes, sb)) /? allowGuiBoxes

MakeBoxes(sb: SetterBar(~var:Dynamic, values:{~~}, options:OptionsPattern(SetterBar)))::= 
	With({boxes:= Riffle(values.Map(ToBoxes(Setter(var, #, options))&), "\[InvisibleSpace]")},
		InterpretationBox(boxes, sb)) /? allowGuiBoxes

MakeBoxes(SetterBar(val: Except(~:Dynamic), values:{~~}, options:OptionsPattern(SetterBar)))::=
	TagBox(
		DynamicLocalBox({var}, 
			MakeBoxes(Interpretation(
				SetterBar(Dynamic(var), values, options), 
				SetterBar(var, values, options))), 
			DynamicLocalValues :> {var:= val}),
		Setting(#, 0) &) /? allowGuiBoxes

MakeBoxes(Slider(                                                  options:OptionsPattern()))::= SliderBox(0.5, 0..1, options) /? allowGuiBoxes
MakeBoxes(Slider(~val ? isNumberOrDynamic,                         options:OptionsPattern()))::= SliderBox(val, 0..1, options) /? allowGuiBoxes
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max,             options:OptionsPattern()))::= SliderBox(val, min..max, options) /? allowGuiBoxes
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max..~step,      options:OptionsPattern()))::= SliderBox(val, min..max..step, options) /? allowGuiBoxes
MakeBoxes(Slider(~val ? isNumberOrDynamic, Except({}, ~vals:List), options:OptionsPattern()))::= SliderBox(val, vals, options) /? allowGuiBoxes


MakeBoxes(Tooltip(~content, ~tooltip, options:OptionsPattern()))::= TooltipBox(MakeBoxes(content), MakeBoxes(tooltip), options) /? allowGuiBoxes



Attibutes(extractFunctionBody):= {HoldAllComplete}

extractFunctionBody(Function(~body))::= HoldComplete(body)
extractFunctionBody(~body)::= HoldComplete(body())

Attibutes(extractButtonFunction):= {HoldAllComplete}

extractButtonFunction({~~~opt})::= extractButtonFunction(opt)
extractButtonFunction(~~~opt1, (Rule|RuleDelayed)(ButtonFunction, ~fn), ~~~opt2)::= {extractFunctionBody(fn), {opt1, opt2}}
extractButtonFunction(~~~opt)::= {HoldComplete(/\/), {opt}}

ButtonBox/: MakeExpression(ButtonBox(~contentBoxes, opt: OptionsPattern()))::= 
	Local({head},
		With({tmp:= extractButtonFunction(opt), content:= MakeExpression(contentBoxes)},
			With({fn:= tmp[1], opt2:= tmp[2]},
				If(fn === $Failed, Return($Failed));
				HoldComplete(Button(head(content), head(fn), head(opt2))).Replace(
					{head(HoldComplete(~x)) :> x, 
					 head({~~~args})        :> Sequence(args), 
					 head(~)                :> $Failed})
				)
			)
		)

CheckboxBox/: MakeExpression(CheckboxBox(~state))::=                                    HoldComplete(Checkbox(state))
CheckboxBox/: MakeExpression(CheckboxBox(~state, ~values, options:OptionsPattern()))::= HoldComplete(Checkbox(state, values, options))

DynamicBox/: MakeExpression(DynamicBox(ToBoxes(~var), options:OptionsPattern()))::= HoldComplete(Dynamic(var, options))

InputFieldBox/: MakeExpression(InputFieldBox(~value, ~type, options:OptionsPattern()))::= HoldComplete(InputField(value, type, options))

OpenerBox/: MakeExpression(OpenerBox(~state))::=                           HoldComplete(Opener(state))
OpenerBox/: MakeExpression(OpenerBox(~state, options:OptionsPattern()))::= HoldComplete(Opener(state, options))

PanelBox/: MakeExpression(PanelBox(~content, options:OptionsPattern()))::= 
	With({c:= MakeExpression(content)},
		If(c === $Failed, Return($Failed));
		HoldComplete(Panel(c, options)).Replace({HoldComplete(~x) :> x}, 2)
		)


makeNullExpression("")::= HoldComplete(/\/)
makeNullExpression({})::= HoldComplete(/\/)
makeNullExpression(~boxes)::= MakeExpression(boxes)

wrapHoldCompleteAsHOLD(HoldComplete())::= HOLD(Sequence())
wrapHoldCompleteAsHOLD(HoldComplete(~x))::= HOLD(x)
wrapHoldCompleteAsHOLD(HoldComplete(~~x))::= HOLD(Sequence(x))
wrapHoldCompleteAsHOLD(~)::= $Failed

PaneSelectorBox/: MakeExpression(PaneSelectorBox(~list:List, ~val, opts: OptionsPattern()))::=
	With({panes:= paneSelectorListToExpr(list)},
		HoldComplete(PaneSelector(panes, val, opts)).Replace(HOLD(~x) :> x))

PaneSelectorBox/: MakeExpression(PaneSelectorBox(~list:List, ~val, ~def, opts: OptionsPattern()))::=
	With({panes:= paneSelectorListToExpr(list), defpane:= wrapHoldCompleteAsHOLD @ MakeExpression(def)},
		HoldComplete(PaneSelector(panes, val, defpane, opts)).Replace(HOLD(~x) :> x))

paneSelectorRuleToExpr(~val -> ~paneboxes)::=                 HOLD(val) -> wrapHoldCompleteAsHOLD @ makeNullExpression(paneboxes)
paneSelectorRuleToExpr(~val :> ~paneboxes)::= RuleDelayed @@ {HOLD(val),   wrapHoldCompleteAsHOLD @ makeNullExpression(paneboxes)}
paneSelectorRuleToExpr(~paneboxes)::= wrapHoldCompleteAsHOLD @ makeNullExpression(paneboxes)

paneSelectorListToExpr(~rules: List)::= rules.Map(paneSelectorRuleToExpr)

ProgressIndicatorBox/: MakeExpression(ProgressIndicatorBox(~val, 0..1))::=   HoldComplete(ProgressIndicator(val))
ProgressIndicatorBox/: MakeExpression(ProgressIndicatorBox(~val, ~range))::= HoldComplete(ProgressIndicator(val, range))

RadioButtonBox/: MakeExpression(RadioButtonBox(~state))::=                                   HoldComplete(RadioButton(state))
RadioButtonBox/: MakeExpression(RadioButtonBox(~state, ~value, options:OptionsPattern()))::= HoldComplete(RadioButton(state, value, options))

SetterBox/: MakeExpression(SetterBox(~var, ~value, ~labelBoxes, options:OptionsPattern()))::= 
	Local({head},
		With({label:= MakeExpression(labelBoxes)},
			HoldComplete(Setter(var, value, head(label), options)).Replace(
				{head(HoldComplete(~x)) :> x,
				 head(~)                :> $Failed})
			)
		)

SliderBox/: MakeExpression(SliderBox(~val, 0..1,   options:OptionsPattern()))::= HoldComplete(Slider(val, options))
SliderBox/: MakeExpression(SliderBox(~val, ~range, options:OptionsPattern()))::= HoldComplete(Slider(val, range, options))

TooltipBox/: MakeExpression(TooltipBox(~content, ~tooltip, options:OptionsPattern()))::= 
	With({c:= MakeExpression(content), t:= MakeExpression(tooltip)},
		If(c === $Failed ||t === $Failed, Return($Failed));
		HoldComplete(Tooltip(c, t, options)).Replace({HoldComplete(~x) :> x}, 2)
		)


System`Setting`$Rules:= Join(System`Setting`$Rules, {
	(Checkbox|Dynamic|InputField|Opener|ProgressIndicator|RadioButton|Setter|SetterBar|Slider)(~x, ~~~) :> x,
	(Checkbox|Opener)() :> False,
	PaneSelector(~, ~x, ~~~) :> x,
	ProgressIndicator() :> 0,
	Slider() :> 0.5});


Protect @@ toBeProtected

End()
