/* Generating Boxes from Gui constructs */

Begin("System`Private`GuiBoxes`")

isDynamic(~):= False
isDynamic(Dynamic(~)):= True
isDynamic(Dynamic(~,~)):= True
isNumberOrDynamic(~x)::= IsNumber(x) || isDynamic(x)

toBeProtected:= Unprotect(
	Button,
	ButtonBox,
	Checkbox,
	CheckboxBox,
	Dynamic,
	DynamicBox,
	DynamicSetting,
	ProgressIndicator,
	ProgressIndicatorBox,
	Setter,
	SetterBar,
	SetterBox, 
	Setting,
	Slider,
	SliderBox)

MakeBoxes(Button(~text, ~code, options:OptionsPattern()))::= ButtonBox(MakeBoxes(text), ButtonFunction -> (code &), options)

MakeBoxes(Checkbox())::=                                               CheckboxBox(False)
MakeBoxes(Checkbox(~state,               options:OptionsPattern()))::= CheckboxBox(state, options)
MakeBoxes(Checkbox(~state, values:{~,~}, options:OptionsPattern()))::= CheckboxBox(state, values, options)

MakeBoxes(Dynamic(~var, options:OptionsPattern()))::= DynamicBox(ToBoxes(var), options)

MakeBoxes(DynamicSetting(~expr))::= TagBox(MakeBoxes(expr), Setting)

MakeBoxes(ProgressIndicator())::=                                     ProgressIndicatorBox(0, 0..1)
MakeBoxes(ProgressIndicator(~val ? isNumberOrDynamic))::=             ProgressIndicatorBox(val, 0..1)
MakeBoxes(ProgressIndicator(~val ? isNumberOrDynamic, ~min..~max))::= ProgressIndicatorBox(val, min..max)

MakeBoxes(RadioButton())::=                                         RadioButtonBox(False)
MakeBoxes(RadioButton(~state))::=                                   RadioButtonBox(state)
MakeBoxes(RadioButton(~state, ~value, options:OptionsPattern()))::= RadioButtonBox(state, value, options)


MakeBoxes(rb: RadioButtonBar(~var:Dynamic, values:{((~ -> ~) | (~ :> ~))**}, options:OptionsPattern()))::= 
	With({boxes:= ToBoxes(Grid({values.Map(Row({RadioButton(var, #[1]), #[2]}, "\[InvisibleSpace]")&)}))},
		InterpretationBox(boxes, rb))

MakeBoxes(rb: RadioButtonBar(~var:Dynamic, values:{~~}, options:OptionsPattern()))::= 
	With({boxes:= ToBoxes(Grid({values.Map(Row({RadioButton(var, #), #}, "\[InvisibleSpace]")&)}))},
		InterpretationBox(boxes, rb))

/* TODO: use DynamicLocal */
MakeBoxes(RadioButtonBar(val: Except(~:Dynamic), values:{~~}, options:OptionsPattern()))::=
	Local({var:= val},
		MakeBoxes(RadioButtonBar(Dynamic(var), values, options)))


MakeBoxes(Setter(~var, ~value, options:OptionsPattern()))::=         SetterBox(var, value, MakeBoxes(value), options)
MakeBoxes(Setter(~var, ~value, ~label, options:OptionsPattern()))::= SetterBox(var, value, MakeBoxes(label), options)


MakeBoxes(sb: SetterBar(~var:Dynamic, values:{((~ -> ~) | (~ :> ~))**}, options:OptionsPattern(SetterBar)))::= 
	With({boxes:= ToBoxes(Row(values.Map(Setter(var, #[1], #[2], options)&), "\[InvisibleSpace]"))},
		InterpretationBox(boxes, sb))

MakeBoxes(sb: SetterBar(~var:Dynamic, values:{~~}, options:OptionsPattern(SetterBar)))::= 
	With({boxes:= ToBoxes(Row(values.Map(Setter(var, #, options)&), "\[InvisibleSpace]"))},
		InterpretationBox(boxes, sb))

/* TODO: use DynamicLocal */
MakeBoxes(SetterBar(val: Except(~:Dynamic), values:{~~}, options:OptionsPattern(SetterBar)))::=
	Local({var:= val},
		MakeBoxes(SetterBar(Dynamic(var), values, options)))

MakeBoxes(Slider(                                                  options:OptionsPattern()))::= SliderBox(0.5, 0..1, options)
MakeBoxes(Slider(~val ? isNumberOrDynamic,                         options:OptionsPattern()))::= SliderBox(val, 0..1, options)
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max,             options:OptionsPattern()))::= SliderBox(val, min..max, options)
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max..~step,      options:OptionsPattern()))::= SliderBox(val, min..max..step, options)
MakeBoxes(Slider(~val ? isNumberOrDynamic, Except({}, ~vals:List), options:OptionsPattern()))::= SliderBox(val, vals, options)




Attibutes(extractFunctionBody):= {HoldAllComplete}

extractFunctionBody(Function(~body))::= HoldComplete(body)
extractFunctionBody(~body)::= HoldComplete(body())

Attibutes(extractButtonFunction):= {HoldAllComplete}

extractButtonFunction({~~~opt})::= extractButtonFunction(opt)
extractButtonFunction(~~~opt1, (Rule|RuleDelayed)(ButtonFunction, ~fn), ~~~opt2)::= {extractFunctionBody(fn), {opt1, opt2}}
extractButtonFunction(~~~opt)::= {HoldComplete(/\/), {opt}}

ButtonBox/: MakeExpression(ButtonBox(~contentBoxes, opt: OptionsPattern()))::= 
	Local({head},
		With({tmp:= extractButtonFunction(opt), content:= MakeExpression(contentBoxes)},
			With({fn:= tmp[1], opt2:= tmp[2]},
				HoldComplete(Button(head(content), head(fn), head(opt2))).Replace(
					{head(HoldComplete(~x)) :> x, 
					 head({~~~args})        :> Sequence(args), 
					 head(~)                :> $Failed})
				)
			)
		)

CheckboxBox/: MakeExpression(CheckboxBox(~state))::=                                    HoldComplete(Checkbox(state))
CheckboxBox/: MakeExpression(CheckboxBox(~state, ~values, options:OptionsPattern()))::= HoldComplete(Checkbox(state, values, options))

DynamicBox/: MakeExpression(DynamicBox(ToBoxes(~var), options:OptionsPattern()))::= HoldComplete(Dynamic(var, options))

ProgressIndicatorBox/: MakeExpression(ProgressIndicatorBox(~val, 0..1))::=   HoldComplete(ProgressIndicator(val))
ProgressIndicatorBox/: MakeExpression(ProgressIndicatorBox(~val, ~range))::= HoldComplete(ProgressIndicator(val, range))

RadioButtonBox/: MakeExpression(RadioButtonBox(~state))::=                                   HoldComplete(RadioButton(state))
RadioButtonBox/: MakeExpression(RadioButtonBox(~state, ~value, options:OptionsPattern()))::= HoldComplete(RadioButton(state, value, options))

SetterBox/: MakeExpression(SetterBox(~var, ~value, ~labelBoxes, options:OptionsPattern()))::= 
	Local({head},
		With({label:= MakeExpression(labelBoxes)},
			HoldComplete(Setter(var, value, head(label), options)).Replace(
				{head(HoldComplete(~x)) :> x,
				 head(~)                :> $Failed})
			)
		)

SliderBox/: MakeExpression(SliderBox(~val, 0..1,   options:OptionsPattern()))::= HoldComplete(Slider(val, options))
SliderBox/: MakeExpression(SliderBox(~val, ~range, options:OptionsPattern()))::= HoldComplete(Slider(val, range, options))



Setting(~expr)::= ReplaceRepeated(expr, 
	{(Checkbox|Dynamic|ProgressIndicator|RadioButton|Setter|SetterBar|Slider)(~x, ~~~) :> x,
	ProgressIndicator() :> 0,
	Slider() :> 0.5})

Protect @@ toBeProtected

End()
