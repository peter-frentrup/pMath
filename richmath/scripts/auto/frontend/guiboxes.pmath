/* Generating Boxes from Gui constructs */

Begin("System`Private`GuiBoxes`")

isDynamic(~):= False
isDynamic(Dynamic(~)):= True
isDynamic(Dynamic(~,~)):= True
isNumberOrDynamic(~x)::= IsNumber(x) || isDynamic(x)

toBeProtected:= Unprotect(Button, Dynamic, Setter, Slider)

MakeBoxes(Button(~text, ~code, options:OptionsPattern()))::= ButtonBox(MakeBoxes(text), ButtonFunction -> (code &), options)

MakeBoxes(Dynamic(~var, options:OptionsPattern()))::= DynamicBox(ToBoxes(var), options)

MakeBoxes(Setter(~var, ~value, options:OptionsPattern()))::=         SetterBox(var, value, MakeBoxes(value), options)
MakeBoxes(Setter(~var, ~value, ~label, options:OptionsPattern()))::= SetterBox(var, value, MakeBoxes(label), options)

SetterBar(~var, values:{((~ -> ~) | (~ :> ~))**}, options:OptionsPattern()) ::= Row(values.Map(Setter(var, #[1], #[2], options)&), "\[InvisibleSpace]")
SetterBar(~var, values:{~~}, options:OptionsPattern()) ::= Row(values.Map(Setter(var, #, options)&), "\[InvisibleSpace]")

MakeBoxes(Slider(~val ? isNumberOrDynamic))::=                         SliderBox(val, 0..1)
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max))::=             SliderBox(val, min..max)
MakeBoxes(Slider(~val ? isNumberOrDynamic, ~min..~max..~step))::=      SliderBox(val, min..max..step)
MakeBoxes(Slider(~val ? isNumberOrDynamic, Except({}, ~vals:List)))::= SliderBox(val, vals)

Protect @@ toBeProtected

End()
