Begin("FE`")

FE`InsertSpecial

Begin("FE`Private`")

FE`InsertSpecial()::= FE`InsertSpecial(EvaluationDocument())
Function FE`InsertSpecial(~doc) {
    With(selboxes:=DocumentRead(doc))
    insertSpecialAt(doc, selboxes, Developer`GetDebugMetadata(selboxes))
}

getInputAliasesFor(~, ~)::= CurrentValue(InputAliases)

Function getInputAliasesFor(~selboxes, Language`SourceLocation(~feo:FrontEndObject, ~range)) {
     With(allMacros:= CurrentValue(feo, InputAliases) |> Cases(Except(~ -> ("\[Placeholder]" | "\[SelectionPlaceholder]"))))
     If(Match(range, ~x .. ~x) || selboxes === "\[Placeholder]" || selboxes === "\[SelectionPlaceholder]") {
        allMacros
     } Else {
        allMacros |>
            Select(Function( #[2] |> 
                Position(~s:String /? StringPosition(s, "\[Placeholder]" | "\[SelectionPlaceholder]") =!= {}) =!= {}))
     }
}

Function insertSpecialAt(~doc, ~selboxes, ~loc) {
    With(allMacros:= getInputAliasesFor(selboxes, loc))
    Local(popup:= $Failed, macroName:= "", matches:= {}, allowEmpty:= False, selIndex:= 0)
    popup:= FE`AttachBoxes(loc, Bottom, {
        Section(
            BoxData({"\"Insert: \"",FillBox(InputFieldBox(Dynamic(macroName),String,ContinuousAction->True))}),
            "PopupWindowSection",
            SectionMargins -> {{4,4}, {4,2}},
            LineBreakWithin -> False),
        % Section(BoxData(DynamicBox(ToBoxes(selIndex))), 
        %     "PopupWindowSection",
        %     SectionMargins -> {{4,4}, {4,2}},
        %     LineBreakWithin -> False),
        Section(BoxData(DynamicBox(
            If(macroName === "" && !allowEmpty) {
                StringForm("Type an `1` name", Button("input alias", allowEmpty:=True, BaseStyle -> "Hyperlink")) |> ToBoxes
            } Else {
                With(m:= allMacros |> Select(Function(StringMatch(#[1], macroName ++ ~~~, IgnoreCase->True)))) {
                    If(matches =!= m) {
                        If(1 <= selIndex <= Length(matches)) {
                            selIndex:= m |> Position(matches[selIndex], 1) |> Append({0}) |> Part(1, 1)
                        }
                        matches:= m
                    }
                }
                If(matches === {}) {
                    ToBoxes(StringForm("\[HighSixDoubleQuote]`1`\[HighNineDoubleQuote] not found", macroName))
                } Else {
                    Array(Length(matches)) |> 
                        Map(Function({
                            ButtonBox({
                                    PaneBox(makeAliasBoxes(matches[#, 1]),
                                        ImageSize -> {75, Automatic}, LineBreakWithin -> False), 
                                    PaneBox({makeBoxesVisible(matches[#, 2]), " "},
                                        ImageSize -> {150, Automatic}, 
                                        ImageSizeAction -> "Clip",
                                        LineBreakWithin -> False)},
                                ButtonData -> matches[#, 2],
                                ButtonFrame -> Dynamic(
                                    If(# === selIndex) { 
                                        "ListViewItemSelected"
                                    } Else {
                                        "ListViewItem"
                                    }),
                                ButtonFunction -> Function(
                                    DocumentClose(popup); DocumentApply(doc,#)),
                                BoxID -> {"ResultButton", #})
                            })) |>
                        GridBox
                }
            })),
            "PopupWindowSection",
            ButtonBoxOptions -> { ButtonFrame -> "ListViewItem" },
            SectionMargins -> {{4,4}, {2,4}},
            LineBreakWithin -> False)},
        WindowFrame -> "ThinFrameCallout",
        DocumentEventActions -> {
            "EscapeKeyDown" -> Function(DocumentClose(popup);Break()),
            "UpArrowKeyDown" -> Function {
                If(selIndex > 1) {
                    selIndex-= 1
                    With(id := {"ResultButton", selIndex})
                    With(popup:= popup)
                    FE`CallFrontEnd(
                        FE`BoxReference(popup, {id}) |>
                        FrontEnd`BoxReferenceBoxObject |>
                        FrontEnd`ScrollIntoView)
                }
                Break()
            },
            "DownArrowKeyDown" -> Function {
                If(selIndex < Length(matches)) {
                    selIndex+= 1
                    With(id := {"ResultButton", selIndex})
                    With(popup:= popup)
                    FE`CallFrontEnd(
                        FE`BoxReference(popup, {id}) |>
                        FrontEnd`BoxReferenceBoxObject |>
                        FrontEnd`ScrollIntoView)
                }
                Break()
            },
            "ReturnKeyDown" -> Function {
                If(1 <= selIndex <= Length(matches)) {
                    DocumentClose(popup)
                    DocumentApply(doc, matches[selIndex, 2])
                    Break()
                } Else {
                    With(apply := Lookup(matches, macroName, $Failed))
                    If(apply =!= $Failed) {
                        DocumentClose(popup)
                        DocumentApply(doc, apply)
                        Break()
                    }
                }
            }
        },
        RemovalConditions -> {"MouseClickOutsidePopup", "SelectionExit"})
    SetSelectedDocument(popup)
}

makeAliasBoxes(~s)::= s |> StringReplace(" " -> "\(StyleBox(\"\[U+2423]\", FontColor -> GrayLevel(0.5))\)") |> ToBoxes

makeBoxesVisible(~box)::= box
makeBoxesVisible(ButtonBox(~~~b))::= ButtonBox(b, ButtonFrame -> Automatic)
Function makeBoxesVisible(~s:String) {
    With(chars:= ToCharacterCode(s))
    If(Length(chars) === 1 || (Length(chars) === 2 && 16^^D800 <= chars[1] <= 16^^DBFF)) {
        Return({
            PaneBox(s, ImageSize -> {25, Automatic}, LineBreakWithin -> False), 
            StyleBox(InputForm(s) |> ToString, FontColor -> Gray)})
    } Else {
        s
    }
}

End()

End()
