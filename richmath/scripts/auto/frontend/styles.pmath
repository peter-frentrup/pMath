
BeginPackage("FE`Styles`")

MakeStyleDataBoxes
$DefaultDisplayFunction
$DefaultDisplayFunctionTooltip

Begin("FE`Styles`Private`")

MakeStyleDataBoxes(~)::= asStyleDataLabelBox("\"Unknown StyleData syntax\"")
MakeStyleDataBoxes(HoldComplete(StyleData(~name:String, ~~~)))::= 
    asStyleDataExampleBox(
        MakeBoxes(StringForm("Local definition for style \[HighSixDoubleQuote]`1`\[HighNineDoubleQuote]:", name)),
        name
    )
MakeStyleDataBoxes(HoldComplete(StyleData(~name:String, ~~~, StyleDefinitions -> None, ~~~)))::= 
    asStyleDataExampleBox(
        MakeBoxes(StringForm("Local re-definition for style \[HighSixDoubleQuote]`1`\[HighNineDoubleQuote]:", name)),
        name
    )
MakeStyleDataBoxes(HoldComplete(StyleData(~name:String, ~~~, StyleDefinitions -> StyleData(~basename:String, ~~~), ~~~)))::= 
    asStyleDataExampleBox(
        MakeBoxes(StringForm(
            "Local definition for style \[HighSixDoubleQuote]`1`\[HighNineDoubleQuote], based on \[HighSixDoubleQuote]`2`\[HighNineDoubleQuote]:", 
            name,
            RawBoxes@TemplateBox({basename}, "StyleHyperlink"))),
        name
    )
    
Function MakeStyleDataBoxes(HoldComplete(StyleData(StyleDefinitions -> ~name:String))) {
    asStyleDataExampleBox(
        StringBox(
            "\"Include definitions from stylesheet \[HighSixDoubleQuote]", 
            TemplateBox({name}, "StylesheetHyperlink"),
            "\[HighNineDoubleQuote]\""),
        name
    )
}

asStyleDataLabelBox(~labelTextBox)::=
    StyleBox(
        labelTextBox,
        "SystemResetStyle", FontFamily->"Arial", ShowStringCharacters->False
    )

Function asStyleDataExampleBox(~labelTextBox, ~exampleBox) {
    With(lbl:= asStyleDataLabelBox(labelTextBox))

    TemplateBox({False}, "", Tooltip -> None, DisplayFunction -> Function(
        StyleBox(
            GridBox({{{lbl, OpenerBox(#1)}},
                {PaneSelectorBox({True -> 
                    GridBox({{"  ", ""}, {"", DynamicBox(asStyleDataLabelBox(
                        ToBoxes @ Grid(
                            DocumentGet(CurrentValue(Section)).Replace({
                                    Section(~,~~~rest):>{rest}
                                }, 0).Replace(
                                    {{}->{"(nothing)"}
                                }, 0).Map(Function(makePropertyGridEntries("", {Section}, #))).Flatten(1)
                        )))}, {"", ""}}, GridBoxRowSpacing -> 0.2)
                }, #1)},
                {exampleBox}},
                BaselinePosition -> -1, GridBoxColumnSpacing -> 0, GridBoxRowSpacing -> 0),
            AutoSpacing->False)
    ))
}

$styleOptionAlternatives:= BaseStyle | DefaultDuplicateSectionStyle | DefaultNewSectionStyle | DefaultReturnCreatedSectionStyle
makePropertyGridEntries(~pre, ~parts, (l: $styleOptionAlternatives) -> ~s:String)::= {{makePropertyGridLabel(pre, l), "\[Rule]", makePropertyGridStyleValue(parts.Append(l), s)}}
makePropertyGridEntries(~pre, ~parts, Rule(~l, ~r))::=           {{makePropertyGridLabel(pre, l),         "\[Rule]",        makePropertyGridValue(parts.Append(l), r)}}
makePropertyGridEntries(~pre, ~parts, RuleDelayed(~l, ~r))::=    {{makePropertyGridLabel(pre, l),         "\[RuleDelayed]", makePropertyGridValue(parts.Append(l), HoldForm(r))}}
makePropertyGridEntries(~pre, ~parts, ~x)::=                     {{"",                                    "",               makePropertyGridValue(parts, x)}}
Function makePropertyGridEntries(~pre, ~parts, Rule(~l, r: {((Rule|RuleDelayed)(~,~))**})) {
    {{makePropertyGridLabel(pre, l), "\[Rule]", ColonForm({Subscript("\[Ellipsis]", Length(r))}, "")}}.Join(
        r.Map(Function(makePropertyGridEntries(pre ++ "  ", parts.Append(l), #))).Flatten(1))
}
Function makePropertyGridEntries(~pre, ~parts, RuleDelayed(~l, r: {((Rule|RuleDelayed)(~,~))**})) {
    {{makePropertyGridLabel(pre, l), "\[RuleDelayed]", ColonForm({Subscript("\[Ellipsis]", Length(Unevaluated(r)))}, "")}}.Join(
        r.Map(Function(makePropertyGridEntries(pre ++ "  ", parts.Append(l), #))).Flatten(1))
}

makePropertyGridLabel(~pre, ~post)::= Row({pre, post})

makePropertyGridSeparator(~f):=          RawBoxes(OverscriptBox("\[Rule]", ToBoxes(Shallow(f))))
makePropertyGridSeparator(Rule):=        "\[Rule]"
makePropertyGridSeparator(RuleDelayed):= "\[RuleDelayed]"

makePropertyGridValue(~parts, ~x)::= Short(x)
makePropertyGridValue(~parts, d:Dynamic(~~~args))::= Grid({
        {Short(HoldForm(HoldForm(Dynamic)(args)))}, 
        {Short(d)}}, BaselinePosition -> 1)
makePropertyGridValue(~parts, True)::=  makePropertyGridBooleanValue(parts, True)
makePropertyGridValue(~parts, False)::= makePropertyGridBooleanValue(parts, False)
makePropertyGridValue(~parts, col: RGBColor(~,~,~))::= makePropertyGridColorValue(parts, col)
makePropertyGridValue(~parts, col: GrayLevel(~))::=    makePropertyGridColorValue(parts, col)

Function makePropertyGridBooleanValue(~parts, ~val) {
    Row({
        Checkbox(Dynamic(;val, Function(CurrentValue(parts):= #))),
        " ", 
        Short(val)})
}

Function makePropertyGridColorValue(~parts, ~col) {
    Row({
        Button(
            Framed("    ", Background -> col),
            With(newcol:= FE`ColorDialog(col)) {
                If(newcol =!= $Canceled && newcol =!= $Failed) {
                    CurrentValue(parts):= newcol
                }
            },
            ButtonFrame->"Palette"), 
        " ", 
        Short(col)})
}

Function makePropertyGridStyleValue(~parts, ~name) {
    RawBoxes@{TemplateBox({name}, "StyleHyperlink"), "\[InvisibleSpace]"}
}

$DefaultDisplayFunction(~tag:String)::= Function(
    FrameBox(
        {tag, "(", 
            %TemplateSlotSequence(1, ","),
            TemplateSlotSequence(##1, Function(FrameBox(#1).StyleBox("TemplateBoxErrorDisplayArgumentStyle")), ","),
            %{##1}.Map(Function(FrameBox(#1).StyleBox("TemplateBoxErrorDisplayArgumentStyle"))).Riffle(","), 
            ")"}
    ).StyleBox("TemplateBoxErrorDisplayStyle")
)

$DefaultDisplayFunctionTooltip(~tag:String)::= 
    StringBox(
        "\"The TemplateBox was unable to use the specified display function, \
        or could not locate the display function for \[HighSixDoubleQuote]",
        tag,
        "\[HighNineDoubleQuote] because a style sheet is missing\""
    ).StyleBox("Message")
    
$DefaultDisplayFunctionTooltip(~~~)::= 
    (
        "\"The TemplateBox was unable to use the specified display function\""
    ).StyleBox("Message")

End()

EndPackage()

