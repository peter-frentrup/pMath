/* Helper functions for GraphicsBox */

BeginPackage("FE`Graphics`")

FE`Graphics`DefaultAxesOrigin
FE`Graphics`DefaultTickBoxes

Begin("FE`Graphics`Private`")


stepSize(~width ? IsPositive)::= 
	First @ Select(
		{5,10,20,50} 10^(Round @ Log(10, width) - 2), 
		width < 8 # &, 
		1)

smallTickPositions(~start .. ~end) /? start < end ::=
	With({step:= stepSize(stepSize(end - start))},
		N @ Array(Ceiling(start, step) .. end .. step))
		
largeTickPositions(~start .. ~end) /? start < end ::=
	With({step:= stepSize(end - start)},
		N @ Array(Ceiling(start, step) .. end .. step))

snapRange(~start .. ~end) /? start < end ::=
	With({err:= (end - start) * 10^-5, step:= stepSize(end - start)},
		With({f:= Floor(start, step), c:= Ceiling(end, step)},
			If(start - f < err, f, start, start) .. If(c - end < err, c, end, end)
			)
		)

isSmallInt(~s:String)::= s.StringMatch((".0`" | ".0") ++ EndOfString)
isSmallInt(~)::= False
allLabelsAreSmallInt(~ticks)::= And @@ ticks.Map(isSmallInt(#[2]) &)

makeIntTick({~x, ~lblBox, ~~~rest})::= {x, lblBox.StringReplace((".0`" | ".0") ++ EndOfString :> ""), rest}

DefaultAxesOrigin(~start, ~end)::= (
	If(start <= 0.0 <= end,
		Return(0.0));
	If(end < 0.0,
		Return(Floor(end, stepSize(end - start)));
		);
	Return(Ceiling(start, stepSize(end - start)));
	)

DefaultTickBoxes(~start, ~end, True) /? start < end ::=
	With({range:= snapRange(start .. end)},
		Join(
			With({t:= largeTickPositions(range).Map({#, ToBoxes(#), {0.0, 0.02}}&)},
				If(allLabelsAreSmallInt(t),
					t.Map(makeIntTick),
					t)), 
			smallTickPositions(range).Map({#, "", {0.0, 0.01}}&))
		)

DefaultTickBoxes(~start, ~end, False) /? start < end ::=
	With({range:= snapRange(start .. end)},
		Join(
			largeTickPositions(range).Map({#, "", {0.0, 0.02}}&), 
			smallTickPositions(range).Map({#, "", {0.0, 0.01}}&))
		)

End()

EndPackage()
