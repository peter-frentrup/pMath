/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("Document styles", "Section"), 
      Section(StyleData("Document"), DefaultNewSectionStyle -> "Input", 
       DefaultReturnCreatedSectionStyle -> Automatic, 
       FontFeatures -> {"ssty" -> Automatic}, Magnification -> 1, 
       Visible -> True, WindowFrame -> "Normal")}, All), 
    SectionGroup({Section("Section styles", "Section"), 
      Section(StyleData("SystemResetStyle"), AspectRatio -> 1, 
       AutoDelete -> False, AutoNumberFormating -> True, AutoSpacing -> False, 
       Background -> None, ButtonBoxOptions -> {ButtonFunction -> (/\/ &), 
        Method -> "Preemptive"}, Editable -> True, Evaluatable -> False, 
       FontColor -> GrayLevel(0), FontFamily -> {}, FontSize -> 10, 
       FontSlant -> Plain, FontWeight -> Plain, 
       GridBoxColumnSpacing -> 0.40000000596046448`, 
       GridBoxRowSpacing -> 0.5`, LanguageCategory -> "NaturalLanguage", 
       LineBreakWithin -> True, Magnification -> 1, 
       ReturnCreatesNewSection -> False, SectionEditDuplicate -> False, 
       SectionEditDuplicateMakesCopy -> False, SectionFrame -> {0, 0, 0, 0}, 
       SectionFrameColor -> GrayLevel(0), SectionFrameMargins -> {0, 0, 0, 0}, 
       SectionFrameLabelMargins -> {3, 3, 3, 3}, SectionGenerated -> False, 
       SectionGroupPrecedence -> 0, SectionMargins -> {7, 7, 4, 4}, 
       SectionLabel -> "", SectionLabelAutoDelete -> True, 
       Selectable -> Automatic, ShowAutoStyles -> False, 
       ShowSectionBracket -> True, ShowStringCharacters -> True, 
       Visible -> True), Section(StyleData("Edit"), AutoSpacing -> True, 
       LanguageCategory -> "pMath", ShowAutoStyles -> True), 
      Section(StyleData("Input"), AutoNumberFormating -> False, 
       AutoSpacing -> True, Evaluatable -> True, FontSize -> 11, 
       LanguageCategory -> "pMath", SectionMargins -> {56, Inherited, 10, 5}, 
       SectionLabel -> "in:", ShowAutoStyles -> True), 
      SectionGroup({
        Section(StyleData("Code"), Background -> GrayLevel(
          0.80400000000000005`), BaseStyle -> "Input", 
         LineBreakWithin -> False, SectionFrameMargins -> {3, 3, 3, 3}), 
        SectionGroup({
          Section(StyleData("Output"), AutoNumberFormating -> True, 
           BaseStyle -> "Input", DefaultDuplicateSectionStyle -> "Input", 
           Evaluatable -> False, SectionEditDuplicate -> True, 
           SectionGroupPrecedence -> 10, SectionMargins -> {Inherited, 
            Inherited, 5, Inherited}, SectionLabel -> "", 
           ShowAutoStyles -> False, ShowStringCharacters -> False), 
          Section(StyleData("Print"), BaseStyle -> "Output", 
           Editable -> False, SectionGroupPrecedence -> 20, 
           SectionMargins -> {50, Inherited, Inherited, Inherited}), 
          Section(StyleData("Echo"), BaseStyle -> "Output", Editable -> False, 
           SectionGroupPrecedence -> 20, SectionMargins -> {50, Inherited, 
            Inherited, Inherited}, SectionLabel -> "\[RightGuillemet]"), 
          Section(StyleData("Message"), AutoSpacing -> False, 
           BaseStyle -> "ControlStyle", Editable -> False, 
           FontColor -> RGBColor(0.502`, 0, 0), SectionGroupPrecedence -> 20, 
           SectionMargins -> {50, Inherited, Inherited, Inherited}, 
           ShowAutoStyles -> False, ShowStringCharacters -> False), 
          Section(StyleData("PrintUsage"), AutoSpacing -> False, 
           Background -> RGBColor(0.93300000000000005`, 1, 
            0.80000000000000004`), Editable -> False, 
           FontFamily -> Dynamic(CurrentValue("ControlsFontFamily")), 
           SectionFrame -> {0.75`, 0.75`, 0.75`, 0.75`}, 
           SectionFrameColor -> RGBColor(0.66700000000000004`, 
            0.80000000000000004`, 0.59999999999999998`), 
           SectionFrameMargins -> {6, 6, 6, 6}, SectionGroupPrecedence -> 20, 
           SectionMargins -> {50, Inherited, Inherited, Inherited}, 
           ShowAutoStyles -> False, ShowStringCharacters -> False)}, All)}, 
       All), Section(StyleData("Text"), FontFamily -> {"Georgia", 
        "Constantia", "Times New Roman"}, SectionMargins -> {50, Inherited, 7, 
        7}, ShowStringCharacters -> False), 
      Section(StyleData("Item"), BaseStyle -> "Text", 
       ReturnCreatesNewSection -> True, SectionDingbat -> "\[Bullet]", 
       SectionMargins -> {60, Inherited, 4, 4}), 
      Section(StyleData("Todo"), BaseStyle -> "Text", SectionLabel -> "todo:", 
       SectionLabelAutoDelete -> False), Section(StyleData("Docked"), 
       BaseStyle -> "ControlStyle", SectionFrame -> {Inherited, Inherited, 
        Inherited, 1.0000000116860974`*^-7}, 
       SectionFrameColor -> GrayLevel(0.502`), 
       SectionFrameMargins -> {3, 3, 3, 3}, SectionMargins -> {0, 0, 0, 0}, 
       ShowStringCharacters -> False), 
      Section(StyleData("TooltipWindowSection"), AutoNumberFormating -> True, 
       BaseStyle -> "ControlStyle", SectionMargins -> {0, 0, 0, 0})}, All), 
    SectionGroup({Section("Box styles", "Section"), 
      Section(StyleData("Arg"), AutoSpacing -> True, FontSlant -> Italic, 
       ShowAutoStyles -> True), Section(StyleData("TI"), FontSlant -> Italic), 
      SectionGroup({Section("Default box level styles", "Subsection"), 
        Section(StyleData("Graphics"), AspectRatio -> 1, 
         AutoNumberFormating -> True, AutoSpacing -> True, 
         ShowAutoStyles -> False), Section(StyleData("ControlStyle"), 
         FontFamily -> Dynamic(CurrentValue("ControlsFontFamily")), 
         FontSize -> Dynamic(CurrentValue("ControlsFontSize")), 
         ShowAutoStyles -> False, ShowStringCharacters -> False), 
        Section(StyleData("Button"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("Checkbox"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("InputField"), BaseStyle -> "ControlStyle", 
         ShowStringCharacters -> True), Section(StyleData("Panel"), 
         BaseStyle -> "ControlStyle"), Section(StyleData("PaneSelector")), 
        Section(StyleData("RadioButton"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("Setter"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("Slider"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("Placeholder"), 
         Background -> RGBColor(1, 0.97299999999999998`, 
          0.80000000000000004`), FontColor -> GrayLevel(0.502`), 
         FontSize -> 9, Placeholder -> True, ShowAutoStyles -> False, 
         ShowStringCharacters -> False)}, All), 
      SectionGroup({Section("Button styles", "Subsection"), 
        Section(StyleData("Paste"), BaseStyle -> "Button", 
         ButtonBoxOptions -> {ButtonFunction -> (DocumentApply(
           SelectedDocument(), #1) &)})}, All), 
      SectionGroup({Section("TemplateBox styles", "Subsection"), 
        Section(StyleData("Binomial"), TemplateBoxOptions -> {
          DisplayFunction -> ({"(", GridBox({{#1}, {#2}}), ")"} &), 
          Tooltip -> Automatic}), Section(StyleData("Hypergeometric0F1"), 
         TemplateBoxOptions -> {DisplayFunction -> ({
           StyleBox({SubscriptBox("0"), "F", SubscriptBox("1")}, 
            ShowAutoStyles -> False), "(", {";", #1, ";", #2}, ")"} &), 
          Tooltip -> Automatic}), Section(StyleData("Hypergeometric1F1"), 
         TemplateBoxOptions -> {DisplayFunction -> ({
           StyleBox({SubscriptBox("1"), "F", SubscriptBox("1")}, 
            ShowAutoStyles -> False), "(", {#1, ";", #2, ";", #3}, ")"} &), 
          Tooltip -> Automatic}), Section(StyleData("Hypergeometric2F1"), 
         TemplateBoxOptions -> {DisplayFunction -> ({
           StyleBox({SubscriptBox("2"), "F", SubscriptBox("1")}, 
            ShowAutoStyles -> False), "(", {{#1, ",", #2}, ";", #3, ";", #4}, 
           ")"} &), Tooltip -> Automatic}), Section(StyleData("OpenerView"), 
         TemplateBoxOptions -> {DisplayFunction -> ({
           GridBox({
             {OpenerBox(#3), {
               ButtonBox(#1, ButtonFunction -> ((CurrentValue({
                  TemplateSlot, 3}):= If(CurrentValue({TemplateSlot, 3}) === 
                  True, False, True)) &), ButtonFrame -> None), 
               "\[InvisibleSpace]"}}, {
              "", PaneSelectorBox({
                True -> GridBox({{""}, {#2}}, 
                 GridBoxRowSpacing -> 0.20000000000000001`)}, #3)}}, 
            BaselinePosition -> 1, GridBoxColumnSpacing -> 0, 
            GridBoxRowSpacing -> 0)} &), InterpretationFunction -> ({
           "OpenerView", "(", {{"{", {#1, ",", #2}, "}"}, ",", 
            InterpretationBox("", #3)}, ")"} &)}), 
        Section(StyleData("DocumentObject"), 
         TemplateBoxOptions -> {DisplayFunction -> ({"DocumentObject", "(", 
           DynamicBox(
            ToBoxes(With({FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
              Button(
               Panel(
                Style(
                 Dynamic(Replace(CurrentValue(CurrentValue({TemplateSlot, 1}), 
                    WindowTitle), $Failed :> CurrentValue({
                     TemplateSlot, 2}))), FontColor -> Dynamic(
                  If(CurrentValue(CurrentValue({TemplateSlot, 1}), 
                    WindowTitle) === $Failed, Gray, 
                   If(CurrentValue(FrontEndObject($SessionId, FE`Private`dyn), 
                     "MouseOver") === True, Blue, Inherited))))), 
               SetSelectedDocument(CurrentValue({TemplateSlot, 1})), 
               ButtonFrame -> "Frameless")))), ")"} &), 
          InterpretationFunction -> ({"DocumentObject", "(", 
           InterpretationBox("", #1), ")"} &)}), 
        Section(StyleData("FrontEndObject"), 
         TemplateBoxOptions -> {DisplayFunction -> ({"FrontEndObject", "(", 
           DynamicBox(
            ToBoxes(With({FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
              Button(Panel(Style(CurrentValue({TemplateSlot, 2}), 
                 FontColor -> Dynamic(
                  If(CurrentValue({TemplateSlot, 1}) === $SessionId && 
                    CurrentValue(FrontEndObject($SessionId, FE`Private`dyn), 
                    "MouseOver") === True, Blue, Inherited)))), 
               Replace({CurrentValue({TemplateSlot, 1}), 
                 CurrentValue({TemplateSlot, 2})}, {
                 $SessionId, ~FE`Private`id:Integer} :> SetSelectedDocument(
                 Automatic, FrontEndObject($SessionId, FE`Private`id))), 
               Enabled -> Dynamic(CurrentValue({TemplateSlot, 1}) === 
                 $SessionId), ButtonFrame -> "Frameless")))), ")"} &), 
          InterpretationFunction -> ({"FrontEndObject", "(", {
            InterpretationBox("", #1), ",", InterpretationBox("", #2)}, 
           ")"} &)}), Section(StyleData("Det"), 
         TemplateBoxOptions -> {DisplayFunction -> ({"\[LeftBracketingBar]", 
           #1, "\[RightBracketingBar]"} &), Tooltip -> Automatic}), 
        Section(StyleData("TooltipContent"), 
         TemplateBoxOptions -> {DisplayFunction -> (PanelBox(#1, 
           Appearance -> "Tooltip") &)}), Section(StyleData("RadioButtonBar"), 
         TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
           DynamicBox(
            ToBoxes(Row(Map(FE`EvaluateDynamic(Automatic, #2), 
               Function({FE`Private`rule}, Setter(#1, FE`Private`rule[1], 
                 Grid({{RadioButton(#1, FE`Private`rule[1]), 
                    FE`Private`rule[2]}}, ColumnSpacing -> 0), 
                 ButtonFrame -> None))), "\[InvisibleSpace]"))), 
           Enabled -> Dynamic(CurrentValue({TemplateSlot, Key(Enabled)}))) &), 
          InterpretationFunction -> ({"RadioButtonBar", "(", {
            TemplateSlotSequence(##1, InterpretationBox(, #1) &, ",")}, 
           ")"} &)}), Section(StyleData("RadioButtonBarSimple"), 
         TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
           DynamicBox(
            ToBoxes(Row(Map(FE`EvaluateDynamic(Automatic, #2), 
               Function({FE`Private`val}, Setter(#1, FE`Private`val, 
                 Grid({{RadioButton(#1, FE`Private`val), FE`Private`val}}, 
                  ColumnSpacing -> 0), ButtonFrame -> None))), 
              "\[InvisibleSpace]"))), Enabled -> Dynamic(
            CurrentValue({TemplateSlot, Key(Enabled)}))) &), 
          InterpretationFunction -> ({"RadioButtonBar", "(", {
            TemplateSlotSequence(##1, InterpretationBox(, #1) &, ",")}, 
           ")"} &)}), Section(StyleData("Row")), 
        Section(StyleData("RowDefault"), BaseStyle -> "Row", 
         TemplateBoxOptions -> {DisplayFunction -> ({
           TemplateSlotSequence(##1)} &), InterpretationFunction -> ({"Row", 
           "(", {"{", {TemplateSlotSequence(##1, ",")}, "}"}, ")"} &)}), 
        Section(StyleData("RowWithSeparators"), BaseStyle -> "Row", 
         TemplateBoxOptions -> {DisplayFunction -> ({
           TemplateSlotSequence(##3, #1)} &), 
          InterpretationFunction -> ({"Row", "(", {
            {"{", {TemplateSlotSequence(##3, ",")}, "}"}, ",", #2}, ")"} &)}), 
        SectionGroup({Section("Hyperlinks", "Subsubsection"), 
          Section(StyleData("Hyperlink"), 
           TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
             ComplexStringBox({"\"", #1, "\""}), 
             FontColor -> RGBColor(0, 0, 0.80000000000000004`), 
             ShowStringCharacters -> False, ShowAutoStyles -> False) &)}), 
          Section(StyleData("ShowMoreDocumentationHyperlink"), 
           TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
             ButtonBox("\" \[RightGuillemet] \"", 
              ButtonFunction -> (With({
                FE`Private`file:= 
                 Documentation`FindSymbolDocumentationByFullName(
                 CurrentValue({TemplateSlot, 1}))}, 
               If(IsString(FE`Private`file), 
                FE`CallFrontEnd(FrontEnd`DocumentOpen(FE`Private`file, 
                  False)))) &), BaseStyle -> "Text", 
              ButtonFrame -> "Frameless"), FontColor -> Dynamic(
              If(CurrentValue("MouseOver"), RGBColor(1, 0.5`, 0), 
               RGBColor(0, 0, 1))), ShowAutoStyles -> False) &), 
            Tooltip -> "\"Open reference page\""}), 
          Section(StyleData("StylesheetHyperlink"), 
           TemplateBoxOptions -> {DisplayFunction -> (DynamicBox(
             With({FE`Private`content:= Replace(
                CurrentValue({TemplateSlot, 1}), (
                 List | /\/)(~~~FE`Private`str:String) :> StringExpression(
                 FE`Private`str))}, 
              With({FE`Private`path:= ToFileName(FE`$StylesheetDirectory, 
                 FE`Private`content)}, 
               TooltipBox(StyleBox(ButtonBox(ToBoxes(FE`Private`content), 
                  ButtonFrame -> "Frameless", ButtonFunction -> (DocumentOpen(
                   FE`Private`path) &)), FontColor -> RGBColor(0, 0, 0.5`)), 
                ToBoxes(FE`Private`path))))) &)})}, All), 
        SectionGroup({Section("Missing TemplateBox styles", "Subsubsection"), 
          Section(StyleData("TemplateBoxErrorDisplayStyle"), 
           Background -> RGBColor(1, 0.77000000000000002`, 
            0.77000000000000002`), FontColor -> GrayLevel(0.502`)), 
          Section(StyleData("TemplateBoxErrorDisplayArgumentStyle"), 
           Background -> GrayLevel(1), FontColor -> GrayLevel(0))}, All)}, 
       All)}, All), SectionGroup({
      Section(StyleData("Title"), BaseStyle -> "Text", 
       FontFamily -> {"Calibri", "Verdana", "Arial"}, FontSize -> 22, 
       FontWeight -> Bold, SectionGroupPrecedence -> -100, 
       SectionMargins -> {17, Inherited, 15, 5}), 
      SectionGroup({Section(StyleData("Subtitle"), BaseStyle -> "Text", 
         FontFamily -> {"Calibri", "Verdana", "Arial"}, FontSize -> 18, 
         SectionGroupPrecedence -> -90, SectionMargins -> {17, Inherited, 2, 
          10}), SectionGroup({
          Section(StyleData("Subsubtitle"), BaseStyle -> "Text", 
           FontFamily -> {"Calibri", "Verdana", "Arial"}, FontSize -> 14, 
           SectionGroupPrecedence -> -80, SectionMargins -> {17, Inherited, 2, 
            8}), SectionGroup({
            Section(StyleData("Section"), BaseStyle -> "Text", 
             FontFamily -> {"Calibri", "Verdana", "Arial"}, FontSize -> 16, 
             FontWeight -> Bold, SectionFrame -> {Inherited, Inherited, 0.75`, 
              Inherited}, SectionFrameMargins -> {Inherited, Inherited, 4, 
              Inherited}, SectionGroupPrecedence -> -50, 
             SectionMargins -> {17, Inherited, 14, 8}), 
            SectionGroup({Section(StyleData("Subsection"), 
               BaseStyle -> "Text", FontFamily -> {"Calibri", "Verdana", 
                "Arial"}, FontSize -> 12, FontWeight -> Bold, 
               SectionGroupPrecedence -> -40, 
               SectionMargins -> {40, Inherited, Inherited, Inherited}), 
              Section(StyleData("Subsubsection"), BaseStyle -> "Text", 
               FontFamily -> {"Calibri", "Verdana", "Arial"}, FontSize -> 10, 
               FontWeight -> Bold, SectionGroupPrecedence -> -30, 
               SectionMargins -> {40, Inherited, Inherited, Inherited})}, 
             All)}, All)}, All)}, All)}, All)}, All)}, 
 StyleDefinitions -> "Stylesheets.pmathdoc", Visible -> True)