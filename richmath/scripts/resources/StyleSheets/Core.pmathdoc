/* pMath Document */

Document({
  SectionGroup({
    SectionGroup({Section("Document styles", "Section"), 
      Section(StyleData("Document"), "CharacterNameStyle" -> {
         FontColor -> RGBColor(0.84999999999999998`, 0.32500000000000001`, 
           0.33300000000000002`)}, "CommentStyle" -> {
         FontColor -> RGBColor(0, 0.502`, 0)}, 
       DefaultNewSectionStyle -> "Input", DefaultReturnCreatedSectionStyle -> 
        DefaultNewSectionStyle, "ExcessOrMissingArgumentStyle" -> {
         FontColor -> RGBColor(1, 0.20000000000000001`, 
           0.20000000000000001`)}, FontFeatures -> {"ssty" -> Automatic}, 
       "FunctionLocalVariableStyle" -> {
         FontColor -> RGBColor(0.23499999999999999`, 0.48999999999999999`, 
           0.56999999999999995`)}, "FunctionNameStyle" -> {
         FontColor -> RGBColor(0.47499999999999998`, 0.37`, 
           0.14999999999999999`)}, "ImplicitOperatorStyle" -> {
         FontColor -> GrayLevel(0.59999999999999998`)}, 
       "InlineAutoCompletionStyle" -> {Background -> RGBColor(0.502`, 1, 0), 
         Opacity -> 0.5`}, "InlineSectionEditingStyle" -> {
         Background -> RGBColor(0.93999999999999995`, 0.88200000000000001`, 
           0.72499999999999998`), Opacity -> 0.5`}, 
       "KeywordSymbolStyle" -> {
         FontColor -> RGBColor(0.68600000000000005`, 0, 
           0.85999999999999999`)}, "LocalScopeConflictStyle" -> {
         FontColor -> RGBColor(0.80000000000000004`, 0, 0)}, 
       "LocalVariableStyle" -> {
         FontColor -> RGBColor(0.26300000000000001`, 0.53700000000000003`, 
           0.34499999999999997`)}, Magnification -> 1, 
       "MatchingBracketHighlightStyle" -> {
         Background -> RGBColor(1, 1, 0), Opacity -> 0.5`}, 
       "OccurenceHighlightStyle" -> {
         Background -> RGBColor(1, 0.59999999999999998`, 
           0.20000000000000001`), Opacity -> 0.75`}, 
       "PatternVariableStyle" -> {
         FontColor -> RGBColor(0.26300000000000001`, 0.53700000000000003`, 
           0.34499999999999997`)}, "SectionInsertionPointColor" -> 
        GrayLevel(0.753`), "StringStyle" -> {FontColor -> GrayLevel(0.502`)}, 
       "SymbolShadowingStyle" -> {
         FontColor -> RGBColor(1, 0.20000000000000001`, 
           0.20000000000000001`)}, "SyntaxErrorStyle" -> {
         FontColor -> RGBColor(1, 0, 0)}, "UndefinedSymbolStyle" -> {
         FontColor -> RGBColor(0, 0.17299999999999999`, 
           0.76500000000000001`)}, "UnknownOptionStyle" -> {
         FontColor -> RGBColor(1, 0.20000000000000001`, 
           0.20000000000000001`)}, Visible -> True, WindowFrame -> "Normal"), 
      Section(StyleData("AttachedPopupWindow"), 
       DefaultNewSectionStyle -> "PopupWindowSection", Editable -> False, 
       FontFeatures -> {"ssty" -> Automatic}, 
       Magnification -> 
        Dynamic(CurrentValue({"AttachmentSourceBox", Magnification})), 
       Selectable -> False, ShowSectionBracket -> False, Visible -> True)}, 
     All), SectionGroup({Section("Section styles", "Section"), 
      Section(StyleData("SystemResetStyle"), AspectRatio -> 1, 
       AutoDelete -> False, AutoNumberFormating -> True, AutoSpacing -> False, 
       Background -> None, ButtonBoxOptions -> {
         ButtonFunction -> Function(/\/), Method -> "Preemptive"}, 
       Editable -> True, Evaluatable -> False, FontColor -> None, 
       FontFamily -> {}, FontSize -> 10, FontSlant -> Plain, 
       FontWeight -> Plain, GridBoxColumnSpacing -> 0.40000000596046448`, 
       GridBoxRowSpacing -> 0.5`, LanguageCategory -> "NaturalLanguage", 
       LineBreakWithin -> True, Magnification -> 1, 
       ReturnCreatesNewSection -> False, SectionEditDuplicate -> False, 
       SectionEditDuplicateMakesCopy -> False, 
       SectionEvaluationFunction -> Identity, SectionFrame -> 0, 
       SectionFrameColor -> None, SectionFrameMargins -> 0, 
       SectionFrameLabelMargins -> 0, SectionGenerated -> False, 
       SectionGroupPrecedence -> 0, SectionMargins -> 0, SectionLabel -> "", 
       SectionLabelAutoDelete -> True, Selectable -> Automatic, 
       ShowAutoStyles -> False, ShowSectionBracket -> True, 
       ShowStringCharacters -> True, Visible -> True), 
      Section(StyleData("Edit"), AutoSpacing -> True, 
       LanguageCategory -> "pMath", ShowAutoStyles -> True), 
      Section(StyleData("Input"), AutoNumberFormating -> False, 
       AutoSpacing -> True, Evaluatable -> True, FontSize -> 12, 
       LanguageCategory -> "pMath", MenuCommandKey -> "9", 
       MenuSortingValue -> 1500, SectionMargins -> {{56, Inherited}, {10, 5}}, 
       SectionLabel -> "in:", ShowAutoStyles -> True, 
       ShowStringCharacters -> True), 
      SectionGroup({
        Section(StyleData("Code", StyleDefinitions -> StyleData("Input")), 
         Background -> GrayLevel(0.80400000000000005`), 
         LineBreakWithin -> False, MenuCommandKey -> "8", 
         MenuSortingValue -> 1450, SectionFrameMargins -> 3), 
        SectionGroup({
          Section(StyleData("Output", StyleDefinitions -> StyleData("Input")), 
           AutoNumberFormating -> True, DefaultDuplicateSectionStyle -> 
            "Input", Evaluatable -> False, MenuSortingValue -> 1550, 
           SectionEditDuplicate -> True, SectionGroupPrecedence -> 10, 
           SectionMargins -> {Inherited, {5, Inherited}}, SectionLabel -> "", 
           ShowAutoStyles -> False, ShowStringCharacters -> False), 
          Section(StyleData("Print"), BaseStyle -> "Output", 
           Editable -> False, SectionGroupPrecedence -> 20, 
           SectionMargins -> {{50, Inherited}, Inherited}), 
          Section(StyleData("Echo"), BaseStyle -> "Output", Editable -> False, 
           SectionGroupPrecedence -> 20, 
           SectionMargins -> {{50, Inherited}, Inherited}, 
           SectionLabel -> "\[RightGuillemet]"), 
          Section(StyleData("Message"), AutoSpacing -> False, 
           BaseStyle -> "ControlStyle", Editable -> False, 
           FontColor -> RGBColor(0.502`, 0, 0), SectionGroupPrecedence -> 20, 
           SectionMargins -> {{50, Inherited}, Inherited}, 
           ShowAutoStyles -> False, ShowStringCharacters -> False), 
          Section(StyleData("PrintUsage"), AutoSpacing -> False, 
           Background -> RGBColor(0.93300000000000005`, 1, 
             0.80000000000000004`), Editable -> False, 
           FontFamily -> Dynamic(CurrentValue("ControlsFontFamily")), 
           SectionFrame -> 0.75`, SectionFrameColor -> 
            RGBColor(0.66700000000000004`, 0.80000000000000004`, 
             0.59999999999999998`), SectionFrameMargins -> 6, 
           SectionGroupPrecedence -> 20, 
           SectionMargins -> {{50, Inherited}, Inherited}, 
           ShowAutoStyles -> False, ShowStringCharacters -> False)}, All)}, 
       All), Section(StyleData("Text"), 
       FontFamily -> {"Georgia", "Constantia", "Times New Roman", "serif"}, 
       LanguageCategory -> "NaturalLanguage", MenuCommandKey -> "7", 
       MenuSortingValue -> 1400, ScriptLevel -> 1, 
       SectionMargins -> {{50, Inherited}, {7, 7}}), 
      Section(StyleData("HeadingText"), BaseStyle -> "Text", 
       FontFamily -> {"Calibri", "Verdana", "Arial", "sans-serif"}), 
      Section(StyleData("Item"), BaseStyle -> "Text", 
       DefaultReturnCreatedSectionStyle -> Automatic, 
       MenuSortingValue -> 1600, ReturnCreatesNewSection -> True, 
       SectionDingbat -> "\[Bullet]", 
       SectionMargins -> {{60, Inherited}, {4, 4}}), 
      Section(StyleData("Todo"), BaseStyle -> "Text", SectionLabel -> "todo:", 
       SectionLabelAutoDelete -> False), Section(StyleData("Docked"), 
       BaseStyle -> "ControlStyle", 
       SectionFrame -> {Inherited, {Inherited, 1.0000000116860974`*^-7}}, 
       SectionFrameColor -> GrayLevel(0.502`), SectionFrameMargins -> 3, 
       SectionMargins -> 0, ShowStringCharacters -> False), 
      Section(StyleData("TooltipWindowSection"), AutoNumberFormating -> True, 
       BaseStyle -> "ControlStyle", SectionMargins -> 0), 
      Section(StyleData("PopupWindowSection"), AutoNumberFormating -> True, 
       BaseStyle -> "ControlStyle", LineBreakWithin -> False, 
       SectionMargins -> 0, Selectable -> False)}, All), 
    SectionGroup({Section("Box styles", "Section"), 
      Section(StyleData("Arg"), AutoSpacing -> True, FontSlant -> Italic, 
       ShowAutoStyles -> True), Section(StyleData("TI"), FontSlant -> Italic), 
      Section(StyleData("TT"), 
       FontFamily -> {"Consolas", "Courier New", "mono"}), 
      Section(StyleData("Highlighted"), 
       Background -> RGBColor(1, 0.92500000000000004`, 0.33000000000000002`), 
       FrameBoxOptions -> {BorderRadius -> 6, 
         FrameStyle -> RGBColor(1, 0.92500000000000004`, 
           0.33000000000000002`)}), 
      Section(StyleData("ConditionalExpressionLabel"), 
       FontColor -> GrayLevel(0.502`), ShowStringCharacters -> False), 
      SectionGroup({Section("Default box level styles", "Subsection"), 
        Section(StyleData("Graphics"), AspectRatio -> 1, 
         AutoNumberFormating -> True, AutoSpacing -> True, 
         ShowAutoStyles -> False), Section(StyleData("ControlStyle"), 
         FontFamily -> Dynamic(CurrentValue("ControlsFontFamily")), 
         FontSize -> Dynamic(CurrentValue("ControlsFontSize")), 
         ShowAutoStyles -> False, ShowStringCharacters -> False), 
        Section(StyleData("Framed"), FrameBoxOptions -> {
           ContentPadding -> True}), Section(StyleData("Button"), 
         BaseStyle -> "ControlStyle", ButtonBoxOptions -> {
           ContentPadding -> True}), Section(StyleData("Checkbox")), 
        Section(StyleData("InputField"), BaseStyle -> "ControlStyle", 
         ShowStringCharacters -> True), Section(StyleData("Pane"), 
         PaneBoxOptions -> {BaselinePosition -> Center -> Axis, 
           ImageSizeAction -> "ShrinkToFit"}), 
        Section(StyleData("Panel"), BaseStyle -> "ControlStyle", 
         PanelBoxOptions -> {ContentPadding -> True}), 
        Section(StyleData("PaneSelector")), 
        Section(StyleData("Placeholder"), 
         Background -> RGBColor(1, 0.97299999999999998`, 
           0.80000000000000004`), FontColor -> GrayLevel(0.502`), 
         FontSize -> 9, Placeholder -> True, ShowAutoStyles -> False, 
         ShowStringCharacters -> False), Section(StyleData("RadioButton")), 
        Section(StyleData("Setter"), BaseStyle -> "ControlStyle", 
         SetterBoxOptions -> {ButtonFrame -> "Palette", 
           ContentPadding -> True}), Section(StyleData("Slider")), 
        Section(StyleData("TabViewLabel"), BaseStyle -> "ControlStyle"), 
        Section(StyleData("TabView"), BaseStyle -> "ControlStyle")}, All), 
      SectionGroup({Section("Button styles", "Subsection"), 
        Section(StyleData("Hyperlink"), 
         ButtonBoxOptions -> {ButtonFrame -> "Frameless"}, 
         FontColor -> RGBColor(0, 0, 0.80000000000000004`), 
         TemplateBoxOptions -> {
           DisplayFunction -> Function(StyleBox(StringBox("\"", #1, "\""), 
              ShowStringCharacters -> False, ShowAutoStyles -> False))}), 
        Section(StyleData("Paste"), BaseStyle -> "Button", 
         ButtonBoxOptions -> {
           ButtonFunction -> Function(DocumentApply(SelectedDocument(), 
              #1))})}, All), SectionGroup({
        Section("SummaryBox styles", "Subsection"), 
        Section(StyleData("SummaryItem"), Selectable -> True), 
        Section(StyleData("SummaryItemAnnotation"), 
         FontColor -> GrayLevel(0.502`), ShowStringCharacters -> False)}, 
       All), SectionGroup({Section("TemplateBox styles", "Subsection"), 
        SectionGroup({Section("Mathematical Functions", "Subsubsection"), 
          Section(StyleData("Binomial"), TemplateBoxOptions -> {
             DisplayFunction -> Function({"(", GridBox({{#1}, {#2}}), ")"}), 
             Tooltip -> Automatic}), Section(StyleData("Hypergeometric0F1"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function({StyleBox({SubscriptBox("0"), "F", SubscriptBox("1")}, 
                 ShowAutoStyles -> False), "(", {";", #1, ";", #2}, ")"}), 
             Tooltip -> Automatic}), Section(StyleData("Hypergeometric1F1"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function({StyleBox({SubscriptBox("1"), "F", SubscriptBox("1")}, 
                 ShowAutoStyles -> False), "(", {#1, ";", #2, ";", #3}, ")"}), 
             Tooltip -> Automatic}), Section(StyleData("Hypergeometric2F1"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function({StyleBox({SubscriptBox("2"), "F", SubscriptBox("1")}, 
                 ShowAutoStyles -> False), "(", {
                 {#1, ",", #2}, ";", #3, ";", #4}, ")"}), 
             Tooltip -> Automatic}), Section(StyleData("Det"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function({"\[LeftBracketingBar]", #1, "\[RightBracketingBar]"}), 
             Tooltip -> Automatic})}, All), 
        SectionGroup({Section("Controls", "Subsubsection"), 
          Section(StyleData("MessageMenuButton"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicLocalBox({FE`Private`msgStackPopup}, 
                ButtonBox("\[Ellipsis]", ContentPadding -> False, 
                 BaselinePosition -> Center -> Axis, 
                 ButtonFunction -> 
                  Function(Replace(CurrentValue(FE`Private`msgStackPopup, 
                     Visible), {
                     True :> (CurrentValue(FE`Private`msgStackPopup, 
                        Visible):= False), 
                     False :> (CurrentValue(FE`Private`msgStackPopup, 
                        Visible):= True), 
                     $Failed :> (FE`Private`msgStackPopup:= 
                       FE`AttachBoxes(EvaluationBox(), Bottom, 
                        SectionGroup({Section(BoxData({}), "", FontSize -> 1, 
                           SectionMargins -> {300, 0, 0, 0}), 
                          Section(BoxData({
                             ToBoxes(CurrentValue({
                                TemplateSlot, Key(MessageName)})), 
                             FillBox(""), TooltipBox(
                              ButtonBox("\" \[UpperRightArrow] \"", 
                               ButtonFunction -> 
                                Function(CreateDocument(
                                  First(DocumentGet(EvaluationDocument())), 
                                  WindowTitle -> 
                                   ToString(Colon(CurrentValue({
                                       TemplateSlot, Key(MessageName)}), 
                                     CurrentValue({TemplateSlot, 
                                       Key(Message)})))))), 
                              TextData("Open in separate window"))}), 
                           "Section", SectionMargins -> {5, 2}, 
                           SectionFrame -> 0), 
                          Section(
                           BoxData(ToBoxes(CurrentValue({
                               TemplateSlot, Key(Message)}))), "Message", 
                           SectionMargins -> {5, 2}), 
                          SectionGroup(
                           Map(Reverse(
                             Replace(CurrentValue({TemplateSlot, Key(Stack)}), 
                              $Failed -> {})), 
                            Function(
                             Section(
                              BoxData(ToBoxes(Developer`StackEntryForm(#1))), 
                              "Output", SectionMargins -> {5, 2}))))}), 
                        "ClosingAction" -> "Hide", 
                        RemovalConditions -> {"MouseClickOutside", 
                          "SelectionExit"}, WindowFrame -> 
                         "ThinFrameCallout"))})))))}), 
          Section(StyleData("OpenerView"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function({
                GridBox({
                  {OpenerBox(#3), {
                    ButtonBox(#1, ButtonFunction -> 
                      Function(CurrentValue({TemplateSlot, 3}):= 
                        If(CurrentValue({TemplateSlot, 3}) === True, False, 
                         True)), ButtonFrame -> None), "\[InvisibleSpace]"}}, {
                   "", PaneSelectorBox({
                     True -> GridBox({{""}, {#2}}, 
                       GridBoxRowSpacing -> 0.20000000000000001`)}, #3)}}, 
                 BaselinePosition -> 1, GridBoxColumnSpacing -> 0, 
                 GridBoxRowSpacing -> 0)}), InterpretationFunction -> 
              Function({"OpenerView", "(", {{"{", {#1, ",", #2}, "}"}, ",", 
                 InterpretationBox("", #3)}, ")"})}), 
          Section(StyleData("TabView"), TemplateBoxOptions -> {
             DisplayFunction -> Function(DynamicLocalBox({FE`Private`rules}, 
                GridBox({
                  {PanelBox({
                     " ", DynamicBox(
                      GridBox({MapIndexed(FE`Private`rules, 
                         Function(SetterBox(
                           Dynamic(CurrentValue({TemplateSlot, 2}), {
                             Automatic, None, Automatic}), First(#2), 
                           First(#1), ButtonFrame -> 
                            If(Length(FE`Private`rules) === 1, "TabHead", 
                             Replace(First(#2), {1 -> "TabHeadAbuttingRight", 
                               Length(FE`Private`rules) -> 
                                "TabHeadAbuttingLeft", ~ -> 
                                "TabHeadAbuttingLeftRight"})), 
                           BaseStyle -> "TabViewLabel")))}, 
                       GridBoxColumnSpacing -> 0)), " ", FillBox("")}, 
                    Appearance -> "TabHead")}, {
                   PanelBox({
                     DynamicBox(PaneSelectorBox(MapIndexed(FE`Private`rules, 
                        Function(First(#2) -> StyleBox(Last(#1), 
                           Selectable -> 
                            Dynamic(CurrentValue(CurrentValue(TemplateBox), 
                              Selectable))))), 
                       Dynamic(CurrentValue({TemplateSlot, 2})), 
                       BaseStyle -> "TabView")), FillBox("")}, 
                    Appearance -> "TabBody")}}, GridBoxRowSpacing -> 0), 
                Initialization :> (FE`Private`rules:= 
                  CurrentValue({TemplateSlot, 1})))), 
             InterpretationFunction -> Function(FE`TabViewBox(##1))}), 
          Section(StyleData("TooltipContent"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(PanelBox(#1, Appearance -> "Tooltip"))}), 
          Section(StyleData("ToggleSwitch"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(StyleBox(DynamicLocalBox({}, 
                 SliderBox(Dynamic(Replace(CurrentValue({TemplateSlot, 1}), {
                     True -> 1, False -> 0, ~ -> 0.5`}), {
                    None, Temporary, 
                    Function(If((0 < #1 < 1) === True, 
                      With({
                        FE`Private`state:= CurrentValue({TemplateSlot, 1})}, 
                       If(FE`Private`state === True || 
                         FE`Private`state === False, 
                        CurrentValue({TemplateSlot, 1}):= !FE`Private`state, 
                        CurrentValue({TemplateSlot, 1}):= (
                           #1 >= 0.5`) === True)), 
                      CurrentValue({TemplateSlot, 1}):= (#1 = 1) === True))}), 
                  0 .. 1, ContinuousAction -> False, 
                  Appearance -> 
                   Dynamic(Replace(CurrentValue({TemplateSlot, 1}), {
                      True -> "ToggleSwitchChecked", ~ -> 
                       "ToggleSwitchUnchecked"})), 
                  Enabled -> 
                   Dynamic(CurrentValue({TemplateSlot, Key(Enabled)}))), 
                 Initialization :> 
                  With({FE`Private`sym:= CurrentValue({TemplateSlot, 1})}, 
                   If(IsSymbol(FE`Private`sym) && 
                     Match(CurrentValue({"HeldTemplateSlot", 1}), 
                      HoldComplete(Dynamic(FE`Private`sym, ~~~))), 
                    CurrentValue({TemplateSlot, 1}):= False))), 
                SliderBoxOptions -> {Appearance -> "ToggleSwitchUnchecked"})), 
             InterpretationFunction -> 
              Function({"ToggleSwitch", "(", {
                 TemplateSlotSequence(##1, Function(InterpretationBox(, #1)), 
                  ",")}, ")"})}), Section(StyleData("ToggleSwitch2"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(StyleBox(DynamicLocalBox({}, 
                 SliderBox(
                  Dynamic(
                   With({FE`Private`state:= CurrentValue({TemplateSlot, 1})}, 
                    With({
                      FE`Private`values:= CurrentValue({TemplateSlot, 2})}, 
                     Replace(FE`Private`state, {FE`Private`values[2] -> 1, 
                       FE`Private`values[1] -> 0, ~ -> 0.5`}))), {
                    None, Temporary, 
                    Function(If((0 < #1 < 1) === True, 
                      With({
                        FE`Private`state:= CurrentValue({TemplateSlot, 1})}, 
                       With({FE`Private`values:= 
                          CurrentValue({TemplateSlot, 2})}, 
                        If(FE`Private`state === FE`Private`values[1], 
                         CurrentValue({TemplateSlot, 1}):= 
                          FE`Private`values[2], 
                         If(FE`Private`state === FE`Private`values[2], 
                          CurrentValue({TemplateSlot, 1}):= 
                           FE`Private`values[1], If((#1 >= 0.5`) === True, 
                           CurrentValue({TemplateSlot, 1}):= 
                            FE`Private`values[2], 
                           CurrentValue({TemplateSlot, 1}):= 
                            FE`Private`values[1]))))), 
                      With({FE`Private`values:= 
                         CurrentValue({TemplateSlot, 2})}, 
                       If((#1 = 1) === True, CurrentValue({TemplateSlot, 1}):= 
                         FE`Private`values[2], 
                        CurrentValue({TemplateSlot, 1}):= 
                         FE`Private`values[1]))))}), 0 .. 1, 
                  ContinuousAction -> False, 
                  Appearance -> 
                   Dynamic(
                    With({FE`Private`state:= CurrentValue({TemplateSlot, 1})}, 
                     With({
                       FE`Private`values:= CurrentValue({TemplateSlot, 2})}, 
                      If(FE`Private`state === FE`Private`values[2], 
                       "ToggleSwitchChecked", "ToggleSwitchUnchecked")))), 
                  Enabled -> 
                   Dynamic(CurrentValue({TemplateSlot, Key(Enabled)}))), 
                 Initialization :> 
                  With({FE`Private`sym:= CurrentValue({TemplateSlot, 1})}, 
                   If(IsSymbol(FE`Private`sym) && 
                     Match(CurrentValue({"HeldTemplateSlot", 1}), 
                      HoldComplete(Dynamic(FE`Private`sym, ~~~))), 
                    CurrentValue({TemplateSlot, 1}):= 
                     CurrentValue({TemplateSlot, 2})[1]))), 
                SliderBoxOptions -> {Appearance -> "ToggleSwitchUnchecked"})), 
             InterpretationFunction -> 
              Function({"ToggleSwitch", "(", {
                 TemplateSlotSequence(##1, Function(InterpretationBox(, #1)), 
                  ",")}, ")"})}), Section(StyleData("RadioButtonBar"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(
               StyleBox(DynamicBox(
                 ToBoxes(Row(Map(FE`EvaluateDynamic(Automatic, #2), 
                    Function({FE`Private`rule}, Setter(#1, FE`Private`rule[1], 
                      Grid({{RadioButton(#1, FE`Private`rule[1]), 
                         FE`Private`rule[2]}}, ColumnSpacing -> 0), 
                      ButtonFrame -> None))), "\[InvisibleSpace]"))), 
                Enabled -> 
                 Dynamic(CurrentValue({TemplateSlot, Key(Enabled)})))), 
             InterpretationFunction -> 
              Function({"RadioButtonBar", "(", {
                 TemplateSlotSequence(##1, Function(InterpretationBox(, #1)), 
                  ",")}, ")"})}), Section(StyleData("RadioButtonBarSimple"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(
               StyleBox(DynamicBox(
                 ToBoxes(Row(Map(FE`EvaluateDynamic(Automatic, #2), 
                    Function({FE`Private`val}, Setter(#1, FE`Private`val, 
                      Grid({{RadioButton(#1, FE`Private`val), 
                         FE`Private`val}}, ColumnSpacing -> 0), 
                      ButtonFrame -> None))), "\[InvisibleSpace]"))), 
                Enabled -> 
                 Dynamic(CurrentValue({TemplateSlot, Key(Enabled)})))), 
             InterpretationFunction -> 
              Function({"RadioButtonBar", "(", {
                 TemplateSlotSequence(##1, Function(InterpretationBox(, #1)), 
                  ",")}, ")"})})}, All), 
        SectionGroup({Section("Objects", "Subsubsection"), 
          Section(StyleData("DocumentObject"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(StyleBox({"DocumentObject", "(", 
                 DynamicBox(
                  ToBoxes(
                   With({FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
                    Button(
                     Panel(
                      Style(
                       Dynamic(Replace(CurrentValue(
                          CurrentValue({TemplateSlot, 1}), WindowTitle), 
                         $Failed :> CurrentValue({TemplateSlot, 2}))), 
                       FontColor -> 
                        Dynamic(
                         If(CurrentValue(CurrentValue({TemplateSlot, 1}), 
                            WindowTitle) === $Failed, Gray, 
                          If(CurrentValue(FrontEndObject($SessionID, 
                              FE`Private`dyn), "MouseOver") === True, Blue, 
                           Inherited))))), SetSelectedDocument(
                      CurrentValue({TemplateSlot, 1})), 
                     ButtonFrame -> "Frameless")))), ")"}, 
                ShowAutoStyles -> False, 
                FontColor -> 
                 Dynamic(If(Match(CurrentValue({TemplateSlot, 1}), 
                    FrontEndObject($SessionID, ~)), Inherited, Gray)))), 
             InterpretationFunction -> 
              Function({"DocumentObject", "(", InterpretationBox("", #1), 
                ")"})}), Section(StyleData("FrontEndObject"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(StyleBox({"FrontEndObject", "(", 
                 DynamicBox(
                  ToBoxes(
                   With({FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
                    Button(Panel(Style(CurrentValue({TemplateSlot, 2}), 
                       FontColor -> 
                        Dynamic(If(CurrentValue({TemplateSlot, 1}) === 
                           $SessionID, 
                          If(CurrentValue(FrontEndObject($SessionID, 
                              FE`Private`dyn), "MouseOver") === True, Blue, 
                           Inherited), Gray)))), 
                     Replace({CurrentValue({TemplateSlot, 1}), 
                       CurrentValue({TemplateSlot, 2})}, {
                        $SessionID, ~FE`Private`id:Integer} :> 
                       SetSelectedDocument(Automatic, 
                        FrontEndObject($SessionID, FE`Private`id))), 
                     Enabled -> Dynamic(CurrentValue({TemplateSlot, 1}) === 
                        $SessionID), ButtonFrame -> "Frameless")))), ")"}, 
                ShowAutoStyles -> False, 
                FontColor -> 
                 Dynamic(If(CurrentValue({TemplateSlot, 1}) === $SessionID, 
                   Inherited, Gray)))), InterpretationFunction -> 
              Function({"FrontEndObject", "(", {
                 InterpretationBox("", #1), ",", InterpretationBox("", #2)}, 
                ")"})}), Section(StyleData("InputStream"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicBox(
                With({
                  FE`Private`opts:= 
                   Replace(Try(MakeExpression(CurrentValue({TemplateSlot, 1}), 
                      ParseSymbols -> False)), {
                     HoldComplete(~FE`Private`s:Symbol) :> 
                      Options(Unevaluated(FE`Private`s)), ~ -> {}})}, 
                 System`BoxForm`MakeSimpleSummaryBox(InputStream, {
                   File -> Replace(FileNameSplit(Lookup(FE`Private`opts, File, 
                       "")), {{} -> "\[LongDash]", ~FE`Private`path:List :> 
                       Last(FE`Private`path)}), 
                   BinaryFormat -> Lookup(FE`Private`opts, BinaryFormat, 
                     "\[LongDash]")}, 
                  Prepend(FilterRules(FE`Private`opts, 
                    Except(File | BinaryFormat)), 
                   Replace(DirectoryName(Lookup(FE`Private`opts, File, "")), {
                     "" -> Nothing, ~FE`Private`dir :> 
                      Directory -> FE`Private`dir}))))))}), 
          Section(StyleData("OutputStream"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicBox(
                With({
                  FE`Private`opts:= 
                   Replace(Try(MakeExpression(CurrentValue({TemplateSlot, 1}), 
                      ParseSymbols -> False)), {
                     HoldComplete(~FE`Private`s:Symbol) :> 
                      Options(Unevaluated(FE`Private`s)), ~ -> {}})}, 
                 System`BoxForm`MakeSimpleSummaryBox(OutputStream, {
                   File -> Replace(FileNameSplit(Lookup(FE`Private`opts, File, 
                       "")), {{} -> "\[LongDash]", ~FE`Private`path:List :> 
                       Last(FE`Private`path)}), 
                   BinaryFormat -> Lookup(FE`Private`opts, BinaryFormat, 
                     "\[LongDash]")}, 
                  Prepend(FilterRules(FE`Private`opts, 
                    Except(File | BinaryFormat)), 
                   Replace(DirectoryName(Lookup(FE`Private`opts, File, "")), {
                     "" -> Nothing, ~FE`Private`dir :> 
                      Directory -> FE`Private`dir}))))))})}, All), 
        SectionGroup({Section("Formatting", "Subsubsection"), 
          Section(StyleData("ConditionalExpression"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(
               FrameBox({#1, StyleBox("\" if \"", 
                  "ConditionalExpressionLabel"), #2}, 
                FrameStyle -> GrayLevel(0.5`), BorderRadius -> 4))}), 
          Section(StyleData("Highlighted"), 
           TemplateBoxOptions :> {
             DisplayFunction -> 
              Function(FrameBox(#1, BaseStyle -> "Highlighted")), 
             InterpretationFunction -> (#1; Function(1))}), 
          Section(StyleData("Row")), Section(StyleData("RowDefault"), 
           BaseStyle -> "Row", TemplateBoxOptions -> {
             DisplayFunction -> Function({TemplateSlotSequence(##1)}), 
             InterpretationFunction -> 
              Function({"Row", "(", {"{", {TemplateSlotSequence(##1, ",")}, 
                 "}"}, ")"})}), Section(StyleData("RowWithSeparators"), 
           BaseStyle -> "Row", TemplateBoxOptions -> {
             DisplayFunction -> Function({TemplateSlotSequence(##3, #1)}), 
             InterpretationFunction -> 
              Function({"Row", "(", {
                 {"{", {TemplateSlotSequence(##3, ",")}, "}"}, ",", #2}, 
                ")"})})}, All), SectionGroup({
          Section("Hyperlinks", "Subsubsection"), 
          Section(StyleData("HyperlinkActive"), BaseStyle -> "Hyperlink", 
           FontColor -> RGBColor(0.80000000000000004`, 0.502`, 
             0.10199999999999999`), ShowAutoStyles -> False), 
          Section(StyleData("DirectoryHyperlink"), 
           TemplateBoxOptions :> {
             DisplayFunction -> 
              Function(StyleBox(ButtonBox(StringBox("\"", #1, "\""), 
                 ButtonFunction -> 
                  Function(Apply(#2, FE`SystemOpenDirectory)), 
                 ButtonData -> Dynamic({CurrentValue({TemplateSlot, 2}), 
                    Replace(CurrentValue({TemplateSlot, 3}), 
                     $Failed -> Nothing)})), 
                BaseStyle -> Dynamic(If(CurrentValue("MouseOver"), 
                   "HyperlinkActive", "Hyperlink")), 
                ShowStringCharacters -> False, ShowAutoStyles -> False)), 
             Tooltip -> StringBox("\"Browse to ", 
               DynamicBox(ToBoxes(CurrentValue({TemplateSlot, 2}))), "\"")}), 
          Section(StyleData("HyperlinkURL"), 
           TemplateBoxOptions :> {
             DisplayFunction -> 
              Function(
               ButtonBox(StyleBox(#1, 
                 BaseStyle -> Dynamic(If(CurrentValue("MouseOver"), 
                    "HyperlinkActive", Inherited)), 
                 ShowStringCharacters -> False, ShowAutoStyles -> False), 
                ButtonFunction -> Function(SystemOpen(#1)), ButtonData -> #2, 
                BaseStyle -> "Hyperlink")), InterpretationFunction -> 
              Function({"Hyperlink", "(", {#1, ",", InterpretationBox(, #2)}, 
                ")"}), Tooltip -> 
              DynamicBox(ToBoxes(CurrentValue({TemplateSlot, 2})))}), 
          Section(StyleData("ShowMoreDocumentationHyperlink"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(StyleBox(ButtonBox("\" \[RightGuillemet] \"", 
                 ButtonFunction -> 
                  Function(
                   With({
                     FE`Private`file:= 
                      Documentation`FindSymbolDocumentationByFullName(
                       CurrentValue({TemplateSlot, 1}))}, 
                    If(IsString(FE`Private`file), 
                     FE`CallFrontEnd(FrontEnd`DocumentOpen(FE`Private`file, 
                       False))))), BaseStyle -> "Text", 
                 ButtonFrame -> "Frameless"), 
                FontColor -> Dynamic(If(CurrentValue("MouseOver"), 
                   RGBColor(1, 0.5`, 0), RGBColor(0, 0, 1))), 
                ShowAutoStyles -> False)), 
             Tooltip -> "\"Open reference page\""}), 
          Section(StyleData("StylesheetHyperlink"), 
           FontColor -> RGBColor(0, 0, 0.502`), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicBox(
                With({
                  FE`Private`content:= 
                   Replace(CurrentValue({TemplateSlot, 1}), (
                       List | /\/)(~~~FE`Private`str:String) :> 
                     StringExpression(FE`Private`str))}, 
                 With({FE`Private`path:= ToFileName(FE`$StylesheetDirectory, 
                     FE`Private`content)}, 
                  TooltipBox(ButtonBox(StyleBox(ToBoxes(FE`Private`content), 
                     BaseStyle -> Dynamic(If(CurrentValue("MouseOver"), 
                        "HyperlinkActive", "StylesheetHyperlink")), 
                     ShowStringCharacters -> False), BaseStyle -> "Hyperlink", 
                    ButtonFunction -> Function(DocumentOpen(#1)), 
                    ButtonData -> FE`Private`path), 
                   ToBoxes(FE`Private`path))))))}), 
          Section(StyleData("StyleHyperlink"), 
           FontColor -> RGBColor(0, 0, 0.502`), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicBox(
                With({
                  FE`Private`content:= 
                   Replace(CurrentValue({TemplateSlot, 1}), (
                       List | /\/)(~~~FE`Private`str:String) :> 
                     StringExpression(FE`Private`str))}, 
                 ButtonBox(StyleBox(ToBoxes(FE`Private`content), 
                   BaseStyle -> Dynamic(If(CurrentValue("MouseOver"), 
                      "HyperlinkActive", "StylesheetHyperlink"))), 
                  BaseStyle -> "Hyperlink", ButtonFunction -> 
                   Function(FE`CallFrontEnd(FrontEnd`FindStyleDefinition(
                      #1))), ButtonData -> FE`Private`content)))), 
             Tooltip -> None})}, All), 
        SectionGroup({Section("Missing TemplateBox styles", "Subsubsection"), 
          Section(StyleData("TemplateBoxErrorDisplayStyle"), 
           Background -> RGBColor(1, 0.77000000000000002`, 
             0.77000000000000002`), FontColor -> GrayLevel(0.502`)), 
          Section(StyleData("TemplateBoxErrorDisplayArgumentStyle"), 
           Background -> GrayLevel(1), FontColor -> GrayLevel(0))}, All)}, 
       All)}, All), SectionGroup({
      Section(StyleData("Title"), BaseStyle -> "HeadingText", FontSize -> 22, 
       FontWeight -> Bold, MenuCommandKey -> "1", MenuSortingValue -> 1100, 
       SectionGroupPrecedence -> -100, 
       SectionMargins -> {{17, Inherited}, {15, 5}}), 
      SectionGroup({Section(StyleData("Subtitle"), BaseStyle -> "HeadingText", 
         FontSize -> 18, MenuCommandKey -> "2", MenuSortingValue -> 1150, 
         SectionGroupPrecedence -> -90, 
         SectionMargins -> {{17, Inherited}, {2, 10}}), 
        SectionGroup({Section(StyleData("Subsubtitle"), 
           BaseStyle -> "HeadingText", FontSize -> 14, MenuCommandKey -> "3", 
           MenuSortingValue -> 1200, SectionGroupPrecedence -> -80, 
           SectionMargins -> {{17, Inherited}, {2, 8}}), 
          SectionGroup({Section(StyleData("Section"), 
             BaseStyle -> "HeadingText", FontSize -> 16, FontWeight -> Bold, 
             MenuCommandKey -> "4", MenuSortingValue -> 1250, 
             SectionFrame -> {Inherited, {0.75`, Inherited}}, 
             SectionFrameMargins -> {Inherited, {4, Inherited}}, 
             SectionGroupPrecedence -> -50, 
             SectionMargins -> {{17, Inherited}, {14, 8}}), 
            SectionGroup({Section(StyleData("Subsection"), 
               BaseStyle -> "HeadingText", FontSize -> 12, FontWeight -> Bold, 
               MenuCommandKey -> "5", MenuSortingValue -> 1300, 
               SectionGroupPrecedence -> -40, 
               SectionMargins -> {{40, Inherited}, Inherited}), 
              Section(StyleData("Subsubsection"), BaseStyle -> "HeadingText", 
               FontSize -> 10, FontWeight -> Bold, MenuCommandKey -> "6", 
               MenuSortingValue -> 1350, SectionGroupPrecedence -> -30, 
               SectionMargins -> {{40, Inherited}, Inherited})}, All)}, All)}, 
         All)}, All)}, All)}, All)}, StyleDefinitions -> 
  "Stylesheets.pmathdoc", Visible -> True)