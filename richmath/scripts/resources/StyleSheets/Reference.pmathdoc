/* pMath Document */

Document({
  SectionGroup({Section(StyleData(StyleDefinitions -> "Core.pmathdoc")), 
    SectionGroup({Section("Stylesheet for documentation", "Title"), 
      Section(
       "This file contains default style definitions to apply to documentation \
       pages.", "Text"), SectionGroup({Section("Document styles", "Section"), 
        Section(StyleData("Document"), Background -> GrayLevel(1), 
         FontColor -> GrayLevel(0), 
         InputAliases :> {
           "ref" -> TemplateBox({"\[SelectionPlaceholder]"}, 
             "ReferenceHyperlink"), 
           "arg" -> StyleBox("\[SelectionPlaceholder]", "Arg"), 
           "key" -> TemplateBox({"\[SelectionPlaceholder]"}, "KeyEvent"), 
           "keyctrl" -> TemplateBox({"\[SelectionPlaceholder]"}, 
             "ControlKeyEvent"), "keyshift" -> 
            TemplateBox({"\[SelectionPlaceholder]"}, "ShiftKeyEvent"), 
           "keyctrlshift" -> TemplateBox({"\[SelectionPlaceholder]"}, 
             "ControlShiftKeyEvent"), Inherited}, Saveable -> False)}, All), 
      SectionGroup({Section("Section styles", "Section"), 
        Section(StyleData("Input"), EvaluationContext -> SectionGroup), 
        Section(StyleData("Output"), SectionLabel -> "out:"), 
        Section(StyleData("Print"), SectionLabel -> "")}, All), 
      SectionGroup({Section(StyleData("ObjectName"), BaseStyle -> "Section", 
         FontColor -> RGBColor(0, 0.502`, 0.125`), FontSize -> 22, 
         FontWeight -> Bold, SectionFrame -> 0, 
         SectionMargins -> {{17, Inherited}, {15, 5}}, 
         ShowSectionBracket -> False), Section(StyleData("Usage"), 
         BaseStyle -> "PrintUsage", SectionFrame -> {0, 0.75`}, 
         SectionFrameMargins -> {{17, 6}, {6, 6}}, 
         SectionMargins -> {{0, 0}, {Inherited, 8}}, Selectable -> False, 
         ShowAutoStyles -> False, ShowSectionBracket -> False, 
         ShowStringCharacters -> False)}, All), 
      SectionGroup({Section(StyleData("CollapseSection"), 
         Background -> GrayLevel(0.90200000000000002`), 
         BaseStyle -> "Section", FontColor -> RGBColor(0, 0.502`, 0.125`), 
         ReturnCreatesNewSection -> True, 
         SectionDingbat :> 
          OpenerBox(Dynamic(CurrentValue("SectionGroupOpen"))), 
         SectionFrame -> {0, 0.5`}, SectionFrameColor -> 
          GrayLevel(0.59999999999999998`), 
         SectionFrameMargins -> {{17, Inherited}, Inherited}, 
         SectionMargins -> 0, ShowSectionBracket -> False, 
         WholeSectionGroupOpener -> True), 
        Section(StyleData("SectionHeaderSpacer"), FontSize -> 2, 
         SectionGroupPrecedence -> -45, SectionMargins -> {Inherited, 4}, 
         SectionLabel -> "", ShowSectionBracket -> False), 
        SectionGroup({Section(StyleData("SectionFooterSpacer"), FontSize -> 2, 
           SectionGroupPrecedence -> -45, SectionMargins -> {Inherited, 4}, 
           SectionLabel -> "", ShowSectionBracket -> False), 
          Section(StyleData("NotesSection"), BaseStyle -> "CollapseSection", 
           DefaultNewSectionStyle -> "Notes", 
           DefaultReturnCreatedSectionStyle -> "NotesSectionHeaderSpacer", 
           ReturnCreatesNewSection -> True, 
           SectionFrame -> {Inherited, {Inherited, 0}}), 
          Section(StyleData("NotesSectionHeaderSpacer"), 
           BaseStyle -> "SectionHeaderSpacer", 
           ReturnCreatesNewSection -> True, 
           SectionFrame -> {Inherited, {0.5`, Inherited}}, 
           SectionFrameColor -> GrayLevel(0.59999999999999998`), 
           SectionFrameMargins -> {{0, 0}, {4, 0}}, 
           SectionMargins -> {{0, 0}, {0, Inherited}}), 
          Section(StyleData("Notes"), BaseStyle -> "Text", 
           DefaultNewSectionStyle -> "Notes", MenuSortingValue -> 1600, 
           ReturnCreatesNewSection -> True, 
           SectionDingbat :> StyleBox("\[U+25AA]", 
             FontColor -> GrayLevel(0.5`)), 
           SectionMargins -> {{35, Inherited}, {5, 5}}, 
           ShowSectionBracket -> Automatic), 
          Section(StyleData("2ColumnTableNotes"), BaseStyle -> "Text", 
           MenuSortingValue -> 1650, SectionMargins -> {
             {35, Inherited}, {5, 5}}, ShowSectionBracket -> Automatic), 
          Section(StyleData("PrimaryExamplesSection"), 
           BaseStyle -> "CollapseSection", DefaultNewSectionStyle -> 
            "ExampleSection", DefaultReturnCreatedSectionStyle -> 
            "ExampleSection", ReturnCreatesNewSection -> True), 
          SectionGroup({Section(StyleData("ExampleSection"), 
             BaseStyle -> "Subsection", DefaultNewSectionStyle -> 
              "ExampleText", FontColor -> RGBColor(0, 0.502`, 0.125`), 
             MenuCommandKey -> "4", MenuSortingValue -> 1210, 
             SectionDingbat :> 
              OpenerBox(Dynamic(CurrentValue("SectionGroupOpen"))), 
             SectionMargins -> {{35, Inherited}, Inherited}, 
             ShowSectionBracket -> Automatic, 
             WholeSectionGroupOpener -> True), 
            SectionGroup({Section(StyleData("ExampleSubsection"), 
               BaseStyle -> "Subsubsection", DefaultNewSectionStyle -> 
                "ExampleText", FontColor -> RGBColor(0, 0.502`, 0.125`), 
               MenuCommandKey -> "5", MenuSortingValue -> 1220, 
               SectionDingbat :> 
                OpenerBox(Dynamic(CurrentValue("SectionGroupOpen"))), 
               SectionMargins -> {{45, Inherited}, Inherited}, 
               ShowSectionBracket -> Automatic, 
               WholeSectionGroupOpener -> True), 
              Section(StyleData("ExampleText"), BaseStyle -> "Text", 
               DefaultNewSectionStyle -> "Input", MenuCommandKey -> "7", 
               MenuSortingValue -> 1400, SectionMargins -> {
                 Inherited, {6, 4}}, ShowSectionBracket -> Automatic), 
              SectionGroup({Section(StyleData("ExampleDelimiter"), 
                 DefaultNewSectionStyle -> "ExampleText", Evaluatable -> True, 
                 FontSize -> 2, MenuCommandKey -> "6", 
                 MenuSortingValue -> 1300, 
                 SectionFrame -> {Inherited, {0.25`, Inherited}}, 
                 SectionFrameColor -> GrayLevel(0.70199999999999996`), 
                 SectionGroupPrecedence -> -25, 
                 SectionMargins -> {{35, Inherited}, {8, 4}}, 
                 SectionLabel -> "", ShowSectionBracket -> Automatic), 
                Section(StyleData("SeeAlsoSection"), 
                 BaseStyle -> "CollapseSection", 
                 DefaultNewSectionStyle -> "SeeAlso", 
                 DefaultReturnCreatedSectionStyle -> "SeeAlso", 
                 ReturnCreatesNewSection -> True), 
                Section(StyleData("SeeAlso"), BaseStyle -> "Text", 
                 SectionMargins -> {{35, Inherited}, {15, 15}}, 
                 ShowSectionBracket -> Automatic)}, All)}, All)}, All)}, 
         All)}, All), SectionGroup({Section("Box styles", "Section"), 
        SectionGroup({Section("TemplateBox styles", "Subsection"), 
          Section(StyleData("UsageReference"), 
           TemplateBoxOptions -> {
             DisplayFunction -> 
              Function(DynamicBox(
                Replace(MakeExpression(CurrentValue({TemplateSlot, 1}), 
                  ParseSymbols -> False), 
                 HoldComplete(~FE`Private`sym:Symbol) :> 
                  ToBoxes(Documentation`PrepareUsageSection(
                    FE`Private`sym::"usage"))), Selectable -> True))}), 
          SectionGroup({Section("Hyperlinks", "Subsubsection"), 
            Section(StyleData("ReferenceHyperlink"), 
             TemplateBoxOptions :> {
               DisplayFunction -> 
                Function(StyleBox(StringBox("\"", 
                   ButtonBox(#1, ButtonFunction -> 
                     Function(
                      With({
                        FE`Private`file:= 
                         Documentation`FindSymbolDocumentationByFullName(
                          CurrentValue({TemplateSlot, 1}))}, 
                       If(IsString(FE`Private`file), 
                        FE`CallFrontEnd(FrontEnd`DocumentOpen(FE`Private`file, 
                          False))))), BaseStyle -> "Text", 
                    ButtonFrame -> "Frameless"), "\""), 
                  ShowStringCharacters -> False, 
                  FontColor -> 
                   Dynamic(
                    With({
                      FE`Private`file:= 
                       Documentation`FindSymbolDocumentationByFullName(
                        CurrentValue({TemplateSlot, 1}))}, 
                     If(FE`Private`file === None, 
                      RGBColor(0.80000000000000004`, 0, 0), 
                      RGBColor(0, 0, 0.80000000000000004`)))), 
                  ShowAutoStyles -> False)), 
               Tooltip -> DynamicBox(
                 Replace(MakeExpression(CurrentValue({TemplateSlot, 1}), 
                   ParseSymbols -> False), 
                  HoldComplete(~FE`Private`sym:Symbol) :> 
                   ToBoxes(FE`Private`sym::"usage")))}), 
            Section(StyleData("NamedCharacterHyperlink"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(StyleBox(StringBox({"\"\\\\[", #1, "]\""}), 
                  FontColor -> RGBColor(0, 0, 0.80000000000000004`), 
                  ShowStringCharacters -> False, ShowAutoStyles -> False))})}, 
           All), SectionGroup({Section("Keyboard shortcuts", "Subsubsection"), 
            Section(StyleData("KeyEvent"), TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(StyleBox(FrameBox(StringBox({"\"", #1, "\""}), 
                   BorderRadius -> 2.5`, 
                   Background -> GrayLevel(0.96499999999999997`)), 
                  "ControlStyle", FontSize -> 
                   Dynamic(0.80000000000000004`*CurrentValue(FontSize)), 
                  FontColor -> GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("KeyEventDelimiter"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(StyleBox(StringBox("\"", #1, "\""), "ControlStyle", 
                  FontColor -> GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("AliasDelimiterKeyEvent"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(TemplateBox({" \[AliasIndicator] "}, "KeyEvent"))}), 
            Section(StyleData("ControlKeyEvent"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(
                 StyleBox({StringBox("\"", TemplateBox({"Ctrl"}, "KeyEvent"), 
                    "+", TemplateBox({#1}, "KeyEvent"), "\"")}, 
                  "ControlStyle", FontColor -> 
                   GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("AltKeyEvent"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(
                 StyleBox({StringBox("\"", TemplateBox({"Alt"}, "KeyEvent"), 
                    "+", TemplateBox({#1}, "KeyEvent"), "\"")}, 
                  "ControlStyle", FontColor -> 
                   GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("ShiftKeyEvent"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(
                 StyleBox({StringBox("\"", TemplateBox({"Shift"}, "KeyEvent"), 
                    "+", TemplateBox({#1}, "KeyEvent"), "\"")}, 
                  "ControlStyle", FontColor -> 
                   GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("ControlShiftKeyEvent"), 
             TemplateBoxOptions -> {
               DisplayFunction -> 
                Function(
                 StyleBox({StringBox("\"", TemplateBox({"Ctrl"}, "KeyEvent"), 
                    "+", TemplateBox({"Shift"}, "KeyEvent"), "+", 
                    TemplateBox({#1}, "KeyEvent"), "\"")}, "ControlStyle", 
                  FontColor -> GrayLevel(0.35999999999999999`)))}), 
            Section(StyleData("Title"), MenuSortingValue -> None), 
            Section(StyleData("Subtitle"), MenuSortingValue -> None), 
            Section(StyleData("Subsubtitle"), MenuSortingValue -> None), 
            Section(StyleData("Section"), MenuSortingValue -> None), 
            Section(StyleData("Subsection"), MenuSortingValue -> None), 
            Section(StyleData("Subsubsection"), MenuSortingValue -> None), 
            Section(StyleData("Text"), MenuSortingValue -> None), 
            Section(StyleData("Item"), MenuSortingValue -> None)}, All)}, 
         All)}, All)}, All)}, All)}, StyleDefinitions -> 
  "Stylesheets.pmathdoc", Visible -> True)