/* pMath Document */

Document({
  SectionGroup({Section(StyleData(StyleDefinitions -> "Core.pmathdoc")), 
    SectionGroup({Section("Stylesheet for documentation", "Title"), 
      Section(
       "This file contains default style definitions to apply to documentation \
       pages.", "Text"), SectionGroup({Section("Document styles", "Section"), 
        Section(StyleData("Document"), Saveable -> False)}, All), 
      SectionGroup({Section("Section styles", "Section"), 
        Section(StyleData("Output"), SectionLabel -> "out:")}, All), 
      SectionGroup({Section(StyleData("ObjectName"), BaseStyle -> "Section", 
         FontColor -> RGBColor(0, 0.502`, 0.125`), FontSize -> 22, 
         FontWeight -> Bold, SectionFrame -> {0, 0, 0, 0}, 
         SectionMargins -> {17, Inherited, 15, 5}, 
         ShowSectionBracket -> False), Section(StyleData("Usage"), 
         BaseStyle -> "PrintUsage", SectionFrame -> {0, 0, 0.75`, 0.75`}, 
         SectionFrameMargins -> {17, 6, 6, 6}, 
         SectionMargins -> {0, 0, Inherited, Inherited}, 
         ShowAutoStyles -> False, ShowSectionBracket -> False, 
         ShowStringCharacters -> False)}, All), 
      SectionGroup({Section(StyleData("CollapseSection"), 
         Background -> GrayLevel(0.90200000000000002`), 
         BaseStyle -> "Section", FontColor -> RGBColor(0, 0.502`, 0.125`), 
         ReturnCreatesNewSection -> True, SectionDingbat :> OpenerBox(
          Dynamic(CurrentValue("SectionGroupOpen"))), 
         SectionFrame -> {0, 0, 0.5`, 0.5`}, 
         SectionFrameColor -> GrayLevel(0.59999999999999998`), 
         SectionFrameMargins -> {17, Inherited, Inherited, Inherited}, 
         SectionMargins -> {0, 0, 0.75`, 0.75`}, ShowSectionBracket -> False, 
         WholeSectionGroupOpener -> True), Section(StyleData("NotesSection"), 
         BaseStyle -> "CollapseSection", DefaultNewSectionStyle -> "Notes", 
         DefaultReturnCreatedSectionStyle -> "Notes", 
         ReturnCreatesNewSection -> True), Section(StyleData("Notes"), 
         BaseStyle -> "Text", DefaultNewSectionStyle -> "Notes", 
         ReturnCreatesNewSection -> True, SectionMargins -> {35, Inherited, 5, 
          5}, SectionDingbat -> StyleBox("\"\[U+25AA]\"", 
          FontColor -> GrayLevel(0.5`)), ShowSectionBracket -> Automatic), 
        Section(StyleData("2ColumnTableNotes"), BaseStyle -> "Text", 
         SectionMargins -> {35, Inherited, 5, 5}, 
         ShowSectionBracket -> Automatic), 
        Section(StyleData("PrimaryExamplesSection"), 
         BaseStyle -> "CollapseSection", DefaultNewSectionStyle -> 
          "ExampleSection", DefaultReturnCreatedSectionStyle -> 
          "ExampleSection", ReturnCreatesNewSection -> True), 
        SectionGroup({Section(StyleData("ExampleSection"), 
           BaseStyle -> "Subsection", DefaultNewSectionStyle -> "ExampleText", 
           FontColor -> RGBColor(0, 0.502`, 0.125`), 
           SectionDingbat :> OpenerBox(
            Dynamic(CurrentValue("SectionGroupOpen"))), 
           SectionMargins -> {35, Inherited, Inherited, Inherited}, 
           ShowSectionBracket -> Automatic, WholeSectionGroupOpener -> True), 
          Section(StyleData("ExampleText"), BaseStyle -> "Text", 
           DefaultNewSectionStyle -> "Input", 
           SectionMargins -> {Inherited, Inherited, 6, 4}, 
           ShowSectionBracket -> Automatic), 
          SectionGroup({Section(StyleData("ExampleDelimiter"), 
             DefaultNewSectionStyle -> "ExampleText", Evaluatable -> True, 
             FontSize -> 2, SectionFrame -> {Inherited, Inherited, 0.25`, 
              Inherited}, SectionFrameColor -> GrayLevel(
              0.70199999999999996`), SectionGroupPrecedence -> -35, 
             SectionMargins -> {35, Inherited, 8, 4}, SectionLabel -> "", 
             ShowSectionBracket -> Automatic), 
            Section(StyleData("SeeAlsoSection"), 
             BaseStyle -> "CollapseSection", DefaultNewSectionStyle -> 
              "SeeAlso", DefaultReturnCreatedSectionStyle -> "SeeAlso", 
             ReturnCreatesNewSection -> True), 
            Section(StyleData("SeeAlso"), BaseStyle -> "Text", 
             SectionMargins -> {35, Inherited, 5, 5}, 
             ShowSectionBracket -> Automatic)}, All)}, All)}, All), 
      SectionGroup({Section("Box styles", "Section"), 
        SectionGroup({Section("TemplateBox styles", "Subsection"), 
          SectionGroup({Section("Hyperlinks", "Subsubsection"), 
            Section(StyleData("ReferenceHyperlink1"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
               ComplexStringBox({"\"", #1, "\""}), 
               FontColor -> RGBColor(0, 0, 0.80000000000000004`)) &)}), 
            Section(StyleData("ReferenceHyperlink2"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
               ComplexStringBox({"\"", #1, "\""}), 
               FontColor -> Dynamic(
                With({FE`Private`filetype:= With({
                    FE`Private`name:= With({
                      FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
                     ReleaseHold(FE`CallFrontEnd(
                       FrontEnd`PrepareDynamicEvaluation(#1, 
                        FE`Private`dyn))))}, 
                   FileType(ToFileName({FE`$FrontEndDirectory, "resources", 
                      "Documentation", "System"}, 
                     FE`Private`name ++ ".pmathdoc")))}, 
                 If(FE`Private`filetype === File, 
                  RGBColor(0, 0, 0.80000000000000004`), 
                  RGBColor(0.80000000000000004`, 0, 0))))) &)}), 
            Section(StyleData("ReferenceHyperlink"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
               ComplexStringBox({
                 "\"", ButtonBox(#1, ButtonFunction -> (Replace(#1, {
                    BoxData(~FE`Private`name:String) :> DocumentOpen(
                     ToFileName({FE`$FrontEndDirectory, "resources", 
                       "Documentation", "System"}, 
                      FE`Private`name ++ ".pmathdoc"))}, 0) &), 
                  BaseStyle -> "Text", ButtonFrame -> "Frameless"), "\""}), 
               FontColor -> Dynamic(
                With({FE`Private`filetype:= With({
                    FE`Private`name:= With({
                      FE`Private`dyn:= Internal`GetCurrentDynamicID()}, 
                     ReleaseHold(FE`CallFrontEnd(
                       FrontEnd`PrepareDynamicEvaluation(#1, 
                        FE`Private`dyn))))}, 
                   FileType(ToFileName({FE`$FrontEndDirectory, "resources", 
                      "Documentation", "System"}, 
                     FE`Private`name ++ ".pmathdoc")))}, 
                 If(FE`Private`filetype === File, 
                  RGBColor(0, 0, 0.80000000000000004`), 
                  RGBColor(0.80000000000000004`, 0, 0))))) &)}), 
            Section(StyleData("NamedCharacterHyperlink"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
               ComplexStringBox({"\"\\\\[", #1, "]\""}), 
               FontColor -> RGBColor(0, 0, 0.80000000000000004`)) &)})}, All), 
          SectionGroup({Section("Keyboard shortcuts", "Subsubsection"), 
            Section(StyleData("KeyEvent"), TemplateBoxOptions -> {
              DisplayFunction -> (StyleBox(
               FrameBox(ComplexStringBox({"\"", #1, "\""}), 
                BorderRadius -> 2.5`), "ControlStyle", 
               Background -> GrayLevel(0.96499999999999997`), 
               FontColor -> GrayLevel(0.35999999999999999`)) &)}), 
            Section(StyleData("KeyEventDelimiter"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox(
               ComplexStringBox({"\"", #1, "\""}), "ControlStyle", 
               FontColor -> GrayLevel(0.35999999999999999`)) &)}), 
            Section(StyleData("ControlKeyEvent"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox({
                ComplexStringBox({"\"", TemplateBox({"Ctrl"}, "KeyEvent"), 
                  "+", TemplateBox({#1}, "KeyEvent"), "\""})}, "ControlStyle", 
               FontColor -> GrayLevel(0.35999999999999999`)) &)}), 
            Section(StyleData("AltKeyEvent"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox({
                ComplexStringBox({"\"", TemplateBox({"Alt"}, "KeyEvent"), "+", 
                  TemplateBox({#1}, "KeyEvent"), "\""})}, "ControlStyle", 
               FontColor -> GrayLevel(0.35999999999999999`)) &)}), 
            Section(StyleData("ShiftKeyEvent"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox({
                ComplexStringBox({"\"", TemplateBox({"Shift"}, "KeyEvent"), 
                  "+", TemplateBox({#1}, "KeyEvent"), "\""})}, "ControlStyle", 
               FontColor -> GrayLevel(0.35999999999999999`)) &)}), 
            Section(StyleData("ControlShiftKeyEvent"), 
             TemplateBoxOptions -> {DisplayFunction -> (StyleBox({
                ComplexStringBox({"\"", TemplateBox({"Ctrl"}, "KeyEvent"), 
                  "+", TemplateBox({"Shift"}, "KeyEvent"), "+", 
                  TemplateBox({#1}, "KeyEvent"), "\""})}, "ControlStyle", 
               FontColor -> GrayLevel(0.35999999999999999`)) &)})}, All)}, 
         All)}, All)}, All)}, All)}, StyleDefinitions -> 
  "Stylesheets.pmathdoc", Visible -> True)