Row({Button("Math in Text",DocumentApply(SelectedDocument(),"\({\"\[SelectionPlaceholder]\"}\)")),
	Button("italic",DocumentApply(SelectedDocument(),StyleBox("\[SelectionPlaceholder]","TI"))),
	Button("Arg Style",DocumentApply(SelectedDocument(),StyleBox("\[SelectionPlaceholder]","Arg"))),
	Button("Small Caps",DocumentApply(SelectedDocument(),StyleBox("\[SelectionPlaceholder]",FontFeatures->{"smcp"})))})

- BUG: 0.0`10 gives 0 and InputForm(0.0``10) prints as 0.0000000000000`11.439139835231286, which gives 0 when used as input

? pmath: add internal multi precision RealInterval(a,b) type with correct outward rounding (=> mpfi library)
	or implement it with some Internal`WithSoftwareRoundingMode(code, mode)
	
	make N(...) use adaptive precision tracking through RealInterval

? introduce pmath_identical(...) which gives FALSE for arguments 0.0 and -0.0 (unlike pmath_equal)

- BUG: InputForm(Hold(a++*++b)) gives "Hold(a++ ++b)"
	but Hold(a++ ++b) parses as Hold(StringExpression(a,Increment(b)))
	
	similar: Hold(a--*++b) is displayed as Hold(a-- ++b), but that gives a syntax error

- interesting: http://www.eecs.berkeley.edu/~fateman/papers/mma.review.pdf
	
- pmath: pattern matching intermediate results are different than in Mma:
		f(x: h(~a /? (Print("1:", {{x},{a},{b},{c},{d}}); True),
				~b /? (Print("2:", {{x},{a},{b},{c},{d}}); True)),
			(~c|~d) /? (Print("3:", {{x},{a},{b},{c},{d}}); True)
		) /? (Print("4:", {{x},{a},{b},{c},{d}}); True) ::=
			{{x},{a},{b},{c},{d}}
	evaluating f(h(1,2)) yields:
		 1:{{}, {1}, {}, {}, {}}
		 1:{{}, {1}, {2}, {}, {}}
		 2:{{}, {1}, {2}, {}, {}}
		 1:{{h(1, 2)}, {1}, {2}, {3}, {}}
		 2:{{h(1, 2)}, {1}, {2}, {3}, {}}
		 3:{{h(1, 2)}, {1}, {2}, {3}, {}}
		 4:{{h(1, 2)}, {1}, {2}, {3}, {}}
		{{h(1, 2)}, {1}, {2}, {3}, {}}
	whereas the Mma equivalent yields
		 1:{{x},{1},{b},{c},{d}}
		 2:{{x},{a},{2},{c},{d}}
		 3:{{x},{a},{b},{3},{}}
		 3:{{x},{a},{b},{3},{}}
		 4:{{h[1,2]},{1},{2},{3},{}}
		{{h[1, 2]}, {1}, {2}, {3}, {}}

- pmath: Make OptionValue() function detection compatible with Mma.
	OptionValue(f,opt) should take the first OptionsPattern(...) which appears inside f(...) on the LHS,
		no matter, what arguments that OptionsPattern(...) had
	OptionValue(opt) should be equivalent to OptionValue(f,opt) where f is the head of the LHS.

- richmath: add undo/redo stack

- richmath: automatically insert closing bracket, 
	allow overtyping these auto-inserted bracket (but not manually inserted brackets!)
	remove the auto-inserted-but-not-yet-overtyped bracket when deleting the opening bracket via backspace

- richmath: add code refactoring (introduce variable, extract function, rename variable, ...)

- richmath: add code navigation (goto definition, find all references), also into external *.pmath files 
	or via Java Decompiler into *.class files for Java-bindings (same with ILSpy for later .Net-binding)

- richmath: improve autocompletion: 
	use drop-down-list, 
	suggest local variables, 
	suggest option names, 
	suggest results for aliases,
	provide extensible auto-completion framework...
	suggest Java/.Net methods (when using "@"-syntax),
	suggest special string values,

- pmath/modules: add a .Net-binding similar to the Java-binding
	
- pmath: support C++11 rvalue references for pmath::Expr and derived bindings (e.g. Eigen module)
	to get rid of numerous pmath_ref/unref() calls
	
- pmath: implement Together(...) 

- pmath: generate a message when unpacking a packed array

- richmath: ask to save before closing
	
- richmath: Why is the end column of debug-info so large?? See "InspectBoxes - Test.pmathdoc"
	This does not occur in test.exe ?!?

- add Developer`StackInformation() to get {{"Head" -> symbol, "Location" -> debuginfo, ...}, ...}

- Message(...) should print a stack trace
- add Assert(...)

- richmath: menu item Evaluate in Subsession is incorrectly grayed out during evaluations...

- richmath: graphics tick length should depend on Max(width, height) for all axes

- richmath: Add PlotRangePadding option and Scaled(...) coordinates in graphics

- richmath: Add Polygon, VertexColors, Opacity

- pmath: automatically load pmath-eigen.dll when Inverse()/LUDecomposition()/Eigenvalues()/... is 
	called; let those wrap the Eigen`-exported functions

? richmath: Maybe always use the ssty=1 variant (also in script level 0) for \[Prime], 
	\[DoublePrime], ... outside of strings to make Cambria Math consistent with Asana Math, 
	MathematicaMono, ... ?

- richmath: add glyphs for \[LeftBracketingBar], \[LeftDoubleBracketingBar], \[LeftInvisibleBracket], ...
	to pMathFallback.ttf font: Text alongside Mathematica shapers would otherwise show invalid glyph.

? add InputDocument(): Palettes may be the SelectedDocument(), but never the InputDocument()

- add $MinPrecision, $MaxPrecision to access pmath_thread_t::min_precision, pmath_thread_t::max_precision

- support FontSlant->Toggle, FontWeight->Toggle, FontSize->Larger, FontSize->Smaller

? pause all EvaluateDelayed() or only abortion times during GUI operations, delay abort-actions 
  during Finally() and internal cleanup of Block(), Get(), ...

- richmath: line heights jump up and down in Column({Dynamic(x),Slider(Dynamic(x),0..9..1)})
- richmath: DocumentApply(..., Section(...)) does not handle placeholders (same for SectionGroup)

- add richmath::StyleSection class and handle Section(StyleData(...),...)
- allow creation of a richmath::Style from a richmath::StyleSection
- handle StyleDefinitions document option

- make ListConvolve work on multi-dimensional arrays
- add Differences, Accumulate

- add InverseFunction

- produce syntax error when in "\U12345678", i.e. when the character is not in the Unicode range.

- add ArrayPad(), ArrayFlatten()

- pmath-java: add pmath.Core.cleanup() to call pmath_done() on the current Java thread

- add ToAbsoluteFileName(), AppendTo(), PrependTo() [find better name for the last two!]

- add PreserveImageOptions option

- BUG: MSVC-richmath crashes/hangs on CTRL-C
	(seems to be connected with fully optimized build, pmath_file_create_compressor and pmath_serialize)

- pmath: implement ArcSinh, ArcCosh, ArcTanh, ArcCsch, ArcSech, ArcCoth

- pmath: Sin(Infinity) ---> Interval(-1 .. 1) and so on

- richmath: add options for Section/Style to manipulate
   Context::smaller_fraction_parts

- richmath: fix syntax coloring in Literal(f)(x,y)

- richmath: smart quotes in text:
   " after a space or the beginning of the text gives left double quotation mark
   " after a number gives prime (or only after a digit?)
   " after anything else gives right quotation mark
   analogous for '

- richmath: support Interrupt()

- richmath: add DocumentEventActions

- support euclidean integers in GCD/ExtendedGCD

- implement NumberForm

- implement RotateLeft, RotateRight

- implement QRDecomposition() in C code

- make $MaxExtraPrecision thread-local, add $MinExtraPrecision

- add Developer`ClearCache() or sth like this to clear all caches

- pmath: implement Rationalize

- pmath: add ParallelFold() [better name?]

- pmath: implement MapAt, HasValue/IsValue

? pmath: use timsort instead of platforms qsort: http://bugs.python.org/file4451/timsort.txt

- richmath: FractionBox: change distance between fraction rule an numerator (too big)

- pmath: crash with recursive String patterns

!? make <<context` parse as Needs("context`") and do not provide special syntax for Get()

? implement Stack(pattern)
	this requires us to save a copy of the expression before pattern matching!

? pmath: implement Transpose in C code (see transpose.pmath)

- StyleBox: support FontSize values Smaller, Larger, Tiny, Small, Normal, Large, Huge

- SetOptions(f(a->1), a->2)  ==>  f(a->2)

- richmath: implement bidirectional text for MathSequences.

?! change all double-comparisions a==b to almost_equal_machine(a,b)  (as in compare.c)
	A double could actually be held in an 80bit x87 floating point register and thus be != 0, but when converted to double (written to memory), it becomes 0,
	So "if(x!=0){ some_x_invariant_code_that_prevents_optimizing_the_assert_away; assert(x!=0); }" can actually crash!
	[See "The pitfalls of verifying floating-point computations", Monniaux : http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf]

- add counter for regex cache in debug mode

? GUI: add ALT+Left/Right/Up/Down to move in the expression tree

- eval Complex(0, x)^q with rational q

- add KroneckerProduct(),
	Inverse(), PseudoInverse(), RowReduce(), MatrixRank(), Normalize(),
	Projection(), Orthogonalize(), ConjugateTranspose(),
	IdentityMatrix(), ChracteristicPolynomial(), Eigenvalues(), Eigenvectors()

- implement Norm(matrix, 2)

- add InterpretTemplate(), see Mathematica's ToBoxes[Superscript[1,2]]

- add option to write a BOM to Unicode files. currently, it is added for "UTF-16" and "UTF-32"
  add the BOM automatically for UTF-8 on Windows but not on UNIX

? Test what happens, when a thread-message is send to a parent thread (which waits for its children to finish).
	The message _should_ be handled by the currently waited-for child thread, but I have never tested it.

	TimeContrained() is implemented by letting the timer_thread (= low-prio GC thread) send a `Throw(...)` message in xx seconds.
	That should also abort any child threads.

?? remove Syntax f[[opt]] as a short form for OptionValue(f, opt)

? remove IsHeld() ?

- use General::privv in more situations (e.g. when opening files instead of just General::noopen)
- generate General::optx in pmath_options_extract() for any rules that do not define valid options

- add Parenthesize(expr, prio), same as MakeBoxes(expr), but changes priority to prio
 => Parenthesize(a+b, Range)*c --> "a+b*c" instead of normal "(a+b)*c"
    Parenthesize(a*b, Times)+c --> "(a*b)+c" instead of normal "a*b+c"

- hide/remove pmath_symbol_[get|set]_value(),
  ? publish _pmath_assign() from "src/pmath-builtins/control-private/assign.c" as pmath_symbol_assign()
  ? publish pmath_symbol_find_value() from <pmath-util/symbol-values-private.h>

- add pmath_atomic_fetch_and_bitand(), pmath_atomic_fetch_and_bitor()
  add pmath_symbol_add_attributes(), pmath_symbol_remove_attributes()

- add Precedence(), PrecedenceForm()

- add Quiet()

- add Insert()

- improve Abs() => complex values

- add Outer()

? add IsRule(), IsRuleList(), IsRuleOrRuleList(), IsMatch(p)()

- add ascii syntax for \mapsto character: x |-> f(x)

? add symbol "Rational" and make rational numbers match ~(~,~)  (items: Rational, numerator, denominator).

!! when and where do we need memory barriers ?
  see:
    * http://www.google.com/codesearch?hl=de&q=show:PBE7MtaLlk0:xpcZYsLsbi4:9oPi5mTcNcs&sa=N&ct=rd&cs_p=http://webauth.stanford.edu/source/libgcc-3.4.4.tar.bz2&cs_f=gcc-3.4.4/libjava/sysdep/powerpc/locks.h
    * http://lxr.linux.no/linux/Documentation/memory-barriers.txt

- optimize pmath_expr_t for (multidimensional) rectangular arrays of intptr_t/double with List as head of all sublists

- add support for file io in richmath (graphical front-end) and write help files for every symbol

- builtin_power: handle approximate complex arguments (real or imaginary part is pmath_float_t)
- builtin_power: handle special complex values (E^(I Pi) = -1, ...).

- !!! implement FactorInteger() to factorize integers.

? implement named pipes. E.g. as in Mathematica: OpenRead("!exec") opens a pipe or starts an application exec and reads from its stdout.
_____________
might be useful: ilog2:
	* http://www.google.com/codesearch?hl=de&q=ilog2+asm+lang:c+show:CJxDAk0V72g:yNp7vgDS2bo:dSU16tYYx2w&sa=N&cd=1&ct=rc&cs_p=
	* http://gentoo.osuosl.org/distfiles/asterisk-1.2.17.tar.gz&cs_f=asterisk-1.2.17/codecs/log2comp.h
