LIBRARY

Row({Button("Math in Text",DocumentApply(SelectedDocument(),"\({\"\"}\)")),
	Button("italic",DocumentApply(SelectedDocument(),StyleBox("",FontSlant->Italic))),
	Button("Arg Style",DocumentApply(SelectedDocument(),StyleBox("","Arg")))})

? pmath: implement Transpose in C code (see transpose.pmath)

- pmath: use "fat values": a pmath_t will be an 8-byte struct, that contains small ints and doubles directly, (maybe also small strings). tag bits specify the type 
	advantage: 
		- lower memory usage for small ints/machine floats
		- maybe faster type-testing, because no pointer must be dereferenced
		- maybe faster arithmetic operations for the same reason
		- less malloc calls
	disadvantage:
		- totally different code/typedefs for LE32, BE32, LE64 and BE64 architectures
		- note, that we assume ieee-double arithmetic
		- (?) might need CAS2 operation on 32bit platforms, where simple CAS was enough. CAS2 is not always available
			_pmath_atomic_lock_ptr() must be rewritten for fat value locking.
		- (!!!) how to tell apart pointers and doubles on 64bit platforms???
			solution 1: Heap-pointers are effectivly only 48 bit wide (48bit or 47bit on todays x64, up to 52bit physical addresses for future x64 cpus, 44bit on todays sparc). non-NaN/non-Inf doubles have the 11 exponent bits != all 1, so x1111111 1111xxxx yyyyyyyy yyyyyyyy yyyyyyyy yyyyyyyy yyyyyyyy yyyyyyyy has 5 tag bits (x...xxxx), pointers do not need more than the 48 y's (and could be shifted because of 8-byte alignment -> 3 more bits. in total, this could be expanded to 64-12+3+1 = 56 bits for pointers, when we reserve the first x as a pointer/other-non-double flag and assume, that user-space pointers have a sign bit of 0)
				CAUTION: this model may cause total damage on other/future systems which have heap addresses above 2^48-1
			solution 2: use 1 bit of the mantissa to flag double/non-double (= last bit). Pointers are 8-byte aligend, so we have 2 more bits for a non-double tag to tell apart pointers and other stuff. 
				CAUTION: handle denormalized (=small) numbers; $MachineEpsilon effectively doubles; non-standard arithmetic
			solution 3: use 1 bit of exponent ... but that leads to a lot of bit-shifting, problems with denormalized numbers
			solution 4: store double in the heap (but then there is almost no advantage of fat values)
			solution 5: use 16-byte structs (impossible, since MSVC disallows returning structs of size > 64bit: http://msdn.microsoft.com/en-us/library/7572ztz4.aspx)
		
	note, that 8-byte structs are returned in registers (MSVC, GCC), but both compilers handle larger structs different when used as function return values, so we cannot use a bigger type
	see also: http://blog.mozilla.com/rob-sayre/2010/08/02/mozillas-new-javascript-value-representation
	
- richmath: implement bidirectional text for MathSequences.

?! change all double-comparisions a==b to almost_equal_machine(a,b)  (as in compare.c)
	A double could actually be held in an 80bit x87 floating point register and thus be != 0, but when converted to double (written to memory), it becomes 0, 
	So "if(x!=0){ some_x_invariant_code_that_prevents_optimizing_the_assert_away; assert(x!=0); }" can actually crash!
	[See "The pitfalls of verifying floating-point computations", Monniaux : http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf]

? change Range: start..delta..end = Range(start, delta, end) or Range(start, end, delta)  instead of start..end..delta = Range(start, Range(end,delta))

? implement Symbol <-> Id multimap (for Dynamic()) as two pMath functions instead of two pmath_hashtable_t
  Internal`DynamicSymbolReferences(sym) = {ref1, ref2, ...}
  Internal`DynamicReferenceSymbols(ref) = HoldComplete(sym1, sym2, ...)

- add counter for regex cache in debug mode

? GUI: add ALT+Left/Right/Up/Down to move in the expression tree

- eval Complex(0, x)^q with rational q

- add ParallelFold() [better name?], Nest(), NestList(), NestWhile(), NestListWhile(),
  FixedPoint(), FixedPointList(), TakeWhile(), LengthWhile()

- add KroneckerProduct(), ArrayFlatten(),
	Norm(), Cross(), Total(), LinearSolve(), Inverse(), PseudoInverse(), RowReduce(), MatrixRank(), Normalize(), 
	Projection(), Orthogonalize(), ConjugateTranspose(),
	IdentityMatrix(), ChracteristicPolynomial(), QRDecomposition(), Eigenvalues(), Eigenvectors()

- add InterpretTemplate(), see Mathematica's ToBoxes[Superscript[1,2]]

- add option to write a BOM to unicode files. currently, it is added for "UTF-16" and "UTF-32"
  add the BOM automatically for UTF-8 on Windows but not on UNIX

? Test what happens, when a thread-message is send to a parent thread (which waits for its children to finish). 
	The message _should_ be handled by the currently waited-for child thread, but I have never tested it.
	
	TimeContrained() is implemented by letting the timer_thread (= low-prio GC thread) send a `Throw(...)` message in xx seconds.
	That should also abort any child threads.

?? remove Syntax f[[opt]] as a short form for OptionValue(f, opt)

- add ToExpression(x) which is x.StringToBoxes.BoxesToExpression for strings x and BoxesToExpression(x) for anything else

! inspect numerical instability [introduced with EARLYCODE before pmath_expression_sort for Plus,Times]:
        Local({x:=1/Pi},Do(x:=3.5*x*(1-x),10^6);x)
        0.5008842103072179`
   was: 0.5008842103072177` (=same as early code after pmath_expression_sort and same as Mathematica)
    
	The reason is that floating point numbers are not an associative field, so sorting before calling Plus/Times is important to remain consistency, because a*b*c is calculated as (a*b)*c, so with sorting it is allways (min(a,b,c) * median(a,b,c))*max(a,b,c)

 Timing(Local({x:=1/Pi},Do(x:=3.5`20*x*(1-x),100);x))

? remove IsHeld() ?

- use General::privv in more situations (e.g. when opening files instead of just General::noopen)
- generate General::optx in pmath_options_extract() for any rules that do not define valid options

- add Parenthesize(expr, prio), same as MakeBoxes(expr), but changes priority to prio
 => Parenthesize(a+b, Range)*c --> "a+b*c" instead of normal "(a+b)*c"
    Parenthesize(a*b, Times)+c --> "(a*b)+c" instead of normal "a*b+c"

- hide/remove pmath_symbol_[get|set]_value(), 
  ? publish _pmath_assign() from "src/pmath-builtins/control-private/assign.c" as pmath_symbol_assign()
  ? publish pmath_symbol_find_value() from <pmath-util/symbol-values-private.h>

- add pmath_atomic_fetch_and_bitand(), pmath_atomic_fetch_and_bitor()
  add pmath_symbol_add_attributes(), pmath_symbol_remove_attributes()

- add Precedence(), PrecedenceForm()

- add Quiet()

- add Insert()

- add Conjugate(), improve Abs() => complex values
  
- implement hyperbolic funtions and inverse trigonometric/hyperbolic functions

- add Outer()

? add IsRule(), IsRuleList(), IsRuleOrRuleList(), IsMatch(p)()

- add FilterRules(rules, {pat1, ...}), picks only those rules, whose lhs match any patn.

- add ascii syntax for \mapsto character: x |-> f(x)

? add symbol "Rational" and make rational numbers match ~(~,~)  (items: Rational, numerator, denominator).

!! when and where do we need memory barriers ?
  see:
    * http://www.google.com/codesearch?hl=de&q=show:PBE7MtaLlk0:xpcZYsLsbi4:9oPi5mTcNcs&sa=N&ct=rd&cs_p=http://webauth.stanford.edu/source/libgcc-3.4.4.tar.bz2&cs_f=gcc-3.4.4/libjava/sysdep/powerpc/locks.h
    * http://lxr.linux.no/linux/Documentation/memory-barriers.txt

- optimize pmath_expr_t for (multidimensional) rectangular arrays of intptr_t/double with List as head of all sublists

- add support for file io in richmath (graphical frontend) and write help files for every symbol

- builtin_power: handle approximate complex arguments (real or imaginary part is pmath_float_t)
- builtin_power: handle special complex values (E^(I Pi) = -1, ...). 

- !!! implement FactorInteger() to factorize integers.

? implement named pipes. E.g. as in Mathematica: OpenRead("!exec") opens a pipe or starts an application exec and reads from its stdout.
_____________
might be useful: ilog2:
	* http://www.google.com/codesearch?hl=de&q=ilog2+asm+lang:c+show:CJxDAk0V72g:yNp7vgDS2bo:dSU16tYYx2w&sa=N&cd=1&ct=rc&cs_p=
	* http://gentoo.osuosl.org/distfiles/asterisk-1.2.17.tar.gz&cs_f=asterisk-1.2.17/codecs/log2comp.h