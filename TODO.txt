Row({Button("Math in Text", DocumentApply(SelectedDocument(), "\({\"\[SelectionPlaceholder]\"}\)")),
	Button("italic", DocumentApply(SelectedDocument(), StyleBox("\[SelectionPlaceholder]", FontSlant->Italic))),
	Button("Arg Style", DocumentApply(SelectedDocument(), StyleBox("\[SelectionPlaceholder]", "Arg")))})

- Power: simplify (1/2)/Sqrt(2), ... 
		x Sqrt(E x) --->  Sqrt(E) x^(3/2)
	
- implement QRDecomposition() in C code

- make $MaxExtraPrecision thread-local

- add Developer`ClearCache() or sth like this to clear all caches
    
- pmath: implement Rationalize

- pmath: change pmath_tickcount to use GetTickCount()/clock_gettime() because the current mechanism is not suitable for time measurements.
         add pmath_datetime() to get the old behaviour

- pmath: add ParallelFold() [better name?]

- pmath: implement MapThread, MapAt, MapIndexed, HasValue/IsValue

? pmath: use timsort instead of platforms qsort: http://bugs.python.org/file4451/timsort.txt	
	
- pmath: $CreationDate does not yet work (not updated properly)

- richmath: FractionBox: change distance between fraction rule an numerator (too big)

- pmath: crash with recursive String patterns

- richmath: allow altering MakeExpression with symbols...
    MakeExpression(~s /? StringMatch(s, StartOfString ++ "java`" ++ ~~ ++ EndOfString))::= With({cls:= s.StringDrop(5).StringReplace("`" -> ".")}, HoldComplete(JavaClass(cls)))

!? make <<context` parse as Needs("context`") and do not provide special syntax for Get()	
	
? implement Stack(pattern)   
	this requires us to save a copy of the expression before pattern matching!
	
? pmath: implement Transpose in C code (see transpose.pmath)

- StyleBox: support FontSize values Smaller, Larger, Tiny, Small, Normal, Large, Huge

- SetOptions(f(a->1), a->2)  ==>  f(a->2)

- richmath: implement bidirectional text for MathSequences.

?! change all double-comparisions a==b to almost_equal_machine(a,b)  (as in compare.c)
	A double could actually be held in an 80bit x87 floating point register and thus be != 0, but when converted to double (written to memory), it becomes 0, 
	So "if(x!=0){ some_x_invariant_code_that_prevents_optimizing_the_assert_away; assert(x!=0); }" can actually crash!
	[See "The pitfalls of verifying floating-point computations", Monniaux : http://hal.archives-ouvertes.fr/docs/00/28/14/29/PDF/floating-point-article.pdf]

- add counter for regex cache in debug mode

? GUI: add ALT+Left/Right/Up/Down to move in the expression tree

- eval Complex(0, x)^q with rational q

- add KroneckerProduct(), ArrayFlatten(),
	LinearSolve(), Inverse(), PseudoInverse(), RowReduce(), MatrixRank(), Normalize(), 
	Projection(), Orthogonalize(), ConjugateTranspose(),
	IdentityMatrix(), ChracteristicPolynomial(), Eigenvalues(), Eigenvectors()

- implement Norm(matrix, 2)

- add InterpretTemplate(), see Mathematica's ToBoxes[Superscript[1,2]]

- add option to write a BOM to unicode files. currently, it is added for "UTF-16" and "UTF-32"
  add the BOM automatically for UTF-8 on Windows but not on UNIX

? Test what happens, when a thread-message is send to a parent thread (which waits for its children to finish). 
	The message _should_ be handled by the currently waited-for child thread, but I have never tested it.
	
	TimeContrained() is implemented by letting the timer_thread (= low-prio GC thread) send a `Throw(...)` message in xx seconds.
	That should also abort any child threads.

?? remove Syntax f[[opt]] as a short form for OptionValue(f, opt)

? remove IsHeld() ?

- use General::privv in more situations (e.g. when opening files instead of just General::noopen)
- generate General::optx in pmath_options_extract() for any rules that do not define valid options

- add Parenthesize(expr, prio), same as MakeBoxes(expr), but changes priority to prio
 => Parenthesize(a+b, Range)*c --> "a+b*c" instead of normal "(a+b)*c"
    Parenthesize(a*b, Times)+c --> "(a*b)+c" instead of normal "a*b+c"

- hide/remove pmath_symbol_[get|set]_value(), 
  ? publish _pmath_assign() from "src/pmath-builtins/control-private/assign.c" as pmath_symbol_assign()
  ? publish pmath_symbol_find_value() from <pmath-util/symbol-values-private.h>

- add pmath_atomic_fetch_and_bitand(), pmath_atomic_fetch_and_bitor()
  add pmath_symbol_add_attributes(), pmath_symbol_remove_attributes()

- add Precedence(), PrecedenceForm()

- add Quiet()

- add Insert()

- improve Abs() => complex values
  
- add Outer()

? add IsRule(), IsRuleList(), IsRuleOrRuleList(), IsMatch(p)()

- add FilterRules(rules, {pat1, ...}), picks only those rules, whose lhs match any patn.

- add ascii syntax for \mapsto character: x |-> f(x)

? add symbol "Rational" and make rational numbers match ~(~,~)  (items: Rational, numerator, denominator).

!! when and where do we need memory barriers ?
  see:
    * http://www.google.com/codesearch?hl=de&q=show:PBE7MtaLlk0:xpcZYsLsbi4:9oPi5mTcNcs&sa=N&ct=rd&cs_p=http://webauth.stanford.edu/source/libgcc-3.4.4.tar.bz2&cs_f=gcc-3.4.4/libjava/sysdep/powerpc/locks.h
    * http://lxr.linux.no/linux/Documentation/memory-barriers.txt

- optimize pmath_expr_t for (multidimensional) rectangular arrays of intptr_t/double with List as head of all sublists

- add support for file io in richmath (graphical frontend) and write help files for every symbol

- builtin_power: handle approximate complex arguments (real or imaginary part is pmath_float_t)
- builtin_power: handle special complex values (E^(I Pi) = -1, ...). 

- !!! implement FactorInteger() to factorize integers.

? implement named pipes. E.g. as in Mathematica: OpenRead("!exec") opens a pipe or starts an application exec and reads from its stdout.
_____________
might be useful: ilog2:
	* http://www.google.com/codesearch?hl=de&q=ilog2+asm+lang:c+show:CJxDAk0V72g:yNp7vgDS2bo:dSU16tYYx2w&sa=N&cd=1&ct=rc&cs_p=
	* http://gentoo.osuosl.org/distfiles/asterisk-1.2.17.tar.gz&cs_f=asterisk-1.2.17/codecs/log2comp.h