/* Todo: not enough precision for higher order derivatives: Gamma(WithDiff(WithDiff(2.5,1),1))
*/


BeginPackage("AutoDiff`")

AutoDiff`WithDiff

WithDiff::usage:= "WithDiff(x,dx) represents a dual number, carrying value and first derivate. It can be used with numeric functions for automatic differentiation. E.g. Sin(WithDiff(x,1)) gives WithDiff(Sin(x), Cos(x))."

Begin("AutoDiff`Private`")

Attributes(WithDiff):= {NumericFunction}

WithDiff/: WithDiff(~x, ~dx) + WithDiff(~y, ~dy)::= WithDiff(x + y, dx + dy)
WithDiff/: ~x + WithDiff(~y, ~dy)::= WithDiff(x + y, dy)

WithDiff/: WithDiff(~x, ~dx) * WithDiff(~y, ~dy)::= WithDiff(x y, x dy + y dx)
WithDiff/: ~x * WithDiff(~y, ~dy)::= WithDiff(x y, x dy)

WithDiff/: WithDiff(~x, ~dx) ^ WithDiff(~y, ~dy)::= WithDiff(x^y, y x^(y-1) dx + If((dy != 0) === True, x^y dy Log(x), 0))
WithDiff/: WithDiff(~x, ~dx) ^ ~y::= WithDiff(x^y, y x^(y-1) dx)
WithDiff/: WithDiff(~x, ~dx) ^ ~y::= WithDiff(x^y, y x^(y-1) dx)
WithDiff/: ~x ^ WithDiff(~y, ~dy)::= WithDiff(x^y, dy x^y Log(x))

WithDiff/: Log(WithDiff(~x, ~dx))::= WithDiff(Log(x), If((dy != 0) === True, dx/x, 0))
WithDiff/: Sin(WithDiff(~x, ~dx))::= WithDiff(Sin(x),  dx Cos(x))
WithDiff/: Cos(WithDiff(~x, ~dx))::= WithDiff(Cos(x), -dx Sin(x))
WithDiff/: Tan(WithDiff(~x, ~dx))::= WithDiff(Tan(x),  dx Sec(x)^2)
WithDiff/: Cot(WithDiff(~x, ~dx))::= WithDiff(Cot(x), -dx Csc(x)^2)
WithDiff/: Csc(WithDiff(~x, ~dx))::= WithDiff(Csc(x), -dx Csc(x) Cot(x))
WithDiff/: Sec(WithDiff(~x, ~dx))::= WithDiff(Sec(x),  dx Sec(x) Tan(x))

WithDiff/: Abs(WithDiff(~x, ~dx))::= WithDiff(Abs(x), Sign(x) dx)
WithDiff/: Sign(WithDiff(~x, ~))::= WithDiff(Sign(x), 0)
WithDiff/: Re(WithDiff(~x, ~dx))::= WithDiff(Re(x), Re(dx))
WithDiff/: Im(WithDiff(~x, ~dx))::= WithDiff(Im(x), Im(dx))

WithDiff/: (f: Ceiling|Floor|Round | Less|LessEqual|Greater|GreaterEqual | IsNegetive|IsPositive|IsNonNegative|IsNonPositive|IsExactNumber|IsInexactNumber)(~~~a, WithDiff(~x, ~), ~~~b)::= f(a, x, b)

End()

EndPackage()
