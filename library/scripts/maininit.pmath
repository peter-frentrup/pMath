

Begin("System`")

If(HoldComplete($BaseDirectory) === HoldComplete @@ {$BaseDirectory},
	$BaseDirectory:= DirectoryName($Input)
	)

$Path:= {$BaseDirectory , ToFileName({DirectoryName($BaseDirectory, 3)}, "modules"), "."}

AutoLoad

Protect(Normalize, RotationMatrix, ScalingMatrix, ReflectionMatrix, ShearingMatrix, LinearFractionalTransform, ReflectionTransform, RotationTransform, AffineTransform, TranslationTransform, ScalingTransform, ShearingTransform, TransformationFunction, TransformationMatrix)
Protect(Echo,EchoFunction)
Protect(AbsArg, MinMax, TakeDrop, ReIm)
Protect(UpTo)
Protect(Nothing)

End()


System`Util`latexToBoxes;

Begin("System`Private`")


$NewMessage:= Function({symbol, tag},
	Local({namespace, name, pattern, matches},
		Try(
			namespace:= Namespace(symbol);
			name:= SymbolName(symbol);
			If(namespace =!= "System`", name:= namespace ++ name);
			If(name === "General", 
				pattern:= name ++ "::" ++ tag ++ WordBoundary
				,
				pattern:= {"General", name} ++ "::" ++ tag ++ WordBoundary
				);
			matches:= FindList(ToFileName($BaseDirectory, If(tag === "usage", "usage.pmath", "messages.pmath")), pattern);
			matches.Scan(ToExpression)
			)
		),
	HoldAll)
Protect($NewMessage)


AutoLoad(~heldall:Hold, ~file)::= 
	Local({p},
		(
			p:= Unprotect @@ heldall;
			AutoLoadContinue(heldall, ~heldsymbol)::= 
				Local({success:= False}, 
					(
						AutoLoadContinue(heldall, ~hs):=.; 
						AutoLoadFinish(heldall, heldsymbol, file);
						success:= True;
						Return(ReleaseHold @ heldsymbol)
					).Finally(
						% re-register if loading was aborted
						If(!success, Clear @@ heldall; AutoLoad(heldall, file))
					));
			heldall.Scan(
				Function(s, s ::= AutoLoadStart(Hold(s), heldall); SetAttributes(s, ReadProtected), {HoldAll}));
		).Finally(Protect @@ p))
Attributes(AutoLoad):= {Protected, ReadProtected}

AutoLoadStart(~heldsymbol, heldall: Hold(~~~all))::= Synchronize({all}, AutoLoadContinue(heldall, heldsymbol))
AutoLoadContinue(~heldall, Hold(~sym))::= sym
AutoLoadFinish(heldall: Hold(~~~all), Hold(~sym), ~file)::= 
	Local({protections:= {}},
		(
			protections:= Unprotect(all);
			Clear(all);
			Get(file);
			sym
		).Finally(Protect @@ protections))


Unprotect(System`Utilities`GetSystemSyntaxInformation)
System`Utilities`GetSystemSyntaxInformation(~symbol:Symbol)::= 
	Local(
		{nsdata},
		Try(
			If(HoldComplete(SyntaxInformationData) === HoldComplete @@ {SyntaxInformationData}
			|| SyntaxInformationData === $Failed,
				SyntaxInformationData:= Get(ToFileName($BaseDirectory, "syntaxinformation.pmath"))
				);
			
			nsdata:= SyntaxInformationData.Cases({Namespace(symbol),~});
			If(nsdata.Length() > 0,
				nsdata:= nsdata[All,2].Flatten(1).Cases({SymbolName(symbol),~});
				If(nsdata.Length() > 0,
					Return(nsdata[All,2].Flatten(1))
					)
				)
			)
		)
Protect(System`Utilities`GetSystemSyntaxInformation)

Unprotect(System`Private`PrepareUsageLine, System`Private`PrepareDefinitionLine)
System`Private`PrepareUsageLine(~sym:Symbol)::= With({s:= sym::usage}, If(s.IsString, s, HoldForm(LongForm(sym))))
System`Private`PrepareDefinitionLine(~holdform)::= holdform
Protect(System`Private`PrepareUsageLine, System`Private`PrepareDefinitionLine)

Protect(System`Util`latexToBoxes)


Unprotect(Setting, System`Setting`$Rules);
System`Setting`$Rules:= {}
Setting(~expr, ~level)::= ReplaceRepeated(expr, System`Setting`$Rules, level);
Setting(~expr        )::= ReplaceRepeated(expr, System`Setting`$Rules);
SetAttributes(Setting, {Protected, ReadProtected});
Protect(System`Setting`$Rules);


Unprotect(ControlActive, $ControlActiveSetting);
$ControlActiveSetting:= False
ControlActive()::= $ControlActiveSetting
ControlActive(~t, ~f)::= If($ControlActiveSetting, t, f, f)
SetAttributes({ControlActive, $ControlActiveSetting}, {Protected, ReadProtected});


End()

Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "syntax.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "extended-syntax.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "gui"}, "options.pmath"))

AutoLoad(Hold(System`Private`FindTemplateInterpretationFunction, System`Private`FlattenTemplateSequence),
	ToFileName({$BaseDirectory, "auto", "core", "format"}, "templateboxes.pmath"))
AutoLoad(Hold(CopyDirectory, CopyFile, CreateDirectory, DeleteDirectory, DeleteFile, FileByteCount, FileInformation, FileNameSplit, FileType, RenameDirectory, RenameFile),
	"System`InputOutput`")
AutoLoad(Hold(AiryAi, AiryAiPrime, AiryBi, AiryBiPrime,
		BesselI, BesselJ, BesselK, BesselY, HankelH1, HankelH2,
		ChebyshevT, ChebyshevU, HermiteH,
		Erf, Erfc, Erfi, FresnelC, FresnelS,
		CoshIntegral, CosIntegral, ExpIntegralEi, LogIntegral, SinhIntegral, SinIntegral,
		Hypergeometric0F1, Hypergeometric1F1, Hypergeometric2F1, HypergeometricPFQ, Hypergeometric0F1Regularized, Hypergeometric1F1Regularized, Hypergeometric2F1Regularized, HypergeometricPFQRegularized,
		Zeta,
		System`ArithmeticGeometricMean),
	"System`Numerics`")
AutoLoad(Hold(Clip),
	ToFileName({$BaseDirectory, "auto", "core"}, "clip.pmath"))
AutoLoad(Hold(DynamicLocal, DynamicLocalBox), 
	ToFileName({$BaseDirectory, "auto", "core", "gui"}, "DynamicLocal.pmath"))
AutoLoad(Hold(System`DocumentOpen, System`SelectedDocument, System`SetSelectedDocument),
	ToFileName({$BaseDirectory, "auto", "core", "gui"}, "nofront.pmath"))
AutoLoad(Hold(CubeRoot, Surd),
	ToFileName({$BaseDirectory, "auto", "core"}, "surd.pmath"))
AutoLoad(Hold(ArcCos,ArcCot,ArcCsc,ArcSec,ArcSin,ArcTan, Cos,Cot,Csc,Sec,Sin,Sinc,Tan, ArcCosh,ArcCoth,ArcCsch,ArcSech,ArcSinh,ArcTanh, Cosh,Coth,Csch,Sech,Sinh,Tanh), 
	ToFileName({$BaseDirectory, "auto", "core"}, "trig.pmath"))
AutoLoad(Hold(BernoulliB,Gamma,LogGamma), 
	ToFileName({$BaseDirectory, "auto", "core"}, "gammazeta.pmath"))
AutoLoad(Hold(Cross, Transpose, QRDecomposition), 
	ToFileName({$BaseDirectory, "auto", "core"}, "linalg.pmath"))
AutoLoad(Hold(Interval), 
	ToFileName({$BaseDirectory, "auto", "core"}, "interval.pmath"))
AutoLoad(Hold(Developer`InspectBoxes), 
	ToFileName({$BaseDirectory, "auto", "core", "Developer"}, "InspectBoxes.pmath"))
AutoLoad(Hold(Developer`OpenTextFile, Developer`DebugInfoOpenerFunction),
	ToFileName({$BaseDirectory, "auto", "core", "Developer"}, "OpenTextFile.pmath"))
AutoLoad(Hold(Normalize, RotationMatrix, ScalingMatrix, ReflectionMatrix, ShearingMatrix, LinearFractionalTransform, ReflectionTransform, RotationTransform, AffineTransform, TranslationTransform, ScalingTransform, ShearingTransform, TransformationFunction, TransformationMatrix),
	ToFileName({$BaseDirectory, "auto", "core"}, "geotrans.pmath"))
AutoLoad(Hold(Echo, EchoFunction), 
	ToFileName({$BaseDirectory, "auto", "core"}, "echo.pmath"))
AutoLoad(Hold(AbsArg, TakeDrop, ReIm), 
	ToFileName({$BaseDirectory, "auto", "core"}, "thisthat.pmath"))
AutoLoad(Hold(UpTo), 
	ToFileName({$BaseDirectory, "auto", "core"}, "upto.pmath"))
AutoLoad(Hold(Nothing), 
	ToFileName({$BaseDirectory, "auto", "core"}, "nothing.pmath"))
AutoLoad(Hold(SpanFromAbove, SpanFromLeft, SpanFromBoth), 
	ToFileName({$BaseDirectory, "auto", "core", "format"}, "griditems.pmath"))

AutoLoad(Hold(System`Util`latexToBoxes), 
	ToFileName({$BaseDirectory, "auto", "core", "format"}, "latextoboxes.pmath"))
AutoLoad(Hold(OpenerView),
	ToFileName({$BaseDirectory, "auto", "core", "gui"}, "OpenerView.pmath"))

Get(ToFileName({$BaseDirectory, "auto", "core", "Developer"}, "PrintMessageOverload.pmath"))
Get(ToFileName({$BaseDirectory, "auto", "core"}, "colors.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "rawboxes.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "accents.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "brackets.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "format"}, "sumprod.pmath"));
Get(ToFileName({$BaseDirectory, "auto", "core", "graphics"}, "init.pmath"))

$NamespacePath:= {"System`"}

Off("Packing")
