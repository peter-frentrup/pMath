
BeginPackage("System`")

<<ExperimentalSyntax`

Normalize

RotationMatrix
ScalingMatrix
ReflectionMatrix
ShearingMatrix

LinearFractionalTransform
AffineTransform
ReflectionTransform
RotationTransform
TranslationTransform
ScalingTransform
ShearingTransform

TransformationFunction
TransformationMatrix


Begin("System`GeometricTransformations`Private`")

isScalar(~s)::= !Match(s, ~:List)

Normalize(~v ? IsVector)::= With({n:= Norm(v)}, If((n=0)===True, v, v/n))
Normalize(~s ? isScalar)::= With({n:= Abs(s)},  If((n=0)===True, s, s/n))
Function Normalize(~x, ~f) { 
	With(fx:= f(x))
	If(isScalar(fx)) {
		If(fx = 0) {
			Return(x * fx)
		}
		Return(x/fx)
	}
	Message(Normalize::nonorm, f);
	$Failed /? False
}

Normalize::nonorm:= "The second argument `1` is not a norm function that always returns a \
	non-negative real number for any numeric argument."



Function RotationMatrix(~angle ? isScalar) {
	With(c:= Cos(angle), s:= Sin(angle))
	{{c, -s}, {s, c}}
}

Function RotationMatrix(~angle ? isScalar, ~vector ? IsVector /? Length(vector) = 3) {
	With(c:= Cos(angle), s:= Sin(angle), nvec:= Normalize(vector))
	Return((1-c) Dot(Transpose({nvec}), {nvec}) + 
		+ c IdentityMatrix(3) + 
		+ s * Plus @@ Array(Dot(Transpose({Cross(nvec, UnitVector(3,#))}), {UnitVector(3,#)}) &, 3))
}

RotationMatrix(~~~) /? (Message(RotationMatrix::input); False)::= $Failed

RotationMatrix::input:= "The input is expected to be of one of the forms RotationMatrix(\[Theta]) \
	or RotationMatrix(\[Theta],v), where \[Theta] is an angle and v is a three dimensional vector."




ScalingMatrix(~s ? IsVector)::= DiagonalMatrix(s)

Function ScalingMatrix(~s ? isScalar, ~vector ? IsVector) {
	With(nv:= Normalize(vector))
	Return(s {nv}.Transpose.Dot(Conjugate({nv})) + 
		+ IdentityMatrix(Length(nv)) +
		- {nv}.Transpose.Dot(Conjugate({nv})))
}

ScalingMatrix(~~~) /? (Message(ScalingMatrix::input); False)::= $Failed

ScalingMatrix::input:= "The input is expected to be of one of the forms ScalingMatrix(s,v) or \
	ScalingMatrix({s1,...,sn}) where s and si are scalars and v is a vector."




ReflectionMatrix(~s ? IsVector)::= ScalingMatrix(-1, s)

ReflectionMatrix(~~~) /? (Message(ReflectionMatrix::input); False)::= $Failed

ReflectionMatrix::input:= "The input is expected to be of one of the form ReflectionMatrix(v) \
	where v is a vector."




Function ShearingMatrix(~angle ? isScalar, ~v, ~n) Where(IsMatrix({v,n})) {
	With(nv:= Normalize(v), nn:= Normalize(n))
	With(ne:= Normalize(nv - Dot(Conjugate(nv), nn) nn))
	Return(IdentityMatrix(Length(nn)) + Tan(angle) {ne}.Transpose.Dot(Conjugate({nn})))
}

ShearingMatrix(~~~) /? (Message(ShearingMatrix::input); False)::= $Failed

ShearingMatrix::input:= "The input is expected to be of one of the forms \
	ShearingMatrix(\[Theta],v,n), where \[Theta] is a scalar and v an n are vectors of \
	appropriate dimension."




Function tryLinearFractionalTransform(~A, ~b, ~c, ~d) {
	With(dims:= Dimensions(A))
	If(dims[1] =!= Length(b)) {
		Message(LinearFractionalTransform::rowdim, A, b)
		Return($Failed)
	}
	If(dims[2] =!= Length(c)) {
		Message(LinearFractionalTransform::coldim, A, c);
		Return($Failed)
	}
	Return(TransformationFunction(A.PadRight(dims + {0,1}, b).Append(c.Append(d))))
}

LinearFractionalTransform(~m ? IsMatrix)::= TransformationFunction(m)

Function LinearFractionalTransform({~A ? IsMatrix, ~b ? IsVector, ~c ? IsVector, ~d ? isScalar}) {
	With(result:= tryLinearFractionalTransform(A, b, c, d))
	result /? result =!= $Failed
}

Function LinearFractionalTransform({~A ? IsMatrix, ~b ? IsVector, ~c ? IsVector}) {
	With(result:= tryLinearFractionalTransform(A, b, c, 1))
	result /? result =!= $Failed
}

LinearFractionalTransform(~~~) /? (Message(LinearFractionalTransform::input); False)::= $Failed

LinearFractionalTransform::rowdim:= "The number of rows in `1` is not equal to the length of `2`."
LinearFractionalTransform::coldim:= "The number of columns in `1` is not equal to the length of `2`."
LinearFractionalTransform::input:= "The input is expected to be one of the forms \
	LinearFractionalTransform(M), LinearFractionalTransform({A,b,c,d}) or \
	LinearFractionalTransform({A,b,c}), where M and A are matrices, b and c are vectors of appropriate \
	dimension and d is a scalar."




Function tryAffineTransform(~A, ~b) {
	With(dims:= Dimensions(A))
	If(dims[1] =!= Length(b)) {
		Message(AffineTransform::rowdim, A, b)
		Return($Failed)
	}
	Return(TransformationFunction(
		A.PadRight(dims + {0,1}, b).Append(UnitVector(dims[2] + 1, dims[2] + 1))
		))
}

Function AffineTransform({~A ? IsMatrix, ~b ? IsVector}) {
	With(result:= tryAffineTransform(A, b))
	result /? result =!= $Failed
}

Function AffineTransform({~A ? IsMatrix}) {
	With(dims:= Dimensions(A))
	Return(TransformationFunction(
		A.PadRight(dims + {0,1}).Append(UnitVector(dims[2] + 1, dims[2] + 1))
		))
}

AffineTransform(~~~) /? (Message(AffineTransform::input); False)::= $Failed

AffineTransform::rowdim:= "The number of rows in `1` is not equal to the length of `2`."
AffineTransform::input:= "The input is expected be one of the forms: AffineTransform({A}) or \
	AffineTransform({A,b}), where A is a matrix and b is a vector of appropriate dimension."




ReflectionTransform(~v ? IsVector)::= AffineTransform({ReflectionMatrix(v)})

ReflectionTransform(~~~) /? (Message(ReflectionTransform::input); False)::= $Failed

ReflectionTransform::input:= "The input is expected to be of one of the form \
	ReflectionTransform(v) where v is a vector."



	
RotationTransform(~angle ? isScalar, ~v ? IsVector, ~p ? IsVector) /? Length(v) = Length(p) = 3 ::=
	AffineTransform({RotationMatrix(angle, v), p})
	
RotationTransform(~angle ? isScalar, v:{~,~,~} ? IsVector)::=
	AffineTransform({RotationMatrix(angle, v)})

RotationTransform(~angle ? isScalar, p:{~,~} ? IsVector)::=
	AffineTransform({RotationMatrix(angle), p})

RotationTransform(~angle ? isScalar)::=
	AffineTransform({RotationMatrix(angle)})

RotationTransform(~~~) /? (Message(RotationTransform::input); False)::= $Failed

RotationTransform::input:= "The input is expected to be of one of the forms \
	RotationTransform(\[Theta]), RotationTransform(\[Theta], p), \
	RotationTransform(\[Theta], v) or RotationTransform(\[Theta], w, p), where \[Theta] is an \
	angle and p and v are vectors of appropriate dimension."




TranslationTransform(~v ? IsVector)::= AffineTransform({IdentityMatrix(Length(v)), v})

TranslationTransform(~~~) /? (Message(TranslationTransform::input); False)::= $Failed

TranslationTransform::input:= "The input is expected be one of the forms TranslationTransform(v) \
	where v is a vector."




ScalingTransform(~s ? isScalar, ~v ? IsVector)::= 
	AffineTransform({ScalingMatrix(s, v)})
	
ScalingTransform(~s ? isScalar, ~v, ~p) /? IsMatrix({v,p}) ::= 
	Dot(TranslationTransform(p), AffineTransform({ScalingMatrix(s, v)}), TranslationTransform(-p))
	
ScalingTransform(~s ? IsVector)::= 
	AffineTransform({ScalingMatrix(s)})
	
ScalingTransform(~s, ~p) /? IsMatrix({s,p})::= 
	Dot(TranslationTransform(p), AffineTransform({ScalingMatrix(s)}), TranslationTransform(-p))

ScalingTransform(~~~) /? (Message(ScalingTransform::input); False)::= $Failed

ScalingTransform::input:= "The input is expected to be of one of the forms ScalingTransform(s,v), \
	ScalingTransform(s,v,p), ScalingTransform({s1,s2,\[Ellipsis]}) or \
	ScalingTransform({s1,s2,\[Ellipsis]},p), where s and si are scalars and v and p are vectors of \
	appropriate dimension."




ShearingTransform(~angle ? isScalar, ~v, ~n) /? IsMatrix({v, n})::=
	AffineTransform({ShearingMatrix(angle, v, n)})
	
ShearingTransform(~angle ? isScalar, ~v, ~n, ~p) /? IsMatrix({v, n, p})::=
	Dot(TranslationTransform(p), AffineTransform({ShearingMatrix(angle, v, n)}), TranslationTransform(-p))

ShearingTransform(~~~) /? (Message(ShearingTransform::input); False)::= $Failed

ShearingTransform::input:= "The input is expected be one of the forms \
	ShearingTransform(\[Theta],v,n) or ShearingTransform(\[Theta],v,n,p), where \[Theta] is an \
	angle and v, n and p are vectors of appropriate dimensions."





Function checkTransformationFunctionApply({~rows, ~cols}, ~x ? IsVector) {
	If(IsVector(x)) {
		If(Length(x) = cols - 1) {
			Return(True)
		}
	}
	
	If(IsMatrix(x)) {
		If(Length(x[1]) = cols - 1) {
			Return(True)
		}
	}

	Message(TransformationFunction::fdim, x, cols - 1)
	Return(False)
}
	
TransformationFunction(~m ? IsMatrix)(~x ? IsVector) /? checkTransformationFunctionApply(Dimensions(m), x) ::=
Block {
	With(r:= Dot(m, x.Append(SetPrecision(1, x.Precision))))
	Most(r)/Last(r)
}

TransformationFunction(~m ? IsMatrix)(~xs ? IsMatrix) /? checkTransformationFunctionApply(Dimensions(m), xs) ::=
Block {
	With(r:= Dot(PadRight(xs, Dimensions(xs) + {0,1}, SetPrecision(1, Precision(x))), Conjugate(Transpose(m))))
	r[All,1..-2] / r[All, -1]
}

Function checkTransformComposition(~m1, ~m2) {
	If(Last(Dimensions(m1)) =!= Length(m2)) {
		Message(TransformationFunction::comp, 
			HoldForm @ TransformationFunction(m1), 
			HoldForm @ TransformationFunction(m2))
		Return(False)
	}
	Return(True)
}

TransformationFunction /: Dot(~~~a, TransformationFunction(~m1 ? IsMatrix), TransformationFunction(~m2 ? IsMatrix), ~~~b) /? checkTransformComposition(m1, m2) ::=
	Dot(a, TransformationFunction(Dot(m1, m2)), b)

TransformationFunction /: MakeBoxes(TransformationFunction(~m))::= 
	{MakeBoxes(TransformationFunction),"(", MakeBoxes(MatrixForm(m)),")"}

TransformationFunction::comp:= "`1` and `2` in Composition have incompatible dimensions."
TransformationFunction::fdim:= "`1` is not a vector of length `2` or a list of length `2` vectors."



TransformationMatrix(TransformationFunction(~m ? IsMatrix))::= m

Function TransformationMatrix(~~~s) Where(
	If(Length({s}) === 1) {
		Message(TransformationMatrix::input, s)
	} Else {
		Message(TransformationMatrix::arg1, TransformationMatrix, Length({s}))
	}
	False
) {
	$Failed
}

TransformationMatrix::input:= "`1` is not a TransformationFunction object."


End()


EndPackage()