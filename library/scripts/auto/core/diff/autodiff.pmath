
BeginPackage("AutoDiff`")

AutoDiff`WithDiff

Begin("AutoDiff`Private`")

Attributes(WithDiff):= {NumericFunction}

WithDiff/: WithDiff(~x, ~dx) + WithDiff(~y, ~dy)::= WithDiff(x + y, dx + dy)
WithDiff/: ~x + WithDiff(~y, ~dy)::= WithDiff(x + y, dy)

WithDiff/: WithDiff(~x, ~dx) * WithDiff(~y, ~dy)::= WithDiff(x y, x dy + y dx)
WithDiff/: ~x * WithDiff(~y, ~dy)::= WithDiff(x y, x dy)

WithDiff/: WithDiff(~x, ~dx) ^ WithDiff(~y, ~dy)::= With({z:= x^y}, WithDiff(z, z (y dx / x + If(dy != 0, dy Log(x), 0, 0))))
WithDiff/: ~x:WithDiff ^ ~y::= x ^ WithDiff(y, 0)
WithDiff/: ~x ^ ~y:WithDiff::= WithDiff(x, 0) ^ y

WithDiff/: Log(WithDiff(~x, ~dx))::= WithDiff(Log(x), dx/x)
WithDiff/: Sin(WithDiff(~x, ~dx))::= WithDiff(Sin(x), dx Cos(x))
WithDiff/: Cos(WithDiff(~x, ~dx))::= WithDiff(Cos(x), -dx Sin(x))
WithDiff/: Tan(WithDiff(~x, ~dx))::= WithDiff(Tan(x), dx Sec(x)^2)
WithDiff/: Cot(WithDiff(~x, ~dx))::= WithDiff(Cot(x), -dx Csc(x)^2)
WithDiff/: Csc(WithDiff(~x, ~dx))::= With({y:= Csc(x)}, WithDiff(y, -dx y Cot(x)))
WithDiff/: Sec(WithDiff(~x, ~dx))::= With({y:= Sec(x)}, WithDiff(y, dx y Tan(x)))

WithDiff/: Abs(WithDiff(~x, ~dx))::= WithDiff(Abs(x), Sign(x) dx)
WithDiff/: Sign(WithDiff(~x, ~))::= WithDiff(Sign(x), 0)
WithDiff/: Re(WithDiff(~x, ~dx))::= WithDiff(Re(x), Re(dx))
WithDiff/: Im(WithDiff(~x, ~dx))::= WithDiff(Im(x), Im(dx))

WithDiff/: (cmp: Less|LessEqual|Greater|GreaterEqual)(WithDiff(~x, ~), ~y) ::= cmp(x, y)
WithDiff/: (cmp: Less|LessEqual|Greater|GreaterEqual)(~x, WithDiff(~y, ~)) ::= cmp(x, y)

WithDiff/: (test: IsNegetive|IsPositive|IsNonNegative|IsNonPositive|IsExactNumber|IsInexactNumber)(WithDiff(~x, ~))::= test(x)

End()

EndPackage()
