
BeginPackage("Developer`")

Developer`InspectBoxes

Begin("Developer`Private`")

InspectBoxes(~boxes)::= internalInspectBoxes(boxes)

styleDebugInfoAvailable:= {FontColor -> RGBColor(1, 0.5, 0)}
styleString:= {FontColor -> GrayLevel(0.5)}

toNiceInfo(DebugInfoSource(~file, {~l1, ~c1} .. {~l2, ~c2}))::=
	Row({file, Colon(l1,c1)..Colon(l2,c2)}, ",")
toNiceInfo(DebugInfoSource(~file, ~s .. ~e))::=
	Row({file, s..e}, ",")
toNiceInfo(~x)::= x

isOperatorToken(";"):= True
isOperatorToken(","):= True
isOperatorToken(~s:String)::= Try(StringToBoxes(s)) === $Failed
isOperatorToken(~):= False

internalInspectBoxes(call: {~head:String, "(", ~args, ")"})::=
	With({debugInfo:= Developer`GetDebugInfo(call)},
		With({debugInfoBoxes:= {{head, "(", "\[Ellipsis]", ")"}, "\n", ToBoxes(toNiceInfo(debugInfo))}},
			{TooltipBox(StyleBox(head, styleDebugInfoAvailable), debugInfoBoxes), 
				TooltipBox(StyleBox("(", styleDebugInfoAvailable), debugInfoBoxes), 
				internalInspectBoxes(args), 
				TooltipBox(StyleBox(")", styleDebugInfoAvailable), debugInfoBoxes)}) /? debugInfo =!= /\/
		)

internalInspectBoxes(~span:List)::= 
	With({debugInfo:= Developer`GetDebugInfo(span),
			newSpan:= span.Map(internalInspectBoxes)},
		If(debugInfo =!= /\/,
			With({debugInfoBoxes:= {span.Map(If(isOperatorToken(#), #, "\[Ellipsis]")&), "\n", ToBoxes(toNiceInfo(debugInfo))}},
				Return(
					newSpan.Map(
						If(isOperatorToken(#), 
							TooltipBox(StyleBox(#, styleDebugInfoAvailable), debugInfoBoxes),
							#) &))
				));
		Return(newSpan)
		)
		
internalInspectBoxes(~str:ComplexStringBox)::= 
	StyleBox(str.Map(internalInspectBoxes), styleString)

internalInspectBoxes(";")::= {";", "\n"}
internalInspectBoxes(~other)::= 
	With({debugInfo:= Developer`GetDebugInfo(other)},
		If(debugInfo =!= /\/,
			Return(TooltipBox(other, ToBoxes(toNiceInfo(debugInfo)))));
		Return(other)
		)

internalInspectBoxes(box: (head: ButtonBox|FrameBox|SqrtBox|StyleBox|TagBox|InterpretationBox|RotationBox|SubscriptBox|SuperscriptBox)(~content, ~~~opts))::=
	With({debugInfo:= Developer`GetDebugInfo(box)},
		With({newBox:= head(internalInspectBoxes(content), opts)},
			If(debugInfo =!= /\/,
				Return(TooltipBox(newBox, ToBoxes(toNiceInfo(debugInfo)))));
			Return(newBox);
			)
		)

internalInspectBoxes(box: (head: UnderscriptBox|OverscriptBox|SubsuperscriptBox,RadicalBox)(~content1, ~content2, ~~~opts))::=
	With({debugInfo:= Developer`GetDebugInfo(box)},
		With({newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), opts)},
			If(debugInfo =!= /\/,
				Return(TooltipBox(newBox, ToBoxes(toNiceInfo(debugInfo)))));
			Return(newBox);
			)
		)

internalInspectBoxes(box: (head: UnderoverscriptBox)(~content1, ~content2, ~content3, ~~~opts))::=
	With({debugInfo:= Developer`GetDebugInfo(box)},
		With({newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), internalInspectBoxes(content3), opts)},
			If(debugInfo =!= /\/,
				Return(TooltipBox(newBox, ToBoxes(toNiceInfo(debugInfo)))));
			Return(newBox);
			)
		)

internalInspectBoxes(box: GridBox(~matrix, ~~~opts))::=
	With({debugInfo:= Developer`GetDebugInfo(box)},
		With({newBox:= GridBox(matrix.Map(internalInspectBoxes, 2), opts)},
			If(debugInfo =!= /\/,
				Return(TooltipBox(newBox, ToBoxes(toNiceInfo(debugInfo)))));
			Return(newBox);
			)
		)
		
End()

EndPackage()