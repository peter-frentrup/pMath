%
% Extended syntax simplififcations.
%
% Reading and writing deeply nested expression trees (esp. nested With(...)) is hard. Especially
% imperative definitions are hard to read because one can easily overlook a comma or miscount 
% parenthesis.
% This file enhances the pMath syntax with some syntactic suggar for With, Local, If, Do, While, 
% and related functions.
%
% Note that there must be no space before "(" and no line-break before "{". Also, the braces around
% blocks are mandatory. If ever mixed within (mathematical) expressions, these constructs should
% be placed in parenthesis.
% The reason is that inter-operand whitespace is treated by the internal parser (StringToBoxes) as 
% implicit multiplication.
%
% Note that ToBoxes() of expressions involving unevaluated products of Lists will not be 
% reparsed correctly when used in strange combination with the With/If/... functions.
% Example: Hold(If(a,b,c) * {1,2,3})
% This could be fixed by letting ToBoxes() insert "*" or "\[Times]" or "\[InvisibleTimes]" instead 
% of the implicit " " in front of opening braces, the same way they do it with opening parenthesis.
%
%
% Supported syntax additions are
% Conditional constructs:
%	If(cond1) {
%		block1
%	} Else If(cond2) {
%		block2
%	} Else {
%		block3
%	}
%
%	Switch(expr) {
%		Case(pat1) {
%			block1
%		}
%		Case(pat2) {
%			block2
%		}
%	}
%
% Looping constructs:
%	While(cond) {
%		block
%	}
%
%	Do(i->1..3) {
%		block
%	}
%
% Scoping constructs:
%	With(vars) {
%		block
%	}
%
%	Local(vars) {
%		block
%	}
%
%	Try {
%		block
%	} Finally {
%		endblock
%	}
%
% There is also a form to force parsing in block mode (because `{block}` alone gives a list).
%	Block {
%		block
%	}
%
% Defining functions also has a new syntax. A short-hand for name(~arg)::= Block{body} is:
%	Function name(~arg) {
%		body
%	}
% 
% Conditional functions are supported as well. Instead of name(~arg) /? condition(arg)::= Block{body}
% you may write: 
%	Function name(~arg) Where(condition(arg)) {
%		body
%	}
%
% Moreover, within such a `block`, automatic scope nesting is applied
%	Do(1) {
%		Print(x)
%		With(x:= 5)
%		Print(x, " ", y);
%		Local(y, z:= 7)
%		Print(y, " ", z)
%	}
%
% Note that this makes it impossible to use the function-call syntax for With and Local 
% directly within blocks.
%
BeginPackage("System`", {"Developer`"})

Begin("System`Syntax`Private`")


$HaveExtendedSyntax:= True
%$HaveExtendedSyntax::= $Namespace === "ExperimentalSyntax`" || !$NamespacePath.IsFreeOf("ExperimentalSyntax`")
Protect($HaveExtendedSyntax)

%
% Copied from auto/core/graphics/init.pmath
%
composeHeldExpr(~sym, HoldComplete(~~~a))::= 
	HoldComplete(sym(a))
composeHeldExpr(~sym, HoldComplete(~~~a), HoldComplete(~~~b), ~~~c:HoldComplete)::=
	composeHeldExpr(sym, HoldComplete(a,b), c)
composeHeldExpr(~~~args)::= (
	Message(composeHeldExpr::inv, {args})
	$Failed)


Unprotect(System`Private`MakeJuxtapositionExpression)

STARTBLOCK
BLOCK

%
% parsing statement blocks
%
composeHeldEvaluationSequence(HoldComplete())::= HoldComplete(/\/)
composeHeldEvaluationSequence(h: HoldComplete(~))::= h
composeHeldEvaluationSequence(h: HoldComplete(~~))::= composeHeldExpr(EvaluationSequence, h)

finishBlock(~heldStatements: List)::= heldStatements.Replace(
	BLOCK(~head, ~~~heldargs) :> composeHeldExpr(head, heldargs),
	1).Apply(HoldComplete).Flatten(1)

makeBlockExpression()::= HoldComplete(/\/)
makeBlockExpression({})::= HoldComplete(/\/)
makeBlockExpression(~boxes)::=
	With({debugInfo:= GetDebugInfo(boxes), 
			flatStmts:= Gather(emitMakeStatements(boxes)).Last.Replace(HoldComplete() -> Sequence(), 1)
		},
		With({lastIsNull:= flatStmts.Length > 0 && flatStmts.Last === HoldComplete(/\/),
			nonNullStmts:= flatStmts.Replace(HoldComplete(/\/) -> Sequence(), 1)
			},
			If(Length(nonNullStmts) = 0, Return(HoldComplete(/\/)));
			With({groupedStmts:= nonNullStmts.ReplaceRepeated(
					{Longest(~~~pre), STARTBLOCK(~head, ~~~init), ~~~post} :> 
						{pre, BLOCK(head, init, composeHeldEvaluationSequence({post}.finishBlock))},
					0).finishBlock
				},
				
				If(lastIsNull, 
					Return(composeHeldExpr(EvaluationSequence, groupedStmts, HoldComplete(/\/)).SetDebugInfoAt(debugInfo, 1)));
				If(Length(groupedStmts) = 1, 
					Return(groupedStmts));
				Return(composeHeldExpr(EvaluationSequence, groupedStmts).SetDebugInfoAt(debugInfo, 1));
				)
			)
		)

emitMakeStatements({}):= /\/
emitMakeStatements({~boxes})::= emitMakeStatements(boxes)
emitMakeStatements({"With", "(", ~vars, ")"})::= 
	Emit @ STARTBLOCK(With, MakeExpression({"{", vars, "}"}))
emitMakeStatements({"Local", "(", ~vars, ")"})::= 
	Emit @ STARTBLOCK(Local, MakeExpression({"{", vars, "}"}))
emitMakeStatements(stmts: {~~~, ";" | "\[RawNewline]", ~~~})::= stmts.Map(emitMakeStatements)
emitMakeStatements(";")::= Emit @ HoldComplete(/\/)
emitMakeStatements("\[RawNewline]")::= /\/
emitMakeStatements(~boxes)::= Emit @ MakeExpression(boxes)


%
% TODO: flag an error in `If(a,b) {body}` instead of silently interpreting as `If(a && b) {body}`
%
asHeldCondition(p: HoldComplete(~))::= p
asHeldCondition(p: HoldComplete(~~~))::= 
	composeHeldExpr(And, p)

asHeldSwitchExpression(p: HoldComplete(~))::= p
asHeldSwitchExpression(p: HoldComplete(~~~))::= 
	composeHeldExpr(/\/, p)


System`Private`MakeJuxtapositionExpression(boxes: {~~, {"{", ~~~}, ~~~})::= 
	If($HaveExtendedSyntax, tryMakeBlockExpression(boxes), Default, Default)

tryMakeBlockExpression(~)::= $Failed
tryMakeBlockExpression(boxes: {"Function", ~~~})::= tryMakeFunctionBlock(boxes)
tryMakeBlockExpression(boxes: {{"If", ~~~}, ~~~})::= tryMakeIfBlock(boxes)
tryMakeBlockExpression(boxes: {{"Switch", ~~~}, ~~~})::= tryMakeSwitchBlock(boxes)
tryMakeBlockExpression(boxes: {{"While", ~~~}, ~~~})::= tryMakeWhileBlock(boxes)
tryMakeBlockExpression(boxes: {{"Do", ~~~},~~~})::= tryMakeDoBlock(boxes)
tryMakeBlockExpression(boxes: {"Block", ~~~})::= tryMakeBlockBlock(boxes)
tryMakeBlockExpression(boxes: {"Try", ~~~})::= tryMakeTryBlock(boxes)
tryMakeBlockExpression(boxes: {{"Local", ~~~}, ~~~})::= tryMakeLocalBlock(boxes)
tryMakeBlockExpression(boxes: {{"With", ~~~}, ~~~})::= tryMakeWithBlock(boxes)


tryMakeFunctionBlock(~)::= $Failed
%
% Function name(~arg) { body }
%
% TODO (?): Use `Function name(arg1, arg2) {body}` instead of patterns and check that only plain 
% symbols are used.
% TODO: support type annotations, for example `Function add(x -> Real, y -> Real) -> Real { x+y }`
% Caution, ` ` binds stronger than `->`:       \________________________________/    \__________/
%
tryMakeFunctionBlock({"Function", lhs: {~:String, "(", ~~~}, {"{", ~body, "}"}})::=
	composeHeldExpr(
		AssignDelayed,
		MakeExpression(lhs),
		makeBlockExpression(body))


%
% Function name(~arg) Where(cond) { body }
%
tryMakeFunctionBlock({"Function", lhs: {~:String, "(", ~~~}, {"Where", "(", ~cond, ")"}, {"{", ~body, "}"}})::=
	composeHeldExpr(
		AssignDelayed,
		composeHeldExpr(
			Condition,
			MakeExpression(lhs),
			MakeExpression(cond)
		),
		makeBlockExpression(body))

tryMakeIfBlock(~)::= $Failed
%
% If(cond) {trueBlock}
%
tryMakeIfBlock({{"If", "(", ~cond, ")"}, {"{", ?trueBlock:{}, "}"}})::=
	composeHeldExpr(
		If,
		asHeldCondition @ MakeExpression(cond),
		makeBlockExpression(trueBlock))

%
% If(cond) {trueBlock} Else {falseBlock}
%
tryMakeIfBlock({{"If", "(", ~cond, ")"}, {"{", ?trueBlock:{}, "}"}, "Else", {"{", ?falseBlock:{}, "}"}})::=
	composeHeldExpr(
		If,
		asHeldCondition @ MakeExpression(cond),
		makeBlockExpression(trueBlock),
		makeBlockExpression(falseBlock))

%
% If(cond) {trueBlock} Else If(cond2) ...
%
tryMakeIfBlock({{"If", "(", ~cond, ")"}, {"{", ?trueBlock:{}, "}"}, "Else", rest: PatternSequence({"If", "(", ~, ")"}, ~~)})::=
	composeHeldExpr(
		If,
		asHeldCondition @ MakeExpression(cond),
		makeBlockExpression(trueBlock),
		MakeExpression({rest}))

%
% Switch(expr) {Case(pat1) {block1} \[RawNewline] Case(pat2) {block2}  Case(pat3) {block3}}
%
getSwitchCases("\[RawNewline]")::= HoldComplete()
getSwitchCases({"\[RawNewline]"***})::= HoldComplete()
getSwitchCases({"\[RawNewline]"***, ~inner:List})::= getSwitchCases(inner)
getSwitchCases({{"Case", "(", ~pattern, ")"}, {"{", ~block, "}"}, ~~~more})::=
	Join(
		First @ composeHeldExpr(
			HoldComplete,
			asHeldSwitchExpression @ MakeExpression(pattern),
			makeBlockExpression(block)),
		getSwitchCases({more}))
getSwitchCases({~case, "\[RawNewline]", ~~~more})::= Join(getSwitchCases(case), getSwitchCases({more}))
getSwitchCases(~other)::= (
	Message(Syntax::switchcase, other)
	HoldComplete()
	)
tryMakeSwitchBlock(~)::= $Failed
tryMakeSwitchBlock({{"Switch", "(", ~expr, ")"}, {"{", ?cases:{}, "}"}})::=
	composeHeldExpr(
		Switch,
		asHeldSwitchExpression @ MakeExpression(expr),
		getSwitchCases({cases}))


tryMakeWhileBlock(~)::= $Failed
%
% While(cond) { block } 
%
tryMakeWhileBlock({{"While", "(", ~cond, ")"}, {"{", ?block:{}, "}"}})::=
	composeHeldExpr(
		While,
		asHeldCondition @ MakeExpression(cond),
		makeBlockExpression(block))

tryMakeDoBlock(~)::= $Failed
%
% Do(iter) { block } 
%
tryMakeDoBlock({{"Do", "(", ~iter, ")"}, {"{", ?block:{}, "}"}})::=
	composeHeldExpr(
		Do,
		makeBlockExpression(block),
		MakeExpression(iter))

tryMakeBlockBlock(~)::= $Failed
%
% Block { block } 
%
tryMakeBlockBlock({"Block", {"{", ?block:{}, "}"}})::=
	makeBlockExpression(block)

tryMakeTryBlock(~)::= $Failed
%
% Try { block } Finally { endblock }
%
tryMakeTryBlock({"Try", {"{", ?block:{}, "}"}, "Finally", {"{", ?endblock:{}, "}"}})::=
	composeHeldExpr(
		Finally,
		makeBlockExpression(block),
		makeBlockExpression(endblock))

tryMakeLocalBlock(~)::= $Failed
%
% Local(vars) { block } 
%
tryMakeLocalBlock({{"Local", "(", ~vars, ")"}, {"{", ?block:{}, "}"}})::=
	composeHeldExpr(
		Local,
		MakeExpression({"{", vars, "}"}),
		makeBlockExpression(block))

tryMakeWithBlock(~)::= $Failed
%
% With(vars) { block } 
%
tryMakeWithBlock({{"With", "(", ~vars, ")"}, {"{", ?block:{}, "}"}})::=
	composeHeldExpr(
		With,
		MakeExpression({"{", vars, "}"}),
		makeBlockExpression(block))



Protect(System`Private`MakeJuxtapositionExpression)


End()

EndPackage()
