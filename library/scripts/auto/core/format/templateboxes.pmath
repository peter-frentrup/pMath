BeginPackage("Syntax`")

System`Private`FindTemplateInterpretationFunction
System`Private`FlattenTemplateSequence

Begin("System`Private`")

FlattenTemplateSequence(~func, ~)::= func
FlattenTemplateSequence(Function(~body), ~argnum)::= Function @@ bodyFlattenTemplateSequence(HoldComplete(body), argnum)

Function makeArgumentList(~n, ~m) {
    Local(i)

    Return(Table(PureArgument(i), i->n..m))
}

Function bodyFlattenTemplateSequence(~heldBody, ~argnum) {
    If(heldBody.IsFreeOf(PureArgument(~:Range) | TemplateSlotSequence)) {
        Return(heldBody)
    }

    Local(SEQ, HELD)

    Return(heldBody.Replace({
            f: Function(~) | Function(/\/, ~~) :> f,
            PureArgument(~n:Integer..) :> PureArgument(n..argnum),
            TemplateSlotSequence(~n:Integer, ~~~rest) :> TemplateSlotSequence(n..argnum, rest),
            TemplateSlotSequence(PureArgument(~n:Integer), ~~~rest) :> TemplateSlotSequence(n..n, rest),
            TemplateSlotSequence(PureArgument(~n:Integer..), ~~~rest) :> TemplateSlotSequence(n..argnum, rest),
            TemplateSlotSequence(PureArgument(~n:Integer..~m:Integer), ~~~rest) :> TemplateSlotSequence(n..m, rest)
        }, 0..
    ).Replace({
            f: Function(~) | Function(/\/, ~~) :> f,
            PureArgument(~n:Integer..~m:Integer) :> With({s:= SEQ @@ makeArgumentList(n, m)}, s /? True),
            TemplateSlotSequence(~n:Integer..~m:Integer) :> With({s:= SEQ @@ makeArgumentList(n, m)}, s /? True),
            TemplateSlotSequence(~n:Integer..~m:Integer, ~sep) :> With({s:= SEQ @@ makeArgumentList(n, m).Riffle(HELD(HoldComplete(sep)))}, s /? True),
            TemplateSlotSequence(~n:Integer..~m:Integer, Function(~appl), ~sep) :> With({s:= SEQ @@ makeArgumentList(n, m).Map(Function(HELD(HoldComplete(appl)))).Riffle(HELD(HoldComplete(sep)))}, s /? True)
        }, 0..
    ).Replace(
        HELD(HoldComplete(~h)) :> h
    ).Replace(
        ~f(~~~a,SEQ(~~~b),~~~c) :> f(a,b,c)
    ))
}

Function FindTemplateInterpretationFunction(~t) {
    With(opt:= findTemplateInterpretationFunctionOption(t))
    If(opt =!= $Failed) {
        Return(opt)
    } Else {
        Return(findCoreTemplateInterpretationFunction(t))
    }
}

findTemplateInterpretationFunctionOption(TemplateBox(Repeated(~, 2..), InterpretationFunction -> ~f, ~~~))::= f
findTemplateInterpretationFunctionOption(~)::= $Failed

Function findCoreTemplateInterpretationFunction(TemplateBox(~, ~tag:String, ~~~)) {
    If(Length(DownRules(coreInterpretationFunctionCache)) === 0) {
        loadCoreTemplateInterpretations()
    }
    coreInterpretationFunctionCache(tag)
}

Function loadCoreTemplateInterpretations() {
    Clear(coreInterpretationFunctionCache);
    coreInterpretationFunctionCache(~)::= $Failed
    If(IsString(FE`$StylesheetDirectory)) {
        loadTemplateInterpretations(
            FileNames(
                FE`$StylesheetDirectory,
                "Core.pmathdoc"
            )
        )
    } Else {
        loadTemplateInterpretations(
            $BaseDirectory.DirectoryName(3).FileNames(
                "richmath"
            ).FileNames(
                "scripts"
            ).FileNames(
                "resources"
            ).FileNames(
                "StyleSheets"
            ).FileNames(
                "Core.pmathdoc"
            )
        )
    }
}

Function loadTemplateInterpretations({~filename:String,~~~}) {
    loadTemplateInterpretations(filename)
}

Function loadTemplateInterpretations(~filename:String) {
    With(document:= Get(filename, Head->HoldComplete))
    document.Cases(
        Section(
            StyleData(~s:String), 
            ~~~, 
            TemplateBoxOptions -> {
                ~~~, 
                InterpretationFunction -> ~ifun:Function, 
                ~~~}, 
            ~~~) :> (coreInterpretationFunctionCache(s):= ifun), 
        1..Infinity)
}

End()

EndPackage()
