% Trigonometric, hyperbolic and their inverse functions
%
%      Cos,     Cot,     Csc,     Sec,     Sin,     Tan,
%   ArcCos,  ArcCot,  ArcCsc,  ArcSec,  ArcSin,  ArcTan,
%      Cosh,    Coth,    Csch,    Sech,    Sinh,    Tanh,
%   ArcCosh, ArcCoth, ArcCsch, ArcSech, ArcSinh, ArcTanh
%

BeginPackage("System`")

<<Numerics`

Begin("System`Trigonometry`Private`")

Cos /: Cos(~x)^(~n?IsInteger /? n < 0)::= Sec(x)^-n
Cot /: Cot(~x)^(~n?IsInteger /? n < 0)::= Tan(x)^-n
Csc /: Csc(~x)^(~n?IsInteger /? n < 0)::= Sin(x)^-n
Sec /: Sec(~x)^(~n?IsInteger /? n < 0)::= Cos(x)^-n
Sin /: Sin(~x)^(~n?IsInteger /? n < 0)::= Csc(x)^-n
Tan /: Tan(~x)^(~n?IsInteger /? n < 0)::= Cot(x)^-n

Cosh /: Cosh(~x)^(~n?IsInteger /? n < 0)::= Sech(x)^-n
Coth /: Coth(~x)^(~n?IsInteger /? n < 0)::= Tanh(x)^-n
Csch /: Csch(~x)^(~n?IsInteger /? n < 0)::= Sinh(x)^-n
Sech /: Sech(~x)^(~n?IsInteger /? n < 0)::= Cosh(x)^-n
Sinh /: Sinh(~x)^(~n?IsInteger /? n < 0)::= Csch(x)^-n
Tanh /: Tanh(~x)^(~n?IsInteger /? n < 0)::= Coth(x)^-n

ArcCsc(~x /? x=0):= ComplexInfinity
ArcCsc(~x)::= With({y:= ArcSin(1/x)}, y /? y.IsFreeOf(ArcSin))

ArcSec(~x)::= With({y:= ArcCsc(x)}, Pi/2 - y /? y.IsFreeOf(ArcCsc) && y.IsFreeOf(ArcCsch))

/* Mathematica and MuPAD define ArcCot(x) as ArcTan(1/x), Maple and Derive as Pi/2 - ArcTan(x). These differ for non-positive x! */
ArcCot(~x)::= With({y:= ArcTan(x)}, Pi/2 - y /? y.IsFreeOf(ArcTan) && y.IsFreeOf(ArcTanh))
/* ArcCot(~x /? x=0):= Pi/2
ArcCsc(~x)::= With({y:= ArcTan(1/x)}, y /? y.IsFreeOf(ArcTan))*/

Coth(~x)::= With({y:= Tanh(x)}, If(Sign(y)===0, ComplexInfinity, 1/y) /? y.IsFreeOf(Tanh))
Csch(~x)::= With({y:= Sinh(x)}, If(Sign(y)===0, ComplexInfinity, 1/y) /? y.IsFreeOf(Sinh))
Sech(~x)::= With({y:= Cosh(x)}, If(Sign(y)===0, ComplexInfinity, 1/y) /? y.IsFreeOf(Cosh))

Cosh(Infinity)::= Infinity
Cosh(-Infinity)::= Infinity
Cosh(I Infinity)::= Interval(-1..1)
Cosh(-I Infinity)::= Interval(-1..1)
Cosh(DirectedInfinity(~))::= ComplexInfinity
Cosh(ComplexInfinity)::= Undefined

Sinh(Infinity)::= Infinity
Sinh(-Infinity)::= -Infinity
Sinh(I Infinity)::= Interval(-1..1)
Sinh(-I Infinity)::= Interval(-1..1)
Sinh(DirectedInfinity(~))::= ComplexInfinity
Sinh(ComplexInfinity)::= Undefined

Tanh(I Infinity)::= I Interval(-Infinity..Infinity)
Tanh(-I Infinity)::= I Interval(-Infinity..Infinity)
Tanh(DirectedInfinity(~z))::= Sign(Re(z))
Tanh(ComplexInfinity)::= Undefined

End()


EndPackage()
