
BeginPackage("Developer`")

Developer`InspectBoxes
Hold(Developer`OpenTextFile)

Begin("Developer`Private`")

InspectBoxes(~boxes)::= internalInspectBoxes(boxes)

styleDebugInfoAvailable:= {FontColor -> RGBColor(1, 0.5, 0)}
styleString:= {FontColor -> GrayLevel(0.5)}

toNiceInfo(Language`SourceLocation(~file, {~l1, ~c1} .. {~l2, ~c2}))::=
	Row({file, Colon(l1,c1)..Colon(l2,c2)}, ",")
toNiceInfo(Language`SourceLocation(~file, ~s .. ~e))::=
	Row({file, s..e}, ",")
toNiceInfo(~x)::= x

Function wrapHyperlinkBox(~content, ~source) {
	With(func := DebugInfoOpenerFunction(source))
	If(func === None) {
		Return( content )
	}
	Return( ButtonBox(content, ButtonFunction -> func, ButtonFrame -> "Frameless") )
}

isOperatorToken(";"):= True
isOperatorToken(","):= True
isOperatorToken(~):= False
Function isOperatorToken(~s:String) {
	With(boxes:= Try(StringToBoxes(s)))
	If(boxes === $Failed) {
		Return(True)
	}
	If(!IsString(boxes)) {
		Return(False)
	}
	With(expr:= Try(MakeExpression(boxes, ParseSymbols->False)))
	Return(expr === $Failed)
}

internalInspectBoxes(call: {~head:String, "(", ~args, ")"})::=
	With({debugInfo:= Developer`GetDebugInfo(call)},
		With({debugInfoBoxes:= {{head, "(", "\[Ellipsis]", ")"}, "\n", ToBoxes(toNiceInfo(debugInfo))}},
			{TooltipBox(head.StyleBox(styleDebugInfoAvailable).wrapHyperlinkBox(debugInfo), debugInfoBoxes), 
				TooltipBox(StyleBox("(", styleDebugInfoAvailable).wrapHyperlinkBox(debugInfo), debugInfoBoxes), 
				internalInspectBoxes(args), 
				TooltipBox(StyleBox(")", styleDebugInfoAvailable).wrapHyperlinkBox(debugInfo), debugInfoBoxes)}
		) /? debugInfo =!= /\/
	)

Function internalInspectBoxes(~span:List) {
	With(debugInfo:= Developer`GetDebugInfo(span), newSpan:= span.Map(internalInspectBoxes))
	If(debugInfo =!= /\/) {
		With(debugInfoBoxes:= {span.Map(If(isOperatorToken(#), #, "\[Ellipsis]")&), "\n", ToBoxes(toNiceInfo(debugInfo))})
		Return(
			newSpan.Map(
				Function(Block {
					If(isOperatorToken(#)) {
						TooltipBox(
							StyleBox(#, styleDebugInfoAvailable).wrapHyperlinkBox(debugInfo), 
							debugInfoBoxes)
					} Else {
						#
					}
				})))
	}
	Return(newSpan)
}
		
internalInspectBoxes(~str:ComplexStringBox)::= 
	StyleBox(str.Map(internalInspectBoxes), styleString)

internalInspectBoxes(";")::= {";", "\n"}
Function internalInspectBoxes(~other) {
	With(debugInfo:= Developer`GetDebugInfo(other))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(other.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(other)
}

Function internalInspectBoxes(box: (head: ButtonBox|FrameBox|SqrtBox|StyleBox|TagBox|TemplateBox|InterpretationBox|PanelBox|RotationBox|SubscriptBox|SuperscriptBox)(~content, ~~~opts)) {
	With(debugInfo:= Developer`GetDebugInfo(box))
	With(newBox:= head(internalInspectBoxes(content), opts))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(newBox.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: (head: UnderscriptBox|OverscriptBox|SubsuperscriptBox|RadicalBox|FractionBox)(~content1, ~content2, ~~~opts)) {
	With(debugInfo:= Developer`GetDebugInfo(box))
	With(newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), opts))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(newBox.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: (head: UnderoverscriptBox)(~content1, ~content2, ~content3, ~~~opts)) {
	With(debugInfo:= Developer`GetDebugInfo(box))
	With(newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), internalInspectBoxes(content3), opts))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(newBox.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: GridBox(~matrix, ~~~opts)) {
	With(debugInfo:= Developer`GetDebugInfo(box))
	With(newBox:= GridBox(matrix.Map(internalInspectBoxes, 2), opts))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(newBox.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: TemplateBox(~args, ~~~opts)) {
	With(debugInfo:= Developer`GetDebugInfo(box))
	With(newBox:= TemplateBox(args.Map(internalInspectBoxes), opts))
	If(debugInfo =!= /\/) {
		Return(TooltipBox(newBox.wrapHyperlinkBox(debugInfo), ToBoxes(toNiceInfo(debugInfo))))
	}
	Return(newBox)
}

End()

EndPackage()