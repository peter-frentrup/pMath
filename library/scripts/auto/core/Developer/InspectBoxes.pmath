
BeginPackage("Developer`")

Developer`InspectBoxes
Hold(Developer`SourceLocationOpenerFunction)

Begin("Developer`Private`")

InspectBoxes(~boxes)::= internalInspectBoxes(boxes)

styleDebugMetadataAvailable:= {FontColor -> RGBColor(1, 0.5, 0)}
styleString:= {FontColor -> GrayLevel(0.5)}

toNiceInfo(Language`SourceLocation(~file, {~l1, ~c1} .. {~l2, ~c2}))::=
	Row({file, ColonForm(l1,c1) .. ColonForm(l2,c2)}, ",")
toNiceInfo(Language`SourceLocation(~file, ~s .. ~e))::=
	Row({file, s .. e}, ",")
toNiceInfo(~x)::= x

Function wrapHyperlinkBox(~content, ~source) {
	With(func := SourceLocationOpenerFunction(source))
	If(func === None) {
		Return( content )
	}
	Return( ButtonBox(content, ButtonFunction -> func, ButtonFrame -> "Frameless") )
}

isOperatorToken(";"):= True
isOperatorToken(","):= True
isOperatorToken(~):= False
Function isOperatorToken(~s:String) {
	With(boxes:= Try(StringToBoxes(s)))
	If(boxes === $Failed) {
		Return(True)
	}
	If(!IsString(boxes)) {
		Return(False)
	}
	With(expr:= Try(MakeExpression(boxes, ParseSymbols->False)))
	Return(expr === $Failed)
}

internalInspectBoxes(call: {~head:String, "(", ~args, ")"})::=
	With({debugMetadata:= Developer`GetDebugMetadata(call)},
		With({debugMetadataBoxes:= {{head, "(", "\[Ellipsis]", ")"}, "\n", ToBoxes(toNiceInfo(debugMetadata))}},
			{head |> StyleBox(styleDebugMetadataAvailable) |>
					wrapHyperlinkBox(debugMetadata) |>
					TooltipBox(debugMetadataBoxes), 
				"(" |> StyleBox("(", styleDebugMetadataAvailable) |>
					wrapHyperlinkBox(debugMetadata) |>
					TooltipBox(debugMetadataBoxes), 
				internalInspectBoxes(args), 
				")" |> StyleBox("(", styleDebugMetadataAvailable) |>
					wrapHyperlinkBox(debugMetadata) |>
					TooltipBox(debugMetadataBoxes)
			}
		) /? debugMetadata =!= /\/
	)

Function internalInspectBoxes(~span:List) {
	With(debugMetadata:= Developer`GetDebugMetadata(span), newSpan:= span.Map(internalInspectBoxes))
	If(debugMetadata =!= /\/) {
		With(debugMetadataBoxes:= {span.Map(If(isOperatorToken(#), #, "\[Ellipsis]")&), "\n", ToBoxes(toNiceInfo(debugMetadata))})
		Return(
			newSpan.Map(
				Function {
					If(isOperatorToken(#)) {
						# |> StyleBox(styleDebugMetadataAvailable) |>
							wrapHyperlinkBox(debugMetadata) |>
							TooltipBox(debugMetadataBoxes)
					} Else {
						#
					}
				}))
	}
	Return(newSpan)
}

internalInspectBoxes(~str:StringBox)::= 
	StyleBox(str.Map(internalInspectBoxes), styleString)

internalInspectBoxes(";")::= {";", "\n"}
Function internalInspectBoxes(~other) {
	With(debugMetadata:= Developer`GetDebugMetadata(other))
	If(debugMetadata =!= /\/) {
		Return(other |>
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(other)
}

Function internalInspectBoxes(box: (head: ButtonBox|FrameBox|SqrtBox|StyleBox|TagBox|TemplateBox|InterpretationBox|PanelBox|RotationBox|SubscriptBox|SuperscriptBox)(~content, ~~~opts)) {
	With(debugMetadata:= Developer`GetDebugMetadata(box))
	With(newBox:= head(internalInspectBoxes(content), opts))
	If(debugMetadata =!= /\/) {
		Return(newBox |>
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: (head: UnderscriptBox|OverscriptBox|SubsuperscriptBox|RadicalBox|FractionBox)(~content1, ~content2, ~~~opts)) {
	With(debugMetadata:= Developer`GetDebugMetadata(box))
	With(newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), opts))
	If(debugMetadata =!= /\/) {
		Return(newBox |> 
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: (head: UnderoverscriptBox)(~content1, ~content2, ~content3, ~~~opts)) {
	With(debugMetadata:= Developer`GetDebugMetadata(box))
	With(newBox:= head(internalInspectBoxes(content1), internalInspectBoxes(content2), internalInspectBoxes(content3), opts))
	If(debugMetadata =!= /\/) {
		Return(newBox |> 
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: GridBox(~matrix, ~~~opts)) {
	With(debugMetadata:= Developer`GetDebugMetadata(box))
	With(newBox:= GridBox(matrix.Map(internalInspectBoxes, 2), opts))
	If(debugMetadata =!= /\/) {
		Return(newBox |> 
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(newBox)
}

Function internalInspectBoxes(box: TemplateBox(~args, ~~~opts)) {
	With(debugMetadata:= Developer`GetDebugMetadata(box))
	With(newBox:= TemplateBox(args.Map(internalInspectBoxes), opts))
	If(debugMetadata =!= /\/) {
		Return(newBox |> 
			wrapHyperlinkBox(debugMetadata) |>
			TooltipBox(debugMetadata |> toNiceInfo |> ToBoxes))
	}
	Return(newBox)
}

End()

EndPackage()