
BeginPackage("Developer`")

Developer`PrintMessageOverload
Developer`DescribeLocation
Developer`PrintErrorDetails

Begin("Developer`Private`")

$errorId:= 0
Function nextErrorId() {
	Synchronize({$errorId}, $errorId+= 1; $errorId)
}

$overloadMessagePrint:= False
SetAttributes($overloadMessagePrint, ThreadLocal)

Unprotect(SectionPrint)
SectionPrint("Message", ~expr) /? $overloadMessagePrint ::= 
	Block({$overloadMessagePrint:= False},
		PrintMessageOverload(expr)
	)
Protect(SectionPrint)


Function PrintMessageOverload(~expr) {
	% stack ends with {..., Block, With} where With comes from here and Block comes from
	% the overloading/implementation of SectionPrint("Message", ~). So the stack outside 
	% SectionPrint("Message", ~) is stack[..-3]
	With(stack:= Stack())
	With(eid:= nextErrorId())
	PrintErrorDetails(eid)::=
		Block({$overloadMessagePrint:= False},
			SectionPrint("Message", Row @ {errorButton(eid), "\n", expr, "\n at ", stack[..-3].Reverse.Map(stackEntryForm).Row("\n at ")})
		)
	SectionPrint("Message", Row @ {expr, " ", errorButton(eid)})
}

Protect(PrintMessageOverload)

$overloadMessagePrint:= True

errorButton(~eid)::= Row @ {"[",eid,"]"}

Options(stackEntryForm)::= {"Head" -> "?", "Location" -> None}
Function stackEntryForm(OptionsPattern()) {
	With(head:= OptionValue("Head"))
	With(location:= OptionValue("Location"))
	
	If(location === None) {
		Return @ head
	} Else {
		Return @ Row @ {head, " in ", location}
	}
}

Unprotect(Language`SourceLocation)
Format(~di:Language`SourceLocation)::= With({fmt:= DescribeLocation(di)}, fmt /? fmt =!= $Failed )
Protect(Language`SourceLocation)


DescribeLocation(~expr)::= $Failed
Function DescribeLocation(
	Language`SourceLocation(
		~filename:String, 
		{~fromLine:Integer, ~fromColumn: Integer} .. {~toLine:Integer, ~toColumn: Integer})
) {
	If(fromLine === toLine) {
		If(fromColumn === toColumn) {
			Return( Row @ {"line ", fromLine, ":", fromColumn, " of ", filename} )
		}
		Return( Row @ {"line ", fromLine, ": ", fromColumn, "..", toColumn, " of ", filename} )
	}
	Return( Row @ {"lines ", fromLine, ":", fromColumn, " .. ", toLine, ":", toColumn, " of ", filename} )
}


End()

EndPackage()
