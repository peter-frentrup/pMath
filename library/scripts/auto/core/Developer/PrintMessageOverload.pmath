
BeginPackage("Developer`")

Developer`ConsoleMessageFormatter
Developer`DescribeLocation
Developer`PrintErrorDetails
Developer`StackEntryForm

Begin("Developer`Private`")

$errorID:= 0
Function nextErrorID() {
	Synchronize({$errorID}, $errorID+= 1; $errorID)
}

Internal`$MessageFormatter := ConsoleMessageFormatter
$MessagePrePrint:= SourceHyperlinkMessageArgumentFormatter

Function ConsoleMessageFormatter(~heldname, ~msg) {
 	% stack ends with {..., With} where With comes from here
	With(stack:= Stack())
	With(eid:= nextErrorID())
	PrintErrorDetails(eid)::=
		SectionPrint("Message", Row @ {
			errorButton(eid), "\n", 
			ColonForm(heldname, msg), "\n at ", 
			stack[..-2].Reverse.Map(StackEntryForm).Row("\n at ")})
	
	ColonForm(heldname, Row({msg, errorButton(eid)}, " "))
}

Function SourceHyperlinkMessageArgumentFormatter(~arg) {
	If(Not($HyperlinksSupported)) {
		Return(arg)
	}
	
	With(src:= Developer`GetDebugMetadata(arg))
	With(makeButton:=  sourceLocationButtonBuilder(src))

	Return(makeButton @ arg)
}

Function errorButton(~eid) {
	With(label:= Row @ {"[",eid,"]"})

	If($HyperlinksSupported) {
		Button(label, Developer`PrintErrorDetails(eid), BaseStyle -> "Hyperlink")
	} Else {
		label
	}
}

Options(StackEntryForm)::= {"Head" -> "?", "Location" -> None}
Function StackEntryForm(OptionsPattern()) {
	With(head:= OptionValue("Head"))
	With(location:= OptionValue("Location"))
	
	If(location === None) {
		Return( head )
	}
	Return( Row @ {head, " in ", location} )
}

Unprotect(Language`SourceLocation)
Format(~src:Language`SourceLocation)::= With({fmt:= DescribeLocation(src)}, fmt /? fmt =!= $Failed )
Protect(Language`SourceLocation)


DescribeLocation(~expr)::= $Failed
Function DescribeLocation(
	src: Language`SourceLocation(
		~filename:String, 
		{~fromLine:Integer, ~fromColumn: Integer} .. {~toLine:Integer, ~toColumn: Integer})
) {
	With(makeButton:= sourceLocationButtonBuilder(src))
	
	With(pathElements:= FileNameSplit(filename))
	With(shortname:= If(Length(pathElements) >= 2, pathElements[-1], filename))
	With(makeTooltip:= If($HyperlinksSupported, Function(Tooltip(#1, #2)), Function(StringForm("`1` (`2`)", #1, #2))))
	With(makeLongDesc:= If(Length(pathElements) >= 2, Function(makeTooltip(#, ToFileName(pathElements[..-2]))), Identity))
	
	If(fromLine === toLine) {
		If(fromColumn === toColumn) {
			Return( makeLongDesc @ makeButton @ StringForm("line `1`:`2` of `3`", fromLine, fromColumn, shortname) )
		}
		Return( makeLongDesc @ makeButton @ StringForm("line `1`: `2`..`3` of `4`", fromLine, fromColumn, toColumn, shortname) )
	}
	Return( makeLongDesc @ makeButton @ StringForm("lines `1`:`2` .. `3`:`4` of `5`", fromLine, fromColumn, toLine, toColumn, shortname) )
}

Function DescribeLocation(
	src: Language`SourceLocation(
		feo: FrontEndObject(~sess, ~id:Integer),
		~from:Integer .. ~to:Integer)
) {
	With(makeButton:= sourceLocationButtonBuilder(src))
	
	With(makeTooltip:= Function(Tooltip(#, Dynamic(CurrentValue(feo, WindowTitle)))))

	Return(makeTooltip @ makeButton @ ColonForm(HoldForm(FrontEndObject)(Skeleton(id)), from .. to))
}

Function sourceLocationButtonBuilder(~src) {
	If(Not($HyperlinksSupported)) {
		Return(Identity)
	}

	With(func:=  Developer`SourceLocationOpenerFunction(src))
	If(func === None) {
		Return(Identity)
	}

	Function(
		Button(#, func(), BaseStyle->"Hyperlink")
	).Replace(HoldPattern(Function(~body)()) :> body)
}

End()

EndPackage()
