
BeginPackage("Developer`")

Developer`ConsoleMessageFormatter
Developer`DescribeLocation
Developer`PrintErrorDetails

Begin("Developer`Private`")

$errorID:= 0
Function nextErrorID() {
	Synchronize({$errorID}, $errorID+= 1; $errorID)
}

Internal`$MessageFormatter := ConsoleMessageFormatter

Function ConsoleMessageFormatter(~heldname, ~msg) {
 	% stack ends with {..., With} where With comes from here
	With(stack:= Stack())
	With(eid:= nextErrorID())
	PrintErrorDetails(eid)::=
		SectionPrint("Message", Row @ {errorButton(eid), "\n", ColonForm(heldname, msg), "\n at ", stack[..-2].Reverse.Map(stackEntryForm).Row("\n at ")})
	
	ColonForm(heldname, Row({msg, errorButton(eid)}, " "))
}

errorButton(~eid)::= Row @ {"[",eid,"]"}

Options(stackEntryForm)::= {"Head" -> "?", "Location" -> None}
Function stackEntryForm(OptionsPattern()) {
	With(head:= OptionValue("Head"))
	With(location:= OptionValue("Location"))
	
	If(location === None) {
		Return @ head
	} Else {
		Return @ Row @ {head, " in ", location}
	}
}

Unprotect(Language`SourceLocation)
Format(~src:Language`SourceLocation)::= With({fmt:= DescribeLocation(src)}, fmt /? fmt =!= $Failed )
Protect(Language`SourceLocation)


DescribeLocation(~expr)::= $Failed
Function DescribeLocation(
	Language`SourceLocation(
		~filename:String, 
		{~fromLine:Integer, ~fromColumn: Integer} .. {~toLine:Integer, ~toColumn: Integer})
) {
	With(pathElements:= FileNameSplit(filename))
	With(fileDesc:= If(Length(pathElements) >= 2, StringForm("`1` (`2`)", pathElements[-1], ToFileName(pathElements[..-2])), filename))
	If(fromLine === toLine) {
		If(fromColumn === toColumn) {
			Return( StringForm("line `1`:`2` of `3`", fromLine, fromColumn, fileDesc) )
		}
		Return( StringForm("line `1`: `2`..`3` of `4`", fromLine, fromColumn, toColumn, fileDesc) )
	}
	Return( StringForm("lines `1`:`2` .. `3`:`4` of `5`", fromLine, fromColumn, toLine, toColumn, fileDesc) )
}


End()

EndPackage()
