
BeginPackage("System`Graphics`")

<<ExperimentalSyntax`

MakeGraphicsBoxes
MakeGraphicsBoxesOptions

Begin("System`Graphics`Private`")


MakeGraphicsBoxes(~x)            ::= HoldComplete(x);

MakeGraphicsBoxes(~multi: List)  ::= HoldComplete @@ List @ HoldComplete(multi).Map(MakeGraphicsBoxes, 2).ReleaseHold.Replace(HoldComplete(~~~x) :> x, 1)
MakeGraphicsBoxes(Line(~~~args)) ::= HoldComplete(LineBox(args))
MakeGraphicsBoxes(Point(~~~args))::= HoldComplete(PointBox(args))
MakeGraphicsBoxes(~c: RGBColor)  ::= HoldComplete(c);
MakeGraphicsBoxes(~c: Hue)       ::= HoldComplete(c);
MakeGraphicsBoxes(~c: GrayLevel) ::= HoldComplete(c);


Attributes(isNumericCachableOption):= {HoldAllComplete}
isNumericCachableOption(~):= False
isNumericCachableOption(AspectRatio):= True
isNumericCachableOption(ImageSize):= True
isNumericCachableOption(PlotRange):= True
isNumericCachableOption(AxesOrigin):= True


Attributes(isHeldNumericList):= {HoldAllComplete}
isHeldNumericList(Automatic):= True
isHeldNumericList(All):= True
isHeldNumericList(None):= True
isHeldNumericList(True):= True
isHeldNumericList(False):= True
isHeldNumericList(/\/):= True
isHeldNumericList(~val)::= IsNumeric @ Unevaluated(val)
isHeldNumericList(~val:List) ::= And @@ val.Unevaluated.Map(isHeldNumericList)
isHeldNumericList(~val:Range)::= And @@ val.Unevaluated.Map(isHeldNumericList)

Attributes(isHeldNumeric):= {HoldAllComplete}
isHeldNumeric(~val)::= IsNumeric @ Unevaluated(val)

Function cache(~t) {
	With(nt:= N(t))
	If(nt === t) {
		t
	} Else {
		NCache(t, nt)
	}
}

Attributes(heldTickToBoxes):= {HoldAllComplete}
tickToBoxes(~t)::= {0.0, MakeBoxes(t), {0.0, 0.02}} /* error */
tickToBoxes(~t ? isHeldNumeric)::= {cache(t), MakeBoxes(t), {0.0, 0.02}}
tickToBoxes({~t, ~lbl}) ::= {cache(t), MakeBoxes(t), {0.0, 0.02}}
tickToBoxes({~t ? isHeldNumeric, ~lbl, len: (~ | {~,~}) ? isHeldNumericList})::= {cache(t), MakeBoxes(lbl), cache(len)}

Attributes(tickListsToBoxes):= {HoldAllComplete}
tickListsToBoxes(0, {~~~ticks})::= List @@ HoldComplete(ticks).Map(tickToBoxes)
Function tickListsToBoxes(~depth, {~~~lists}) {
	With(depth:= depth - 1)
	Return(List @@ HoldComplete(lists).Map(Function(l, tickListsToBoxes(depth, l),{HoldAllComplete})))
}

tickListsToBoxes(~, other: (True | All | None | Automatic))::= other
tickListsToBoxes(~, RawBoxes(~other))::= other
tickListsToBoxes(~, ~other)::= HoldComplete(other) /* error */

Attributes(makeHeldGraphicsBoxOption):= {HoldAllComplete}
makeHeldGraphicsBoxOption(~r)::= HoldComplete(r)
Function makeHeldGraphicsBoxOption((h: Rule|RuleDelayed)(~lhs ? isNumericCachableOption, ~rhs ? isHeldNumericList)) {
	With(num:= N(rhs))
	If(HoldComplete(num) === HoldComplete(rhs)) {
		Return @ HoldComplete(h(lhs, rhs))
	}
	Return @ HoldComplete(h(lhs, NCache(rhs, num)))
}
makeHeldGraphicsBoxOption((h: Rule|RuleDelayed)(Ticks, ~rhs))::=      HoldComplete @@ {h(Ticks,      tickListsToBoxes(1, rhs))}
makeHeldGraphicsBoxOption((h: Rule|RuleDelayed)(FrameTicks, ~rhs))::= HoldComplete @@ {h(FrameTicks, tickListsToBoxes(2, rhs))}


MakeGraphicsBoxesOptions({~~~opts})::= ComposeHeldExpr(List, MakeGraphicsBoxesOptions(opts))
MakeGraphicsBoxesOptions(~~~opts)::= Join @@ HoldComplete(opts).Map(makeHeldGraphicsBoxOption)
MakeGraphicsBoxesOptions({})::= HoldComplete({})
MakeGraphicsBoxesOptions()::= HoldComplete()


End()

EndPackage()

