
BeginPackage("System`Graphics`Plot`", {"Developer`"})

System`Plot


Begin("System`Graphics`Plot`Private`")


$PlotFailed	

Attributes(Plot):= {HoldAll}
p: Plot(~~~args)::= With({g:= Catch(tryPlot(p, args), $PlotFailed)}, g /? Head(g) === Graphics)

Plot::plld:= "Endpoints for `1` in `2` must have distinct machine-precision numerical values."
Plot::plld1:= "Endpoints in `1` must have distinct machine-precision numerical values."
Plot::pllim:= "Range specification `1` is not of the form x -> xmin..xmax  or  xmin..xmax."

Protect(Plot)

Attributes(isNotHeldOption):= {HoldAll}
isNotHeldOption(~x)::= !IsOption(Unevaluated(x))

Function getPlotRange(~xys, ~xmin .. ~xmax) {
	Local(ymin, ymax, ndxs, ndys, tans, is, mi, ma)
	With(xs:= xys[All, 1], ys:= xys[All, 2], maxTan:= Tan(80.0 Degree))
	
	{ymin, ymax}:= getRangeList(ys);
	ndxs:= xs.ListConvolve({1, -1}) / (xmax - xmin); /* Differences */
	ndys:= ys.ListConvolve({1, -1}) / (ymax - ymin); /* Differences */
	tans:= ndys / ndxs;
	
	is:= Flatten @ Position(tans, ~t /? Abs(t) < maxTan, 1..1);
	is:= Union(is, is + 1);
	{mi, ma}:= ({Min(#), Max(#)} &)(ys[is]);
	/*{mi, ma}:= (mi + ma)/2 + (ma - mi)/2 * {-1.02, 1.02};*/
	
	If(mi - (ma - mi)/5 < 0 < mi) {
		Return(0 .. ma)
	} Else If(ma < 0 < ma + (ma - mi)/5) {
		Return(mi .. 0)
	} Else If(mi < ma) {
		Return(mi .. ma)
	} Else If(IsNumber(mi) && IsReal(mi)) {
		Return(mi - 1 .. mi + 1)
	}
	Return(-1 .. 1)
}

Function getRangeList(~ys) {
	With(nys:= ys.Cases(Except(Undefined)))
	
	If(nys === {}) {
		Return({-1, 1})
	} Else If(Length(nys) = 1) {
		Return(First(nys) + {-1, 1})
	}
	
	% linear interpolation
	With(mima:= Quantile(nys, {0.05, 0.95}, {{0,0},{0,1}}))

	If(First(mima) = Last(mima)) {
			Return(First(mima) + {-1, 1})
	}
	Return(mima)
}

Function initData(~f, ~xmin .. ~xmax, ~numPoints, ~prec) {
	With(xs:= Array(Numericalize(SetPrecision(xmin .. xmax .. (xmax - xmin)/(numPoints - 1), prec), prec)))
	% TODO: improve Map so that it does not unpack below:
	Return(xs.Map({#, f(#)} &).Developer`ToPackedArray)
	%Return(xs.Map({#, f(#)} &))
}

Function calcCosines(~xys, ~xmin .. ~xmax) {
	Local(ymin, ymax, cos2s)
	With(xs:= xys[All, 1], ys:= xys[All, 2])
	{ymin, ymax}:= getRangeList(ys);
	With(ndxs:= xs.ListConvolve({1, -1}) / (xmax - xmin))  % Differences
	With(ndys:= ys.ListConvolve({1, -1}) / (ymax - ymin))  % Differences
	With(tans:= ndys / ndxs)
	With(tas:= Most(tans), tbs:= Rest(tans))
	cos2s:= (1 + tas tbs) / Sqrt((1 + tas^2)*(1 + tbs^2))
	cos2s:= cos2s.Replace(Undefined -> 0, 1..1)
	Return(cos2s)
}

Function cosMinFunction(~stepNumber, ~numPoints) {
	Max(
		With({n:= numPoints}, Cos(180.0 Degree * Piecewise({{1, n < 2000}, {1 - ((n - 2000) / (4000 - 2000))^3, n < 4000}}, 0))),
		With({n:= stepNumber}, Cos(180.0 Degree * Piecewise({{1, n < 10}, {1 - ((n - 10) / (20 - 10))^2, n < 20}}, 0))))
}

Function refineData(~f, ~xrange, ~xys, ~prec, ~stepNumber) {
	With(cosines:= calcCosines(xys, xrange))
	With(cosMax:= Cos(5.0 Degree))
	With(cosMin:= cosMinFunction(stepNumber, Length(xys)))
	
	Local(is, newxs)
	is:= Flatten @ Position(cosines, ~ ? (cosMin <= # <= cosMax &), 1..1, Heads -> False);
	
	If(Length(is) = 0) {
		Return({})
	}
	
	% Print(StringForm("step `1`: cos: `2`..`3`, actual: `4`..`5`, marks: `6` of `7` (`8`%)", 
	% 	stepNumber, 
	% 	cosMin, 
	% 	cosMax, 
	% 	Min(cosines),
	% 	Max(cosines),
	% 	Length(is), 
	% 	Length(cosines), 
	% 	100.0 Length(is) / Length(cosines)));
	is:= Union(is, is + 1);
	
	% TODO: avoid unpacking xys in Part below:
	newxs:= Numericalize(SetPrecision(xys[is, 1] / 2 + xys[is + 1, 1] / 2, prec), prec)%.Developer`ToPackedArray;
	
	% TODO: improve Map so that it does not unpack below:
	%Return(newxs.Map({#, f(#)} &).Developer`ToPackedArray)
	Return(newxs.Map({#, f(#)} &))
}

Function generateData(~f, ~xrange, ~numPoints, ~prec, ~maxrecurs) {
	Local(xys, newxys, step)
	xys:= initData(f, xrange, numPoints, prec)
	step:= 0
	While(step < maxrecurs) {
		step+= 1;
		newxys:= refineData(f, xrange, xys, prec, step);
		If(newxys === {}) {
			Break()
		}

		% TODO: improve SortBy so that it does not unpack below:
		%xys:= SortBy(Join(xys, newxys), First).Developer`ToPackedArray;

		% TODO: improve SortBy so that it does not unpack below:
		xys:= Sort(Join(xys, newxys))%.Developer`ToPackedArray;
	}
	Return(Developer`ToPackedArray(xys))
}

joinLists():= {}
joinLists(~~~args)::= Join(args)

automaticPlotRangePadding(Automatic)::= {None, Scaled(0.04)}
automaticPlotRangePadding({~xr, Automatic})::= {None, Scaled(0.04)}
%automaticPlotRangePadding(~pr: Range)::= None
automaticPlotRangePadding(~)::= None

normalizePlotRange(~xyDatas, ~xrange, ~r: Range)::= {xrange, r}
normalizePlotRange(~xyDatas, ~xrange, Automatic)::= {xrange, getPlotRange(joinLists @@ xyDatas, xrange)}
normalizePlotRange(~xyDatas, ~xrange, {~xr, Automatic})::= {xr, getPlotRange(joinLists @@ xyDatas, xrange)}
normalizePlotRange(~xyDatas, ~xrange, ~r)::= r /* TODO: handle errors */

Function tryPlotFunction(~fs, ~xrange, opts: OptionsPattern(Plot)) {
	Local(allRules, plotPoints, workingPrecision, maxRecursion, plotRange, xyDatas, gRules)
	
	allRules:= Flatten({opts})
	allRules:= allRules |> Join(Options(Plot) |> FilterRules(Except(allRules)))
	
	plotPoints:= PlotPoints.Replace(allRules)
	If(plotPoints === Automatic) {
		plotPoints:= 15
	} Else If(!IsInteger(plotPoints) || plotPoints < 2) {
		% error message ...
		plotPoints:= 15
	}
	
	maxRecursion:= MaxRecursion.Replace(allRules)
	If(maxRecursion === Automatic) {
		maxRecursion:= Infinity
	}
	
	workingPrecision:= WorkingPrecision.Replace(allRules)
	If(Try(SetPrecision(1, workingPrecision), $Failed, SetPrecision::invprec) === $Failed) {
		Message(Plot::invprec, workingPrecision)
		Return($PlotFailed)
	}
	
	xyDatas:= fs.Map(Function(generateData(#, xrange, plotPoints, workingPrecision, maxRecursion)))
	
	plotRange:= Lookup(allRules, PlotRange)
	If(Lookup(allRules, PlotRangePadding) === Automatic) {
		allRules:= allRules |> 
			FilterRules(Except(PlotRangePadding)) |> 
			Join({PlotRangePadding -> automaticPlotRangePadding(plotRange)})
	}
	plotRange:= normalizePlotRange(xyDatas, xrange, plotRange)
	allRules:= allRules |> FilterRules(Except(PlotRange)) |> Join({PlotRange -> plotRange})
	gRules:= allRules |> FilterRules(Options(ListLinePlot)) |> Complement(Options(ListLinePlot))
	
	Return(ListLinePlot(xyDatas, gRules))
}


Attributes(makeHoldForm):= {HoldAll}
makeHoldForm(~x)::= 
	With({debugMetadata:= GetDebugMetadata(x)},
		HoldForm(x).SetDebugMetadataAt(debugMetadata))

Attributes(checkRange):= {HoldAll}
checkRange(spec: (~x:Symbol -> ~range))::= checkRangeRest(makeHoldForm(x), range, makeHoldForm(spec))
checkRange(~range)::= checkRangeRest(None, range, makeHoldForm(range))
Function checkRangeRest(~holdformx, ~xmin..~xmax, ~) {
	With(evalxmin:= xmin, evalxmax:= xmax)
	If((evalxmin < evalxmax) =!= True) {
		If(holdformx === None) {
			Message(Plot::plld1, HoldForm(spec));
		} Else {
			Message(Plot::plld, holdformx, HoldForm(spec));
		}
		Throw($PlotFailed);
	}
	Return(evalxmin .. evalxmax);
}
checkRangeRest(~, ~, ~heldspec)::= (Message(Plot::pllim, heldspec); Throw($PlotFailed))


/* Attributes(makeFunction):= {HoldAll}
makeFunction(~fx, ~x:Symbol -> ~)::= With({x:= x}, Function(x, fx))
makeFunction(~, ~)::= (Undefined &) */

makeReal(~y) ::= If(IsNumber(y) && IsReal(y), y, Undefined, Undefined)

Attributes(makeFunctionList):= {HoldAll}
makeFunctionList(~fx, ~xspec)::= makeFunctionList({fx}, xspec)
makeFunctionList({~~~fxs}, ~xspec)::= List @@ Hold(fxs).Map(
	Function(f, With({f:= f}, Function(makeReal(f(#)) ))))
makeFunctionList({~~~fxs}, ~x:Symbol -> ~)::= 
	List @@ Hold(fxs).Map(
		Function(, 
			With({x::= x}, Function(x, makeReal(#))), 
			{HoldAllComplete}))


Attributes(tryPlot):= {HoldAll}
tryPlot(~orig, ~fx, ~xspec, opts: OptionsPattern(Plot))::= 
	tryPlotFunction(
		makeFunctionList(fx, xspec), 
		checkRange(xspec), 
		opts)
	
tryPlot(~)::=  (IsValidArgumentCount(Plot, 0, 2, 2); $Failed)
tryPlot(~, ~)::= (IsValidArgumentCount(Plot, 1, 2, 2); $Failed)
tryPlot(~orig, PatternSequence(~, ~, ~~~, ~err ? isNotHeldOption, ~~~))::=
	(Message(Plot::nonopt, makeHoldForm(err), 2, makeHoldForm(orig)); $Failed)
	
End()

EndPackage()
