
BeginPackage("System`Con`", {"ExperimentalSyntax`"})

$HaveHyperlinks:= True

PrintWelcomeMessage

Begin("System`Con`Private`")

Unprotect(ShowDefinition)
Function ShowDefinition(~s:String) {
	With(n:= Names(s))
	SectionPrint("PrintUsage", n.Sort.Map(Button(#, ShowDefinition(#)) &).Row("\n")) /? Length(n) > 1
}
Protect(ShowDefinition)


Attributes($DescribeLocationOverload):= {ThreadLocal}
$DescribeLocationOverload:= True

Function Developer`DescribeLocation(
	src: Developer`DebugInfoSource(
		~filename:String, 
		{~fromLine:Integer, ~fromColumn: Integer} .. {~toLine:Integer, ~toColumn: Integer})
) Where($DescribeLocationOverload) {
	Block({$DescribeLocationOverload:= False}, 
	Block {
		With(label:= Developer`DescribeLocation(src))
		
		If(Developer`FileInformation(filename) =!= {}) {
			Return(Button(label, OpenTextFile(filename, Line->fromLine, Column->fromColumn)))
		}
		Return(label)
	})
}


Options(OpenTextFile):= {Line->Automatic, Column->Automatic}
Function OpenTextFile(~filename:String, opts:OptionsPattern()) {
	If($SystemId === "Windows") {
		With(path:= $NamespacePath)
		Block({$NamespacePath:= path}, Get("Windows`"))
		Return(Windows`Editors`OpenTextFile(filename, opts))
	}
	$Failed
}

Function PrintWelcomeMessage() {
    Print("Welcome to pMath.");

	With(names:= Names("System`*"))
	With(i:= RandomInteger(1..Length(names)))
	With(randomName:= names[i])

	Print(
		"Type `",  
		Button("??symbol", ShowDefinition(randomName)),
		"` to get help about a symbol. Exit with `",  
		Button("Quit()", Quit()),
		"`.")
}

End()

EndPackage()
