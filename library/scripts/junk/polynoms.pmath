/* Package for polynom arithmetic
   Peter Frentrup, 2011-04-05
 */

BeginPackage("Polynoms`")

<<ExperimentalSyntax`

Monom
Polynom
PolyCoefficient
PolyDegree
PolyExtendedGCD
PolyEval
PolyGCD
PolyLeadingCoefficient
PolyIsMonom
PolyQuotientRemainder
ToPolynom


Begin("Polynoms`Private`")


Polynom({~z /? z=0, ~~~x})::= Polynom({x})

Monom(0, ~)::= Polynom({})
Monom(~c, ~n:Integer ? IsNonNegative)::= Polynom(PadRight({c}, n+1))

ToPolynom(~term, ~x:Symbol)::= Replace(term, x -> Monom(1,1))

PolyDegree(Polynom({})):= 0
PolyDegree(Polynom(~xs))::= Length(xs)-1

PolyLeadingCoefficient(Polynom({})):= 0
PolyLeadingCoefficient(Polynom(~xs))::= First(xs)

PolyCoefficient(Polynom(~xs), ~i)::= If(0 <= i < Length(xs), xs[i], 0)

PolyIsMonom(Polynom({})):= True
PolyIsMonom(Polynom(~xs))::= True === (Rest(xs) = ConstantArray(0, Length(xs)-1))

PolyEval(Polynom(~xs), ~x)::= Plus @@ (xs * Append(x^Array(Length(xs)-1 .. 1 .. -1), 1))

Polynom/: ~c + Polynom(~xs)::= Polynom({c}) + Polynom(xs)
Polynom/: (c:Except(~:Polynom)) * Polynom(~xs)::= Polynom(c xs);

Polynom/: Polynom(~xs) + Polynom(~ys)::= With({n:= Max(Length(xs), Length(ys))}, Polynom(PadLeft(xs, n) + PadLeft(ys, n)))

/* Polynom/: Polynom(~xs) * Polynom(~ys)::= Polynom(Table(Sum(xs[i] ys[k-i+2], i -> k), k -> Length(xs) + Length(ys) - 1)) */
polyMul(Polynom({}), ~)::= Polynom({})
Function polyMul(Polynom(~xs), Polynom(~ys)) {
	If(PolyIsMonom(Polynom(xs))) {
		Return(Polynom(Join(First(xs) ys, Rest(xs))))
	}
	If(PolyIsMonom(Polynom(ys))) {
		Return(Polynom(Join(First(ys) xs, Rest(ys))))
	}
	With(as:= PadLeft(         xs,  Length(xs) + Length(ys) - 1))
	With(bs:= PadRight(Reverse(ys), Length(xs) + Length(ys) - 1))
	Return(Polynom(
		Table(
			Plus @@ (Take(as, -k) * Take(bs, k)), 
			k -> Length(xs)+Length(ys)-1 .. 1 .. -1)))
}

Polynom/: ~a:Polynom * ~b:Polynom::= polyMul(a, b)

Polynom/: ~p:Polynom^(~n:Integer ? IsPositive)::= Block {
	If(PolyIsMonom(p)) {
		Monom(PolyLeadingCoefficient(p), n * PolyDegree(p))
	} Else {
		polyMul(p, p^(n-1))
	}
}

Function PolyQuotientRemainder(~u:Polynom, ~v:Polynom) {
	Local(q,r,s)
	q:= Monom(0,0) 
	r:= u
	While(PolyDegree(r) >= PolyDegree(v)) {
		s:= Monom(PolyLeadingCoefficient(r)/PolyLeadingCoefficient(v), PolyDegree(r) - PolyDegree(v))
		q:= q + s
		r:= r - s*v
	}
	Return({q, r})
}

Function PolyGCD(~a:Polynom, ~b:Polynom) {
	If(PolyLeadingCoefficient(a) = 0) {
		Return(b)
	}
	Local(aa:= a, bb:= b, q, r)
	While(PolyLeadingCoefficient(bb) != 0) {
		{q, r}:= PolyQuotientRemainder(aa, bb)
		aa:= bb
		bb:= r
	}
	Return(aa / PolyLeadingCoefficient(aa))
}

Function PolyExtendedGCD(~a:Polynom, ~b:Polynom) {
	If(PolyLeadingCoefficient(a) = 0) {
		Return({b, {Monom(0, 0), Monom(1, 0)}})
	}
	If(PolyLeadingCoefficient(b) = 0) {
		Return({a, {Monom(1, 0), Monom(0, 0)}})
	}
	Local(aa, bb, q, r, x, lastx, y, lasy)
	x:= lasty:= Monom(0, 0)
	y:= lastx:= Monom(1, 0)
	aa:= a
	bb:= b
	While(PolyLeadingCoefficient(bb) != 0) {
		{q, r}:= PolyQuotientRemainder(aa, bb)
		{aa, bb}:= {bb, r}
		{x, lastx}:= {lastx - q * x, x}
		{y, lasty}:= {lasty - q * y, y}
	}
	Return({aa / PolyLeadingCoefficient(aa), PolyLeadingCoefficient(aa) {lastx, lasty}})
}


End()


EndPackage()
