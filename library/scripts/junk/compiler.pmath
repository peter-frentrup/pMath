
BeginPackage("Compiler`")


TestCompiler


Begin("Compiler`Private`")


Print("Hello, this is the Compiler Package")
Print("For Testing, call e.g. ", HoldForm @ TestCompiler({x}, {Real, {Real}}, 3x+Pi))


Attributes(TestCompiler):= {HoldAll}
TestCompiler({~~~vars}, {~tr, ~types:List}, ~body)::= Local({v, code, i},
	If(Length(HoldComplete(vars)) =!= Length((types)),
		Message("typs"))
	
	resetCompiler();
	
	{List @@ HoldComplete(vars).Map(HoldComplete), types}.MapThread(newNamedVar);
	v:= compile(body);
	v:= compileCast(tr, v);
	
	Do(propagateConstants(i), i->v);
	
	resetVisited();
	code:= Gather(emitCodeId(v))[2];
	code.Scan(registerSideEffects);
	
	resetVisited();
	code:= Gather(emitCodeId(v))[2];
	code.Reverse.Scan(inferTypes);
	
	resetVisited();
	code:= Gather(emitCodeId(v))[2];
	
	Print(Column({"Code:", Grid(code.Map(asNiceCode))}));
	v
	)


$AllOpCodes:= {
	OpLoadConst,
	OpTrap,
	OpCast,
	OpTryCast,
	OpLoadVar,
	OpSequence,
	OpCallSimple,
	OpCallUnknown,
	};

$AllTypes:= {
	$Aborted
	None,
	Integer,
	Real,
	Number,
	Any
	}


Attributes($varId):=        {ThreadLocal}
Attributes($namedVars):=    {ThreadLocal}
Attributes(opCodeOf):=      {ThreadLocal}
Attributes(typeOf):=        {ThreadLocal}
Attributes(varArgsOf):=     {ThreadLocal}
Attributes(extraArgsOf):=   {ThreadLocal}
Attributes(constValueOf):=  {ThreadLocal}

Attributes(sideEffects):=   {ThreadLocal}
Attributes(visited):=       {ThreadLocal}


resetCompiler()::= (
	Clear($varId, $namedVars, opCodeOf, typeOf, varArgsOf, extraArgsOf, constValueOf);
	$namedVars:= {};
	$varId:= 0;
	resetSideEffects();
	resetVisited();
	)
	
resetSideEffects()::= (
	Clear(sideEffects);
	sideEffects(~)::= {};
	)


resetVisited()::= (
	Clear(visited);
	visited(~):= False;
	)

emitCodeId(~i:Integer)::= If(!visited(i),
	visited(i):= True;
	varArgsOf(i).Scan(emitCodeId);
	Emit(i)
	)

asNiceCode(~i:Integer)::= {i, typeOf(i), SymbolName(Evaluate(opCodeOf(i))), varArgsOf(i), extraArgsOf(i)}


contains(~list, ~elem)::=          !IsFreeOf(list, elem)
containsAny(~list, ~elems:List)::= !IsFreeOf(list, Alternatives @@ elems)


Attributes(isConstExpr):= {HoldAllComplete}
isConstExpr(~e)::= IsFreeOf(HoldComplete, Alternatives @@ $namedVars.Map(#.Apply(HoldPattern) &))


newCode(~type, ~opcode, ~args:List, ~extra:List)::= With({id:= ++$varId},
	typeOf(id):=      type;
	opCodeOf(id):=    opcode;
	varArgsOf(id):=   args;
	extraArgsOf(id):= extra;
	id
	)


Attributes(newNamedVar):= {HoldFirst}
newNamedVar(HoldComplete(~name), ~type)::= newNamedVar(name, type)
newNamedVar(~name:Symbol, ~type)::= (
	$namedVars:= $namedVars.Append(HoldComplete(name));
	typeOf(HoldComplete(name))::= type)


Attributes(canCompileFunction):= {HoldAllComplete}
canCompileFunction(~f:Symbol)::= Attributes(f).IsFreeOf(HoldAll | HoldFirst | HoldRest | HeldAllComplete)
canCompileFunction(~):= False


Attributes(functionAttributes):= {HoldAllComplete}
functionAttributes(~f:Symbol)::= Attributes(f)
functionAttributes(Function(~,~,~att:List))::= att
functionAttributes(~):= {}


Attributes(compile):= {HoldAllComplete}
compile(~f(~~~args))::= If(canCompileFunction(f), compileFunction(f, compileArgs(args)), compileSpecial(f(args)))

compile(b: True|False)::= compileConst(Boole, b)

compile(~i: Integer)::= compileConst(Integer, i)

compile(~r: Real)::= compileConst(Real, r)

compile(~s: Symbol)::= (
	If($namedVars.contains(HoldComplete(s)),
		Return(newCode(typeOf(HoldComplete(s)), OpLoadVar, {}, {Hold(s)})));
	
	If(IsNumeric(Unevaluated(s)),
		Return(compileConst(Number, s)));
	
	newCode(All, OpCallUnknown, {}, {s &})
	)

compile(~x)::= compileConst(If(IsNumeric(x), Number, Any, Any), x)


compileConst(~type, ~value)::= newCode(type, OpLoadConst, {}, {value})


Attributes(compileArgs):= {HoldAllComplete}
compileArgs(~~~args)::= List @@ HoldComplete(args).Map(compile)


Attributes(integerResult):= {HoldAllComplete}
integerResult(~)::= Number
integerResult(Plus)::= Integer
integerResult(Times)::= Integer


compileFunction(~f, ~args)::= compileTrap("unknown function `1` of `2`", HoldForm(f), args)

compileFunction(~f, ~args:List)::= With({fa:= functionAttributes(f)},
	(
		If(fa.contains(Associative) && Length(args) > 2,
			Return(compileFunction(f, {First(args), compileFunction(f, Rest(args))})));
		
		With({t:= combineTypes @@ args.Map(typeOf)},
			With({tt:= If(t === Integer, combineTypes(t, integerResult(f)), t)},
				With({targs:= args.Map(compileCast(tt, #) &)},
					Return(newCode(tt, OpCallSimple, targs, {f}))
					)));
		
		) /? fa.contains(NumericFunction) && !fa.containsAny({NHoldFirst, NHoldRest, NHoldHall})
	)

compileFunction(~f, ~args)::= newCode(All, OpCallUnknown, args, {f})

compileFunction(N, {~x})::= (
	If(typeOf(x) === Integer,
		Return(newCode(Real, OpCast, {x}, {})));
	
	If({Real, Number, Complex}.contains(typeOf(x)),
		Return(x));
		
	compileTrap("invalid type `1` for Times", t)
	)


Attributes(compileSpecial):= {HoldAllComplete}
compileSpecial(~x)::= compileTrap("cannot compile `1`", HoldForm(x))

compileSpecial(EvaluationSequence(~x))::= compile(x)
compileSpecial(EvaluationSequence(~~x, ~y))::= With({cx:= List @@ HoldComplete(x).Map(compile), cy:= compile(y)},
	newCode(typeOf(cy), OpSequence, cx.Append(cy), {})
	)


compileTrap(~msg, ~~~args)::= newCode($Aborted, OpTrap, {}, {StringForm(msg, args)})


Attributes(combineTypes):= {Symmetric, Associative, OneIdentity}
combineTypes(~t)::= t
combineTypes(~t, ~t)::= t
combineTypes(~, ~)::= All
combineTypes($Aborted, ~)::= $Aborted
/* combineTypes(None, $Aborted | All)::= None */
combineTypes(Number, Integer | All):= Number
combineTypes(Real, Integer | Number | All):= Real


compileCast(~t, ~x)::= compileCast(t, typeOf(x), x)
compileCast(~t, ~t, ~x)::= x
compileCast(~t, All, ~x)::= newCode(t, OpTryCast, {x}, {})
compileCast(~tr, ~tx, ~x)::= (
	If(combineTypes(tr, tx) === tr && tr =!= $Aborted, 
		Return(newCode(tr, OpCast, {x}, {})));
		
	compileTrap("invalid cast `1`", tx -> tr)
	)


isConst(~i)::= HoldComplete @@ {constValueOf(i)} =!= HoldComplete(constValueOf(i))

makeConst(~i, ~v)::= (
	constValueOf(i):= If(typeOf(i) === Real, N(v), v);
	opCodeOf(i):= OpLoadConst;
	extraArgsOf(i):= {constValueOf(i)};
	checkSideEffectConst(i);
	)

makeTrap(~i, ~msg, ~~~args)::= (
	typeOf(i):= $Aborted;
	opCodeOf(i):= OpTrap;
	varArgsOf(i):= {};
	extraArgsOf(i):= {StringForm(msg, args)};
	)


propagateConstants(~i)::= If(!isConst(i), 
		propagateConstants(typeOf(i), opCodeOf(i), varArgsOf(i), extraArgsOf(i), i))

propagateConstants(~t, OpLoadConst, {}, {~v}, ~i)::= makeConst(i, v)

propagateConstants(~t, OpCast, {~c ? isConst}, {}, ~i)::= makeConst(i, constValueOf(c))

propagateConstants(Integer, OpTryCast, {~c ? isConst}, {}, ~i)::= (
	If(constValueOf(c).IsInteger,
		Return(makeConst(i, constValueOf(c)))
		);
	
	makeTrap(i, "cast `1` to Integer failed", constValueOf(c))
	)

propagateConstants(~t, OpSequence, {~~~xs, ~y}, ~, ~i)::= (
	{xs,y}.Map(propagateConstants);
	If(y.isConst,
		extraArgsOf(i):= {constValueOf(y)};
		constValueOf(i):= constValueOf(y))
	)

propagateConstants(~t, OpCallSimple, ~args, {~f}, ~i)::= (
	If(And @@ args.Map(isConst),
		makeConst(i, f @@ args.Map(constValueOf))
		)
	)


inferTypes(~i)::= (
	/* Print("infer ", Row({i, opCodeOf(i), typeOf(i), varArgsOf(i), extraArgsOf(i)}, "  "));*/
	inferTypes(opCodeOf(i), typeOf(i), varArgsOf(i), extraArgsOf(i), i)
	)

inferTypes(OpLoadConst, Number | All -> t: Integer, ~eff, ~, ~i)::= (
	typeOf(i):= t;
	varArgsOf(i):= eff.Map(typeOf(#):= typeOf(#) -> None)
	)

inferTypes(OpLoadConst, ~ -> Real, ~eff, {~c}, ~i)::= (
	typeOf(i):= Real;
	extraArgsOf(i):= {N(c)};
	varArgsOf(i):= eff.Map(typeOf(#):= typeOf(#) -> None)
	)

inferTypes(OpLoadConst, (Number | All) -> Integer, ~eff, {~c}, ~i)::= (
	typeOf(i):= Integer;
	varArgsOf(i):= eff.Map(typeOf(#):= typeOf(#) -> None)
	)

inferTypes(OpCast, t: Integer | Real, {~c}, {}, ~i)::= (
	If({Number, All}.contains(typeOf(c)),
		opCodeOf(i):= OpSequence;
		typeOf(c):= typeOf(c) -> t)
	)

inferTypes(OpCast, Number -> (t: Integer | Real), {~c}, {}, ~i)::= (
	If({Number, All, Integer}.contains(typeOf(c)),
		opCodeOf(i):= OpSequence;
		typeOf(c):= typeOf(c) -> t;
		);
	typeOf(i):= t;
	)

inferTypes(OpCallSimple, Number -> t: Real | Integer | Boole, ~args, ~, ~i)::= (
	typeOf(i):= t;
	args.Scan((typeOf(#):= typeOf(#) -> t) &);
	)

inferTypes(OpCallSimple, Integer -> Real, ~args, ~, ~i)::= (
	typeOf(i):= Real;
	args.Scan((typeOf(#):= typeOf(#) -> Real) &);
	)

inferTypes(OpCallUnknown, ~ -> None, ~args, ~, ~i)::= (
	typeOf(i):= None;
	)

inferTypes(OpSequence, ~ -> ~t, {~~~eff, ~y}, ~, ~i)::= (
	typeOf(i):= t;
	typeOf(y):= (typeOf(y) -> t);
	{eff}.Scan((typeOf(#):= typeOf(#) -> None) &);
	)

inferTypes(OpSequence, Except(~ -> ~), {~~~eff, ~}, ~, ~i)::= (
	{eff}.Scan((typeOf(#):= typeOf(#) -> None) &);
	)

inferTypes(OpLoadVar, ~t1 -> (t2: Integer|Real), {}, {~v}, ~i)::= (
	typeOf(i):= t2;
	If(t1 =!= t2,
		varArgsOf(i):= {newCode(t1, OpLoadVar, {}, {v})};
		extraArgsOf(i):= {};
		opCodeOf(i):= OpCast;
		)
	)

inferTypes(~, (t: Except($Aborted)) -> None, ~, ~, ~i)::= (
	typeOf(i):= t;
	)

inferTypes(~, $Aborted -> ~, ~, ~, ~i)::= typeOf(i):= $Aborted
inferTypes(~op, t: (~ -> ~), ~, ~, ~i)::= typeOf(i):= makeTrap(i, "infer type `1` in `2`", t, SymbolName(op))


registerSideEffects(~i)::= registerSideEffects(opCodeOf(i), typeOf(i), varArgsOf(i), i)

registerSideEffects(OpSequence, Except(None), ~args, ~i)::= (
	sideEffects(i):= Flatten(args.Most.Map(sideEffects));
	varArgsOf(i):= sideEffects(i).Append(args.Last);
	)

registerSideEffects(OpLoadConst, ~, ~args, ~i)::= (
	varArgsOf(i):= sideEffects(i):= Flatten(args.Map(sideEffects))
	)

registerSideEffects(OpCallUnknown, ~, ~, ~i)::= sideEffects(i):= {i}

registerSideEffects(~, ~, ~args, ~i)::= sideEffects(i):= Flatten(args.Map(sideEffects))


End()


EndPackage()
