%
% Load Mathematica 10 *.mx files. Tested with Windows 7 x64
%
% Like in previous versions of the file format, an *.mx file contains a header wich ends with 
% "ENTCONT", followed by four stages. Each of which start with "Stage 1", "Stage 2", ...
% Unlike previous versions, the new format seems to be more cross-platform and more compact.
%
% Strings are NUL-terminated ASCII strings, now without length prefix.
%
% The header contains version and system information.
%
% Stage 1 is the constant pool. Each constant starts with a type tag byte
%
% Stage 2 is the symbol pool. Symbols have namespace, name and attribute information.
%
% Stage 3 is the expression pool. Each expression is an array with items being references to 
% previous expressions, to symbols, or to conmstants.
%
% Stage 4 is the main expression pool. It contains a reference (possibly several references?) to the
% main expression which is to be (executed and) returned by Get["file.mx"].
%
BeginPackage("Developer`LoadMx10`", "ExperimentalSyntax`")

Developer`LoadMx10`readInteger
Developer`LoadMx10`readString
Developer`LoadMx10`readMagicString
Developer`LoadMx10`doHeader32
Developer`LoadMx10`doHeader64
Developer`LoadMx10`doStage1
Developer`LoadMx10`newConstLookup
Developer`LoadMx10`newSimpleConstLookup
Developer`LoadMx10`readConstant
Developer`LoadMx10`doStage2
Developer`LoadMx10`newSymbolLookup
Developer`LoadMx10`doStage3
Developer`LoadMx10`doStage4

Developer`LoadMx10`MxComplex
Developer`LoadMx10`MxComplexRef
Developer`LoadMx10`MxExpr
Developer`LoadMx10`MxInteger
Developer`LoadMx10`MxLargeInteger
Developer`LoadMx10`MxLargeReal
Developer`LoadMx10`MxPackedArray
Developer`LoadMx10`MxRational
Developer`LoadMx10`MxRationalRef
Developer`LoadMx10`MxReal
Developer`LoadMx10`MxString
Developer`LoadMx10`MxSymbol

Begin("Developer`LoadMx10`Private`")

readMagicString::magic:= "(at `1`) expected string `2` but found `3`"
doHeaderHelper::magic:= doStage1::magic:= doStage2::magic:= readMagicString::magic
newSimpleConstLookup::notyp:= "No constant of type `1` at index `2`"

doStage1::tag:= doStage2::tag:= doStage3::tag:= doStage4::tag:= "(at `1`) unknown type tag `2`"
readPackedArray::tag:= "(at `1`) unknown array element type tag `2`"

% The most significant bit (msb) of every byte indicates whether more bytes follow.
% Values seem to be in little endian format, but this may depend on the machine?
% The least significant bit of the first byte is the sign bit.
%
% Integers between -64..63 = -2^6..2^6-1 are encoded as a single byte 0VVV VVVS
% where S is the sign bit and VVVVVV the absolute value - 1.
%
% Larger integers between -8192..8191 = -2^13..2^13-1 need two bytes.
% Larger integers between -1048576 .. 1048575 = -2^20..2^20-1 need three bytes.
Function readInteger(~mx) {
	Return(mx.BinaryRead(Integer))
%	With(pos:= mx.StreamPosition)
%	
%	Local(byte:= mx.BinaryRead("Byte"))
%	Local(absValue:= 0)
%	Local(shift:= 6)
%	
%	With(signBit:= BitGet(byte, 0))
%	absValue:= BitShiftRight(BitAnd(byte, 2^^01111110), 1)
%	
%	While(BitGet(byte, 7) != 0) {
%		byte:= mx.BinaryRead("Byte")
%		
%		absValue+= BitShiftLeft(BitAnd(byte, 2^^01111111), shift)
%		shift+= 7
%	}
%	
%	If(signBit != 0) {
%		Return(-1 - absValue)
%	} Else {
%		Return(absValue)
%	}
}

Function readString(~mx) {
	% Every string starts with a byte-count N followed by N bytes, the last of which is NUL and not
	% part of the string.
	%
	% TODO: convert from modified UTF-8 (embedded U+0000 is represented by the byte 16^^ff).
	With(pos:= mx.StreamPosition)
	With(size:= mx.readInteger)
	
	If(size <= 0) {
		Message(readString::size, BaseForm(pos, 16), size)
		mx.SetStreamPosition(pos)
		Return($Failed)
	}
	
	mx.BinaryRead("TerminatedString")
}

Function readMagicString(~mx, ~str, ~errsym) {
	With(pos:= mx.StreamPosition, read:= mx.readString())
	
	If(read =!= str) {
		Message(errsym::"magic", BaseForm(pos, 16), str, read)
		mx.SetStreamPosition(pos)
		Return(False)
	}
	
	Return(True)
}

Function doHeaderHelper(~mx, uiptr : "UnsignedInteger32" | "UnsignedInteger64") {
	With(intro:= mx.BinaryRead("TerminatedString"))
	With(unknownHeaderA:= mx.BinaryRead("Byte"))
	
	With(fileVersion:= mx.BinaryRead(uiptr))
	
	Local(programVersion)
	Switch(fileVersion) {
		Case(16^^08080808) { % Mma 3.0 .. 8.0
			programVersion:= mx.BinaryRead("Real64")
		}
		Case(1) { % Mma 9.0
			programVersion:= mx.BinaryRead("Real64")
		}
		Case(2) { % Mma 10.0
			programVersion:= mx.BinaryRead("Real64")
		}
		Case(3) { % Mma 10.3
			programVersion:= mx.BinaryRead({"UnsignedInteger32", "UnsignedInteger32"})
		}
		Case(~) {
			Message(doHeaderHelper::ver, fileVersion)
		}
	}
	
	With(systemStringSize:= mx.BinaryRead(uiptr))
	With(system:= mx.BinaryRead("TerminatedString"))
	With(padding:= mx.BinaryReadList("Byte", Ceiling(systemStringSize, 4) - systemStringSize))
	
	Local(unknownHeaderC:= {})
	Switch(fileVersion) {
		Case(2) { % Mma 10.0
			unknownHeaderC:= mx.BinaryRead({uiptr})
		}
		Case(3) { % Mma 10.3
			unknownHeaderC:= mx.BinaryRead({uiptr, uiptr})
		}
	}
	
	mx.readMagicString("ENDCONT", doHeaderHelper)
	Return({
		"intro" -> intro, 
		"file version" -> fileVersion, 
		"program version" -> programVersion, 
		"system" -> system, 
		"unknown" -> {unknownHeaderA, padding, unknownHeaderC}})
}

Function doHeader64(~mx) {
	mx.doHeaderHelper("UnsignedInteger64")
}
Function doHeader32(~mx) {
	mx.doHeaderHelper("UnsignedInteger32")
}

Function doStage1(~mx) {
	If(!mx.readMagicString("Stage 1", doStage1)) {
		Return({})
	}
	
	With(countPos:= mx.StreamPosition)
	
	With(count:= mx.readInteger)
	If(count < 0) {
		Message(doStage1::count, BaseForm(countPos, 16), count)
		Return({})
	}
	
	Return(Table(mx.readConstant, count))
}

%
% Returns a function which evaluates its argument (integer) to the corresponding entry from the 
% constant pool
%
% @param constPool A list of constants as returned by doStage1()
%
Function newConstLookup(~constPool:List) {
	Local(consts)
	
	constPool.MapIndexed((consts(#2[1]):= #1)&)
	
	consts(~i)::= (Message(newConstLookup::noconst, i); $Failed)
	
	Return(consts)
}

%
% Returns a function which evaluates its argument (integer) to the corresponding entry from the constant pool
%
% @param constPool   A list of constants as returned by doStage1()
% @param headPattern Which heads are recognized (MxString, MxInteger | MxLargeInteger, ...)
%
Function newSimpleConstLookup(~constPool:List, ~headPattern) {
	Local(consts)
	
	With(indices:= constPool.Position(headPattern, 2)[All, 1])
	With(values:= constPool[indices, 1])
	
	{indices, values}.MapThread((consts(#1):= #2) &)
	consts(~i)::= (Message(newSimpleConstLookup::notyp, i, headPattern); $Failed)
	
	Return(consts)
}

%
Function readReal(~mx) {
	With(pos:= mx.StreamPosition)
	
	With(numQuads:= 2 * mx.readInteger)
	With(sign:= mx.BinaryRead("Byte"))
	
	With(deltaExp:= mx.readInteger)
	With(unknown2:= mx.BinaryRead("Real64"))
	
	
	With(precisionBits:= mx.BinaryRead("Real64"))
	With(mantissaQuads:= mx.BinaryReadList("UnsignedInteger32", numQuads))
	With(mantissa:= Total(mantissaQuads * 2^(32 * Array(0..numQuads-1))))
	
	With(exactAbsValue:= mantissa * 2^(deltaExp - 32 numQuads))
	With(absValue:= SetPrecision(exactAbsValue, Log(10 precisionBits, 2.0)))
	
	%Return({pos, ((-1)^sign) absValue , sign, {32 numQuads, deltaExp, unknown2}, precisionBits, mantissa})
	If(sign != 0) {
		Return(-absValue)
	}
	
	Return(absValue)
}

Function readLargeInteger(~mx) {
	With(pos:= mx.StreamPosition)
	
	With(numQuads:= 2 * mx.readInteger)
	With(sign:= mx.BinaryRead("Byte"))
	
	With(quads:= mx.BinaryReadList("UnsignedInteger32", numQuads))
	With(absValue:= Total(quads * 2^(32 * Array(0..numQuads-1))))
	
	If(sign != 0) {
		Return(-absValue)
	}
	
	Return(absValue)
}

Function readPackedArray(~mx) {
	With(pos:= mx.StreamPosition)
	
	With(tag:= mx.readInteger)
	With(depth:= mx.readInteger)
	With(totalSize:= mx.readInteger)
	With(sizes:= Table(mx.readInteger, depth))
	
	Switch(tag) {
		Case(2) { % integer
			% On 32 bit machines, this is probably Integer32 ?
			With(flatData:= mx.BinaryReadList("Integer64", totalSize))
			
			Return({Integer, totalSize, sizes, flatData})
		}
		
		Case(3) { % real
			% On 32 bit machines, this is probably Integer32 ?
			With(flatData:= mx.BinaryReadList("Real64", totalSize))
			
			Return({Real, totalSize, sizes, flatData})
		}
		
		Case(4) { % complex
			% On 32 bit machines, this is probably Integer32 ?
			With(flatData:= mx.BinaryReadList("Complex128", totalSize))
			
			Return({Complex, totalSize, sizes, flatData})
		}
	}
	
	Message(readPackedArray::tag, BaseForm(pos, 16), tag)
	Return({$Failed, totalSize, sizes})
}

Function readConstant(~mx) {
	With(pos:= mx.StreamPosition, tag:= mx.readInteger)
	
	Switch(tag) {
		Case(-1) { % 16^^01 = -1: Double
			Return(MxReal(mx.BinaryRead("Real64")))
		}
		Case(-2) { % 16^^03 = -2: Machine size integer
			Return(MxInteger(mx.readInteger))
		}
		Case(-3) { % 16^^05 = -3: packed array
			Return(MxPackedArray(mx.readPackedArray))
		}
		
		Case(-6) { % 16^^0b = -6: A string
			Return(MxString(mx.readString))
		}
		Case(-7) { % 16^^0d = -7: Arbitrary size integer
			Return(MxLargeInteger(mx.readLargeInteger))
		}
		Case(-8) { % 16^^0f = -8: Arbitrary size floating point
			Return(MxLargeReal(mx.readReal))
		}
		
		Case(-10) { % 16^^13 = -10: Rational number
			Return(MxRationalRef(mx.readInteger, mx.readInteger))
		}
		Case(-11) { % 16^^15 = -11: Complex number
			Return(MxComplexRef(mx.readInteger, mx.readInteger))
		}
		
		Case(~) {
			Message(doStage1::tag, BaseForm(pos, 16), tag)
			Return($Failed)
		}
	}
}


%
% The symbol table
%
% @param constPool The table of constants as returned by doStage1()
%
Function doStage2(~mx, ~constPool) {
	If(!mx.readMagicString("Stage 2", doStage2)) {
		Return({})
	}
	
	With(stringLookup:= newSimpleConstLookup(constPool, MxString))
	
	With(countPos:= mx.StreamPosition)
	With(count:= mx.readInteger)
	If(count < 0) {
		Message(doStage2::count, BaseForm(countPos, 16), count)
		Return({})
	}
	
	Return(Table(mx.readSymbol(stringLookup), count))
}

%
% A symbol has a context (reference to string from constant pool),
% a name (reference to string from constant pool),
% two (more ?) unknown bytes 
% and an attributes number
%
Function readSymbol(~mx, ~stringLookup) {
	With(pos:= mx.StreamPosition)
	
	With(contextRef:= mx.readInteger)
	With(nameRef:= mx.readInteger)
	With(unknown1:= mx.readInteger)
	With(unknown2:= mx.readInteger)
	With(attrflags:= mx.readInteger)
	
	Return({pos, stringLookup(contextRef), stringLookup(nameRef), {unknown1, unknown2}, expandAttributeFlags(attrflags)})
}

Function expandAttributeFlags(~attrflags) {
	Return({
		If(BitGet(attrflags, 0) === 1, HoldFirst, Nothing),
		If(BitGet(attrflags, 1) === 1, HoldRest, Nothing),
		If(BitGet(attrflags, 2) === 1, Associative, Nothing), % Flat
		If(BitGet(attrflags, 3) === 1, Symmetric, Nothing), % Orderless
		If(BitGet(attrflags, 4) === 1, OneIdentity, Nothing),
		If(BitGet(attrflags, 5) === 1, Listable, Nothing),
		If(BitGet(attrflags, 6) === 1, "Constant", Nothing),
		If(BitGet(attrflags, 7) === 1, Protected, Nothing),
		If(BitGet(attrflags, 8) === 1, ReadProtected, Nothing),
		If(BitGet(attrflags, 9) === 1, NHoldFirst, Nothing),
		If(BitGet(attrflags, 10) === 1, NHoldRest, Nothing),
		If(BitGet(attrflags, 11) === 1, NumericFunction, Nothing),
		If(BitGet(attrflags, 12) === 1, SequenceHold, Nothing),
		If(BitGet(attrflags, 13) === 1, HoldAllComplete, Nothing),
		If(BitGet(attrflags, 14) === 1, Temporary, Nothing),
		If(BitOr(attrflags, 16^^7fff) =!= 16^^7fff, "unknown" -> BitOr(attrflags, 16^^7fff)-16^^7fff, Nothing)
	})
}

%
% Returns a function which evaluates its argument (integer) to the corresponding symbol name.
%
% @param symbols A list of symbol definitions as returned by doStage2()
%
Function newSymbolLookup(~symbols:List) {
	Local(names)
	
	symbols.MapIndexed((names(#2[1]):= #1[2] ++ #1[3])&)
	
	names(~i)::= (Message(newSymbolLookup::nosym, i); $Failed)
	
	Return(names)
}


%
% The expression table
%
Function doStage3(~mx, ~constPool, ~symbols) {
	If(!mx.readMagicString("Stage 3", doStage3)) {
		Return({})
	}
	
	With(countPos:= mx.StreamPosition)
	With(count:= mx.readInteger)
	If(count < 0) {
		Message(doStage3::count, BaseForm(countPos, 16), count)
		Return({})
	}
	
	With(constLookup:= newConstLookup(constPool))
	With(symbolLookup:= newSymbolLookup(symbols))
	
	Return(Table(mx.readExpr(constLookup, symbolLookup), count))
}

Function readExpr(~mx, ~constLookup, ~symbolLookup) {
	With(pos:= mx.StreamPosition)
	
	With(length:= mx.readInteger)
	If(length < 0) {
		%Message(readExpr::length, BaseForm(pos, 16), length)
		%
		% negative lengths seem to be special cases of empty lists ?
		%
		Return({pos, {}, length})
	}
	
	With(flags:= mx.readInteger)
	With(unknown2:= mx.readInteger)
	
	With(head:= mx.readExprPart(constLookup, symbolLookup))
	With(arguments:= Table(mx.readExprPart(constLookup, symbolLookup), length))
	
	Return({pos, head @@ arguments, expandExprFlags(flags), unknown2})
}

Function expandExprFlags(~flags) {
	Return({
		If(BitGet(flags, 3) === 1, IsAtom, Nothing),
		If(BitOr(flags, 16^^8) =!= 16^^8, "unknown" -> BitOr(flags, 16^^8) - 16^^8, Nothing)
	})
}

Function readExprPart(~mx, ~constLookup, ~symbolLookup) {
	With(pos:= mx.StreamPosition)
	With(tag:= mx.readInteger)
	
	Switch(tag) {
		Case(0 | 1 | 2 | 3 | 8 | 9) { % simple const reference
			% tag 00 = 0 = integer
			% tag 02 = 1 = large integer 
			% tag 04 = 2 = double
			% tag 06 = 3 = large real 
			% tag 10 = 8 = string
			% tag 12 = 9 = packed array
			With(ptr:= mx.readInteger)
			Return(constLookup(ptr));
		}
		
		Case(4) { % 08 = 4 = const rational
			With(ptr:= mx.readInteger)
			With(ratref:= constLookup(ptr))
			With(num:= constLookup(ratref[1]))
			With(den:= constLookup(ratref[2]))
			Return(MxRational(num, den));
		}
		
		Case(5) { % 0a = 5 = const complex
			With(ptr:= mx.readInteger)
			With(cplxref:= constLookup(ptr))
			With(re:= constLookup(cplxref[1]))
			With(im:= constLookup(cplxref[2]))
			Return(MxComplex(re, im));
		}
		
		Case(6) { % 0c = 6 = expr reference
			With(ptr:= mx.readInteger)
			Return(MxExpr(ptr));
		}
		
		Case(7) { % 0e = 7 = symbol reference
			With(ptr:= mx.readInteger)
			Return(MxSymbol(symbolLookup(ptr)));
		}
		
		Case(~) {
			Message(doStage3::tag, BaseForm(pos, 16), tag)
			Return($Failed)
		}
	}
}


%
% Returns a list of symbol definitions.
%
Function doStage4(~mx, ~constPool, ~symbols) {
	If(!mx.readMagicString("Stage 4", doStage4)) {
		Return({})
	}
	
	With(constLookup:= newConstLookup(constPool))
	With(symbolLookup:= newSymbolLookup(symbols))
	
	Return @ Last @ Gather(
		While(True) {
			With(pos:= mx.StreamPosition)
			
			With(symRef:= mx.readInteger)
			If(symRef = -1) {
				Break();
			}
			
			If((symRef > 0) =!= True) {
				Message(doStage4::badsym, BaseForm(pos, 16), symRef)
				Break();
			}
			
			With(rhs:= mx.readExprPart(constLookup, symbolLookup))
			
			With(kind:= mx.readInteger.Replace({
				0 -> "OwnValues",
				1 -> "SubValues",
				2 -> "UpValues",
				3 -> "DownValues",
				4 -> "NValues",
				5 -> "FormatValues",
				6 -> "DefaultValues",
				7 -> "Messages"
				}))
			
			Emit({pos, MxSymbol(symbolLookup(symRef)), rhs, kind})
		}
	)
}


End()

EndPackage()
