
BeginPackage("AutoCompletion`")

<<ExperimentalSyntax`

AutoCompletion`AutoCompleteName
AutoCompletion`AutoCompleteNamespaceGet
AutoCompletion`AutoCompleteOther
AutoCompletion`AutoCompleteFullFilename

Begin("AutoCompletion`Private`")

Function AutoCompleteName(~fullnames:List, ~part:String) {
	With(np:= namespacePattern(part))
	With(namespaces:= Union(fullnames.StringCases(~~~ns ++ "`" :> ns, 1).Apply(Join), allNamespacesFromPath()))
	With(byPrefix:= fullnames.selectByPrefix(np, part))
	With(byCamelCase:= fullnames.selectByCamelCase(np, part))
	With(nsByPrefix:= namespaces.selectByPrefix(StartOfString, part).Map(# ++ "`" &))
	
	Return(Join(
		byPrefix.makeShortNameList(part).Sort()[All,2],
		nsByPrefix, 
		byCamelCase.Complement(byPrefix).makeShortNameList(part).Sort()[All,2]))
}

Function AutoCompleteNamespaceGet(~part:String) {
	Return(allNamespacesFromPath().selectByPrefix(StartOfString, part).Map(# ++ "`" &))
}

Function AutoCompleteOther(~list:List, ~part:String) {
	Return(
		list.StringCases(
			StartOfString ++ part ++ ~~~, 
			1, IgnoreCase -> True
		).Apply(Join).Sort)
}

Function AutoCompleteFullFilename(~part:String) {
	With(split:= part.StringCases(~~~dir ++ ("/"|$PathnameSeparator) ++ (file:Except("/"|$PathnameSeparator)***) :> {dir,file}))
	
	If(split.Length =!= 1) {
		Return({})
	}
	Return(FileNames(split[1,1], split[1,2] ++ "*"));
}
	
	
Function namespacePattern(~part:String) {
	If(part.containsSubstring("`")) {
		Return(StartOfString)
	} Else {
		Return(StartOfString ++ Prepend($NamespacePath, $Namespace))
	}
}

Function selectByPrefix(~list, ~np, ~part) {
	Return(list.StringCases(
		np ++ part ++ Except("`")*** ++ EndOfString, 
		1, 
		IgnoreCase -> True).Apply(Join))
}

Function selectByCamelCase(~list, ~np, ~part) {
	Return(list.StringCases(
		np ++ makeCamelCasePattern(part) ++ Except("`")*** ++ EndOfString,
		1).Apply(Join))
}

Function allNamespacesFromPath() {
	Return(Union(
		$Path
			.FileNames(WordCharacter*** ++ ".pmath")
			.StringCases(
				$PathnameSeparator ++ (s: "A".."Z" ++ Except($PathnameSeparator)**) ++ ".pmath" :> s,
				1)
			.Apply(Join),
		$Path
			.FileNames(WordCharacter***)
			.FileNames("init.pmath")
			.StringCases(
				$PathnameSeparator ++ (s:"A".."Z" ++ Except($PathnameSeparator)**) ++ $PathnameSeparator ++ "init.pmath" :> s,
				1)
			.Apply(Join)
		))
}
	
% stringLength(~str:String)::= str.StringPosition(EndOfString)[1,-1]

Function makeCamelCasePattern(~str:String) {
	With(anyNonUpper:= "a".."z") % ... := If(str.containsSubstring("`"), Except("A".."Z"|"`"), Except("A".."Z"))
	Return(str.StringReplace({
		s: "A".."Z" ++ ("a".."z")*** ++ EndOfString :> s,
		s: "A".."Z" ++ ("a".."z")*** :> s ++ anyNonUpper***,
		WordBoundary ++ (char: "a".."z") ++ (s: ("a".."z")*** ++ RegularExpression("(?=[^a-z])")) :> ((WordBoundary ++ char) | upperCaseChar(char)) ++ s ++ anyNonUpper***,
		char: "a".."z" ++ EndOfString :> upperCaseChar(char),
		char: "a".."z" :> upperCaseChar(char) ++ anyNonUpper***}))
}
	

Function escapeRegex(~str:String) {
	Return(str.StringReplace(c: Characters("\[RawBackslash]^$.[|()?*+{") :> "\[RawBackslash]" ++ c))
}

upperCaseChar("a"):= "A"
upperCaseChar("b"):= "B"
upperCaseChar("c"):= "C"
upperCaseChar("d"):= "D"
upperCaseChar("e"):= "E"
upperCaseChar("f"):= "F"
upperCaseChar("g"):= "G"
upperCaseChar("h"):= "H"
upperCaseChar("i"):= "I"
upperCaseChar("j"):= "J"
upperCaseChar("k"):= "K"
upperCaseChar("l"):= "L"
upperCaseChar("m"):= "M"
upperCaseChar("n"):= "N"
upperCaseChar("o"):= "O"
upperCaseChar("p"):= "P"
upperCaseChar("q"):= "Q"
upperCaseChar("r"):= "R"
upperCaseChar("s"):= "S"
upperCaseChar("t"):= "T"
upperCaseChar("u"):= "U"
upperCaseChar("v"):= "V"
upperCaseChar("w"):= "W"
upperCaseChar("x"):= "X"
upperCaseChar("y"):= "Y"
upperCaseChar("z"):= "Z"
upperCaseChar(~c)::= c

containsSubstring(~str:String, ~sub:String)::= str.StringPosition(sub, 1).Length > 0

Function makeShortNameList(~list:List, ~part:String) {
	If(StringPosition(part, "`", 1).Length > 0) {
		Return(list.Map({#,#}&))
	} Else {
		Return(list.Map(makeShortName))
	}
}
Function makeShortName(~fullname:String) {
	Return(fullname.StringReplace({
			long: ~~~ ++ "`" ++ (short: Except("`")**) :> 
				{short, 
					If(Names(short).Length===1) { 
						short
					} Else {
						long
					}
				},
			~~long :> {long, long}
		},
		IgnoreCase -> True))
}


End()

EndPackage()
