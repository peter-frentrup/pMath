$Aborted::uage:= "$Aborted is a special symbol that is returned when an evaluation is aborted."
$BaseDirectory::usage:= "$BaseDirectory gives the scripts directory of you installation."
$ByteOrdering::usage:= "$ByteOrdering gives the native ordering of bytes in binary data on your computer."
$CharacterEncoding::usage:= "$CharacterEncoding is the default character encoding for opening text files."
$CommandLine::usage:= "$CommandLine is a list of the command line arguments that \(\"pMath\".StyleBox(FontSlant->\"Italic\")\) was started with."
$DialogLevel::usage:= "$DialogLevel gives the current subsession level."
$DirectoryStack::usage:= "$DirectoryStack is the list of current directories used."
$Failed::usage:= "$Failed is a special symbol that is returned when a particular operation did not succed."
$History::usage:= "$History(-\(\"n\".StyleBox(\"Arg\")\)) gives the \(\"n\".StyleBox(\"Arg\")\)-th last evaluation result.\n$History(\(\"n\".StyleBox(\"Arg\")\)) gives the \(\"n\".StyleBox(\"Arg\")\)-th evaluation result."
$HistoryLength::usage:= "$HistoryLength defines the number of results to be remembered by $History."
$InitialDirectory::usage:= "$InitialDirectory gives the initial directory when \(\"pMath\".StyleBox(FontSlant->\"Italic\")\) was started."
$Input::usage:= "$Input gives the current input file name."
$Line::usage:= "$Line is the number of the current evaluation."
$MachineEpsilon::usage:= "$MachineEpsilon is the smallest positive-machine precision number which can be added to 1.0 such that the result is not rouded back to 1.0."
$MachinePrecision::usage:= "$MachinePrecision gives the number of decimal digits of precision used for machine precision numbers."
$MaxExtraPrecision::usage:= "$MaxExtraPrecision specifies the maximum extra number of decimal digits of precision used for iterative approximation."
$MaxMachineNumber::usage:= "$MaxMachineNumber is the largest machine-precision number which is representable on the computer system."
$MessageCount::usage:= "$MessageCount(\(\"sym::tag\".StyleBox(\"Arg\")\)) gives the number of times the \(\"sym::tag\".StyleBox(\"Arg\")\) message was genereted during the current evaluation."
$MinMachineNumber::usage:= "$MinMachineNumber is the smallest machine-precision number which is representable on the computer system."
$Namespace::usage:= "$Namespace defines the current namespace."
$NamespacePath::usage:= "$NamespacePath is a list of namespaces, after $Namespace, to search in trying to find a symbol that has been entered."
$NewMessage::usage:= "$NewMessage is a global variable which, if set, is applied to the symbol name and tag of messages that are requested but have not yet been defined."
$NewSymbol::usage:= "$NewSymbol is a global variable which, if set, is applied to the name and namespace of newly created symbols."
$Packages::usage:= "$Packages is a list of all loaded packages."
$PageWidth::usage:= "$PageWidth is a global variable that defines the approximate number of characters per line."
$Path::usage:= "$Path gives the default search path for Get and related functions."
$PathnameSeparator:= "$PathnameSeparator is the character you operating system uses to separate directory names."
$ProcessId::usage:= "$ProcessId gives the ID assigned to the current \(\"pMath\".StyleBox(FontSlant->\"Italic\")\) process by the operating system."
$ProcessorCount::usage:= "$ProcessorCount gives the number of CPUs on your computer."
$ProcessorType::usage:= "$ProcessorType gives a string that specifies your CPU type."
$SystemCharacterEncoding::usage:= "$SystemCharacterEncoding is the default character encoding on your system."
$SystemId::usage:= "$SystemId gives a string that specifies your operating system."
$ThreadId::usage:= "$ThreadId gives the ID assigned to the current thread by the operating system/threading library."
Abort::usage:= "Abort() aborts the current evaluation.\nAbort(\(\"task\".StyleBox(\"Arg\")\)) aborts another task."
Abs::usage:= "Abs(\(\"z\".StyleBox(\"Arg\")\)) gives the absolute value of the real or complex number \(\"z\".StyleBox(\"Arg\")\)."
Accuracy::usage:= "Accuracy(\(\"x\".StyleBox(\"Arg\")\)) gives the effective number of digits to the right of the decimal point in number \(\"x\".StyleBox(\"Arg\")\)."
All::usage:= "All is a setting used for certain options. In Part and related functions, All specifies all parts at a particular level."
Alternatives::usage:= "\({{\"p\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \"|\", {\"p\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \"|\", \"\u2026\"}\) is a pattern object which represents any of the patterns \({\"p\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\)."
And::usage:= "\({{\"e\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \"&&\", {\"e\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \"&&\", \"\u2026\"}\) is the logical AND function. It evaluates its arguments in order, giving False immediately if any of them is False, And True if all of them are True."
Antialiasing::usage:= "Antialiasing is an option for Section and Style for setting antialiasing of graphics on and off."
Append::usage:= "Apend(\({\"list\".StyleBox(\"Arg\"), \",\", \"elem\".StyleBox(\"Arg\")}\)) returns \(\"list\".StyleBox(\"Arg\")\) with \(\"elem\".StyleBox(\"Arg\")\) appended."
Apply::usage:= "\({\"f\".StyleBox(\"Arg\"), \"@@\", \"list\".StyleBox(\"Arg\")}\) or Apply(\({\"list\".StyleBox(\"Arg\"), \",\", \"f\".StyleBox(\"Arg\")}\)) returns \(\"list\".StyleBox(\"Arg\")\) with head \(\"f\".StyleBox(\"Arg\")\)."
ArcCos::usage:= "ArcCos(\(\"z\".StyleBox(\"Arg\")\)) gives the arc cosine \({{\"cos\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcCosh::usage:= "ArcCosh(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic cosine of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
ArcCot::usage:= "ArcCot(\(\"z\".StyleBox(\"Arg\")\)) gives the arc cotangent \({{\"cot\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcCoth::usage:= "ArcCoth(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic cotangent of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
ArcCsc::usage:= "ArcCsc(\(\"z\".StyleBox(\"Arg\")\)) gives the arc cosecant \({{\"csc\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcCsch::usage:= "ArcCsch(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic cosecant of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
ArcSec::usage:= "ArcSec(\(\"z\".StyleBox(\"Arg\")\)) gives the arc secant \({{\"sec\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcSech::usage:= "ArcSech(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic secant of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
ArcSin::usage:= "ArcSin(\(\"z\".StyleBox(\"Arg\")\)) gives the arc sine \({{\"sin\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcSinh::usage:= "ArcSinh(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic sine of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
ArcTan::usage:= "ArcTan(\(\"z\".StyleBox(\"Arg\")\)) gives the arc tangend \({{\"tan\",SuperscriptBox({\"-\", \"1\"})}, \"(\", \"z\".StyleBox(\"Arg\"), \")\"}\) of the complex number \(\"z\".StyleBox(\"Arg\")\)."
ArcTanh::usage:= "ArcTanh(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) gives the inverse hyperbolic tangent of \(StyleBox(\"z\", BaseStyle -> \"Arg\")\)."
Arg::usage:= "Arg(\(\"z\".StyleBox(\"Arg\")\)) gives the argument of the complex number \(\"z\".StyleBox(\"Arg\")\)."
Array::usage:= "Array(\(\"n\".StyleBox(\"Arg\")\)) generates a list of Length \(\"n\".StyleBox(\"Arg\")\) with elements \({\"1\", \",\", \"2\", \",\", \"\u2026\", \",\", \"n\".StyleBox(\"Arg\")}\).\nArray(\(\"s..e\".StyleBox(\"Arg\")\)) generates a list with elements \({\"s\".StyleBox(\"Arg\"), \",\", {\"s\".StyleBox(\"Arg\"), \"+\", \"1\"}, \",\", \"\u2026\", \",\", \"e\".StyleBox(\"Arg\")}\)\nArray(\(\"s..e..d\".StyleBox(\"Arg\")\)) uses steps of length \(\"d\".StyleBox(\"Arg\")\) (default 1).\nArray(\({\"f\".StyleBox(\"Arg\"), \",\", \"n\".StyleBox(\"Arg\")}\)) generates a list of length \(\"n\".StyleBox(\"Arg\")\) with elements \({\"f\".StyleBox(\"Arg\"), \"(\", \"i\".StyleBox(\"Arg\"), \")\"}\).\nArray(\({\"f\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"n\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"n\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\)) generates an \({{\"n\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \"\xD7\", {\"n\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \"\xD7\", \"\u2026\"}\) array of lists, with elements \({\"f\".StyleBox(\"Arg\"), \"(\", {{\"i\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"i\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \")\"}\).\nArray(\({\"f\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"n\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"n\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \",\", {\"{\", {{\"s\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"s\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\)) generates a list using the index origins \({\"s\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\")).StyleBox(\"Arg\")}\) (default 1).\nArray(\({\"f\".StyleBox(\"Arg\"), \",\", \"dims\".StyleBox(\"Arg\"), \",\", \"orgins\".StyleBox(\"Arg\"), \",\", \"h\".StyleBox(\"Arg\")}\)) uses head \(\"h\".StyleBox(\"Arg\")\), rather than List, for each level of the array."
Assign::usage:= "\({\"lhs\".StyleBox(\"Arg\"), \"\u2254\", \"rhs\".StyleBox(\"Arg\")}\) evaluates \(\"rhs\".StyleBox(\"Arg\")\) and assigns the rules to be the value of \(\"lhs\".StyleBox(\"Arg\")\) in subsequent evaluations.\n\({{\"{\", {{\"l\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"l\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \"\u2254\", {\"{\", {{\"r\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"r\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\) evaluates the \({\"r\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\) and assigns the results to be the values of the corresponding \({\"l\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\)."
AssignDelayed::usage:= "\({\"lhs\".StyleBox(\"Arg\"), \"\u2a74\", \"rhs\".StyleBox(\"Arg\")}\) assigns \(\"rhs\".StyleBox(\"Arg\")\) to be the delayed value of \(\"lhs\".StyleBox(\"Arg\")\). \(\"rhs\".StyleBox(\"Arg\")\) is maintained in an unevaluated form. When \(\"lhs\".StyleBox(\"Arg\")\) appears, it is replaces by \(\"rhs\".StyleBox(\"Arg\")\), evaluated afresh each time."
Associative::usage:= "Associative is an attribute that can be assigned to a symbol \(\"f\".StyleBox(\"Arg\")\) to indicate that all expressions involving nested functions \(\"f\".StyleBox(\"Arg\")\) should be flattened out. This property is accounted for pattern matching."
Attributes::usage:= "Attributes(\(\"symbol\".StyleBox(\"Arg\")\)) gives the attributes for a symbol."
AutoDelete::usage:= "AutoDelete is an option for boxes that specifies whether a box is automatically deleted when its contents is edited."
AutoNumberFormating::usage:= "AutoNumberFormating is an option for Section that specifies whether numbers should be pretty-printed before output."
AutoSpacing::usage:= "AutoSpacing is an option for Style and Section which specifies whether spaces between successive characters should be adjusted automatically."
Automatic::usage:= "Automatic represents an option or other value that is to be chosen automatically by a built-in function."
Background::usage:= "Background is an option for boxes to specify its background color."
BaseStyle::usage:= "BaseStyle is an option for boxes to specify the base style to use for them."
Begin::usage:= "Begin(\"\(StyleBox(\"namespace\", BaseStyle -> \"Arg\")\) `\") resets the current namespace."
BeginPackage::usage:= "BeginPackage(\"\(StyleBox(\"namespace\", BaseStyle -> \"Arg\")\) `\") makes \(StyleBox(\"namespace\", BaseStyle -> \"Arg\")\)` and System` the only active namespaces.\nBeginPackage(\"\(StyleBox(\"namespace\", BaseStyle -> \"Arg\")\) `\", {\(StyleBox(\"need\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"need\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026}) additionally calls Get on the \(StyleBox({\"need\", SubscriptBox(\"i\")}, BaseStyle -> \"Arg\")\)."
BernoulliB::usage:= "BernoulliB(\(StyleBox(\"n\", BaseStyle -> \"Arg\")\)) gives the \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)-th Bernoulli number \({\"B\", SubscriptBox(\"n\")}\)."
BinaryFormat::usage:= "BinaryFormat is an option for OpenRead and related functions which specifies that a stream should be opened in binary format, so that no textual interpretation of newlines and other data is done."
BinaryRead::usage:= "BinaryRead(\(\"stream\".StyleBox(\"Arg\")\)) reads one byte of raw data from a binary input stream and returns an integer from 0 to 255.\nBinaryRead(\({\"stream\".StyleBox(\"Arg\"), \",\", \"type\".StyleBox(\"Arg\")}\)) reads an object of the specified type.\nBinaryRead(\({\"stream\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"type\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"type\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\)) reads a sequence of objects of the specified types."
BinaryWrite::usage:= "BinaryWrite(\({\"channel\".StyleBox(\"Arg\"), \",\", \"b\".StyleBox(\"Arg\")}\)) writes a byte of data, specified as an integer between 0 and 255.\nBinaryWrite(\({\"channel\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"b\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"b\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\)) writes a sequence of bytes.\nBinaryWrite(\(\"channel\".StyleBox(\"Arg\")\), \"\(\"string\".StyleBox(\"Arg\")\)\") writes the raw sequence of characters in \(\"string\".StyleBox(\"Arg\")\), terminated with a 0 byte.\nBinaryWrite(\({\"channel\".StyleBox(\"Arg\"), \",\", \"x\".StyleBox(\"Arg\"), \",\", \"type\".StyleBox(\"Arg\")}\)) writes an object of the specified type.\nBinaryWrite(\({\"channel\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"x\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"x\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \",\", \"type\".StyleBox(\"Arg\")}\)) writes a sequence of objects of the specified type.\nBinaryWrite(\({\"channel\".StyleBox(\"Arg\"), \",\", {\"{\", {{\"x\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"x\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \",\", {\"{\", {{\"type\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"type\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}}\)) writes a sequence of objects with a sequence of types."
Binomial::usage:= "Binomial(\(StyleBox(\"n\", BaseStyle -> \"Arg\")\), \(StyleBox(\"k\", BaseStyle -> \"Arg\")\)) gives the binomial coefficient \({\"(\", GridBox({{\"n\"}, {\"k\"}}), \")\"}\)."
Boole::uage:= "Boole(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) yields 1 if \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) is True and 0 if it is False."
BoxData::usage:= "BoxData(\(StyleBox(\"boxes\", BaseStyle -> \"Arg\")\)) represents the content of a non-text-Section."
BoxRotation::usage:= "BoxRotation is an option for RotationBox that specifies the angle by which its content should be rotated."
BoxTransformation::usage:= "BoxTransformation is an option for TransformatBox which specifies the affine transformation matrix to apply to its content."
BoxesToExpression::usage:= "BoxesToExpression(\(StyleBox(\"boxes\", BaseStyle -> \"Arg\")\)) parses \(StyleBox(\"pMath\", FontSlant -> \"Italic\")\) code represented in two-dimensional boxed form."
Break::usage:= "Break() exits the nearest enclosing Do, For or While.\nBreak(\(\"n\".StyleBox(\"Arg\")\)) exits the \(\"n\".StyleBox(\"Arg\")\)-th nearest enclosing Do, For or While."
Button::usage:= "Button(\({\"label\".StyleBox(\"Arg\"), \",\", \"action\".StyleBox(\"Arg\")}\)) represents a button, that is labeled with \(\"label\".StyleBox(\"Arg\")\) and evaluates \(\"action\".StyleBox(\"Arg\")\) whenever it is pressed."
ButtonBox::usage:= "ButtonBox(\(\"boxes\".StyleBox(\"Arg\")\)) is a low-level box construct that represents a button in a document expression."
ButtonFrame::usage:= "ButtonFrame is an option for Button and ButtonBox which specifies the type of frame to display around a button."
ButtonFunction::usage:= "ButtonFunction is an option for ButtonBox which specifes the action to perform when the button is clicked."
ByteCount::usage:= "ByteCount(\(\"expr\".StyleBox(\"Arg\")\)) gives the number of bytes used internally to store \(\"expr\".StyleBox(\"Arg\")\)."
ByteOrdering::usage:= "ByteOrdering is an option for BinaryRead, BinaryWrite and related functions which specifies what ordering of bytes should be assumed for your computer."
Cases::usage:= "Cases(\({{\"{\", {{\"e\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"e\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \",\", \"pattern\".StyleBox(\"Arg\")}\)) gives a list of the \({\"e\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\) that match the pattern.\nCases(\({{\"{\", {{\"e\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"e\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}, \",\", {\"pattern\".StyleBox(\"Arg\"), \"->\", \"rhs\".StyleBox(\"Arg\")}}\)) gives a list of the \(\"rhs\".StyleBox(\"Arg\")\) corresponding to the \({\"e\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\) that match the pattern.\nCases(\({\"expr\".StyleBox(\"Arg\"), \",\", \"pattern\".StyleBox(\"Arg\"), \",\", \"levelspec\".StyleBox(\"Arg\")}\)) gives a list of all parts of \(\"expr\".StyleBox(\"Arg\")\) at levels specified by \(\"levelspec\".StyleBox(\"Arg\")\) which match the pattern.\nCases(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"pattern\".StyleBox(\"Arg\"), \"->\", \"rhs\".StyleBox(\"Arg\")}, \",\", \"levelspec\".StyleBox(\"Arg\")}\)) gives the values of \(\"rhs\".StyleBox(\"Arg\")\) for parts which match the pattern.\nCases(\({\"expr\".StyleBox(\"Arg\"), \",\", \"pattern\".StyleBox(\"Arg\"), \",\", \"levelspec\".StyleBox(\"Arg\"), \",\", \"n\".StyleBox(\"Arg\")}\)) gives the first \(\"n\".StyleBox(\"Arg\")\) parts in \(\"expr\".StyleBox(\"Arg\")\) which match the pattern."
Catch::usage:= "Catch(\(\"expr\".StyleBox(\"Arg\")\)) returns the argument of the first Throw generated in the evaluation of \(\"expr\".StyleBox(\"Arg\")\).\nCatch(\({\"expr\".StyleBox(\"Arg\"), \",\", \"form\".StyleBox(\"Arg\")}\)) returns the argument of the first Throw generated in the evaluation of \(\"expr\".StyleBox(\"Arg\")\) if it matches \(\"form\".StyleBox(\"Arg\")\)."
Ceiling::usage:= "Ceiling(\(\"x\".StyleBox(\"Arg\")\)) gives the smallest integer greater than or equal to \(\"x\".StyleBox(\"Arg\")\).\nCeiling(\({\"x\".StyleBox(\"Arg\"), \",\", \"a\".StyleBox(\"Arg\")}\)) gives the smallest multiple of \(\"a\".StyleBox(\"Arg\")\) greater than or equal to \(\"x\".StyleBox(\"Arg\")\)."
Character::usage:= "Character represents a single character in Read."
CharacterEncoding::usage:= "CharacterEncoding is an option for OpenRead and related functions which the character encoding for text input and output."
Characters::usage:= "Characters(\(StyleBox(\"string\", BaseStyle -> \"Arg\")\)) gives a list of the characters in a string."
Chop::usage:= "Chop(\(\"expr\".StyleBox(\"Arg\")\)) replaces approximate real numbers in \(\"expr\".StyleBox(\"Arg\")\) which are close to zero by the exact integer 0."
CirclePlus::usage:= "CirclePlus(\({\"x\".StyleBox(\"Arg\"), \",\", \"y\".StyleBox(\"Arg\"), \",\", \"\u2026\"}\)) displays as \({\"x\".StyleBox(\"Arg\"), \"\u2295\", \"y\".StyleBox(\"Arg\"), \"\u2295\", \"\u2026\"}\) in StandardForm."
CircleTimes::usage:= "CircleTimes(\({\"x\".StyleBox(\"Arg\"), \",\", \"y\".StyleBox(\"Arg\"), \",\", \"\u2026\"}\)) displays as \({\"x\".StyleBox(\"Arg\"), \"\u2297\", \"y\".StyleBox(\"Arg\"), \"\u2297\", \"\u2026\"}\) in StandardForm."
Clear::usage:= "Clear(\({{\"symbol\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"symbol\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}\)) clears values and definitions for the \({\"symbol\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\).\nClear(\({{\"form\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"form\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}\)) clears values and definitions for all symbols whose names match any of the string patterns \({\"form\".StyleBox(\"Arg\"), SubscriptBox(\"i\".StyleBox(\"Arg\"))}\)."
Close::usage:= "Close(\(\"stream\".StyleBox(\"Arg\")\)) closes a stream."
Colon::usage:= "Colon(\({\"x\".StyleBox(\"Arg\"), \",\", \"y\".StyleBox(\"Arg\"), \",\", \"\u2026\"}\)) displays as \({\"x\".StyleBox(\"Arg\"), \"\u2236\", \"y\".StyleBox(\"Arg\"), \"\u2236\", \"\u2026\"}\)."
Complement::usage:= "Complement(\({{\"e\",SubscriptBox(\"all\")}.StyleBox(\"Arg\"), \",\", {\"e\".StyleBox(\"Arg\"),SubscriptBox(\"1\")}, \",\", {\"e\".StyleBox(\"Arg\"),SubscriptBox(\"2\")}, \",\", \"\u2026\"}\)) gives the elements in \({\"e\",SubscriptBox(\"all\")}.StyleBox(\"Arg\")\) which are not in any of the \({\"e\",SubscriptBox(\"i\")}.StyleBox(\"Arg\")\)."
Complex::usage:= "Complex(\({\"x\".StyleBox(\"Arg\"), \",\", \"y\".StyleBox(\"Arg\")}\)) represents a complex number with real part \(\"x\".StyleBox(\"Arg\")\) and imaginary part \(\"y\".StyleBox(\"Arg\")\)."
ComplexInfinity::usage:= "ComplexInfinity represents an infinite numerical quantity whose direction in the comlex plane is unknown."
Condition::usage:= "\({\"patt\".StyleBox(\"Arg\"), \"/?\", \"test\".StyleBox(\"Arg\")}\) is a pattern which matches only if the evaluation of \(\"test\".StyleBox(\"Arg\")\) yields True.\n\({\"lhs\".StyleBox(\"Arg\"), \":>\", {\"rhs\".StyleBox(\"Arg\"), \"/?\", \"test\".StyleBox(\"Arg\")}}\) represents a rule which applies only if the evaluation of \(\"test\".StyleBox(\"Arg\")\) yields True.\n\({\"lhs\".StyleBox(\"Arg\"), \"::=\", {\"rhs\".StyleBox(\"Arg\"), \"/?\", \"test\".StyleBox(\"Arg\")}}\) is a definition to be ued only if \(\"test\".StyleBox(\"Arg\")\) yields True."
ConstantArray::usage:= "ConstantArray(\(StyleBox(\"c\", BaseStyle -> \"Arg\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)) generates a list of \(StyleBox(\"n\", BaseStyle -> \"Arg\")\) copies of the element \(StyleBox(\"c\", BaseStyle -> \"Arg\")\).\nConstantArray(\(StyleBox(\"c\", BaseStyle -> \"Arg\")\), {\(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026}) generates an \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\) \xD7 \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\) \xD7 \u2026 array of nested lists containing the element \(StyleBox(\"c\", BaseStyle -> \"Arg\")\)."
Continue::usage:= "Continue() jumps to the next iteration of the neares enclosing For, Do or While loop."
CopyDirectory::usage:= "CopyDirectory(\({{\"dir\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"dir\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}}\)) copies the directory \({\"dir\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}\) to \({\"dir\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}\)."
CopyFile::usage:= "CopyFile(\({{\"file\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"file\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}}\)) copies \({\"file\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}\) to \({\"file\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}\)."
Cos::usage:= "Cos(\(\"z\".StyleBox(\"Arg\")\)) gives the cosine of \(\"z\".StyleBox(\"Arg\")\)."
Cosh::usage:= "Cosh(\(\"z\".StyleBox(\"Arg\")\)) gives the hyperbolic cosine of \(\"z\".StyleBox(\"Arg\")\)."
Cot::usage:= "Cot(\(\"z\".StyleBox(\"Arg\")\)) gives the cotangent of \(\"z\".StyleBox(\"Arg\")\)."
Coth::usage:= "Coth(\(\"z\".StyleBox(\"Arg\")\)) gives the hyperbolic cotangent of \(\"z\".StyleBox(\"Arg\")\)."
CreateDirectory::usage:= "Create(\"\(\"dir\".StyleBox(\"Arg\")\) \") creates a directory with name \(\"dir\".StyleBox(\"Arg\")\)."
Cross::usage:= "Cross(\(StyleBox(\"a\", BaseStyle -> \"Arg\")\), \(StyleBox(\"b\", BaseStyle -> \"Arg\")\)) gives the vector cross product of \(StyleBox(\"a\", BaseStyle -> \"Arg\")\) and \(StyleBox(\"b\", BaseStyle -> \"Arg\")\)."
Csc::usage:= "Csc(\(\"z\".StyleBox(\"Arg\")\)) gives the cosecant of \(\"z\".StyleBox(\"Arg\")\)."
Csch::usage:= "Csch(\(\"z\".StyleBox(\"Arg\")\)) gives the hyperbolic cosecant of \(\"z\".StyleBox(\"Arg\")\)."
Decrement::usage:= "\({\"--\", StyleBox(\"x\", BaseStyle -> \"Arg\")}\) decreases the value of \(StyleBox(\"x\", BaseStyle -> \"Arg\")\) by 1 and returns the new value.\n\({StyleBox(\"x\", BaseStyle -> \"Arg\"), \"-=\", \"y\"}\) decreses \(StyleBox(\"x\", BaseStyle -> \"Arg\")\) by \(StyleBox(\"y\", BaseStyle -> \"Arg\")\) and returns the new value."
DeepHoldAll::usage:= "DeepHoldAll is an attribute that can be assigned to a symbol \(\"f\".StyleBox(\"Arg\")\) to indicate that all arguments \(\"x\".StyleBox(\"Arg\")\), \(\"y\".StyleBox(\"Arg\")\), \u2026 in \({{\"f\".StyleBox(\"Arg\"), \"(\", {\"a\".StyleBox(\"Arg\"), \",\", \"b\".StyleBox(\"Arg\"), \",\", \"\u2026\"}, \")\"}, \"(\", {\"x\".StyleBox(\"Arg\"), \",\", \"y\".StyleBox(\"Arg\"), \",\", \"\u2026\"}, \")\"}\) are to be maintained in unevaluated form."
Default::usage:= "Default(\(\"f\".StyleBox(\"Arg\")\)) gives the defaul value for arguments of the function \(\"f\".StyleBox(\"Arg\")\) which obtain an Optional(\(\"x\".StyleBox(\"Arg\")\)) pattern.\nDefault(\(\"f\".StyleBox(\"Arg\")\)):= \(\"val\".StyleBox(\"Arg\")\) defines the default value for arguments of \(\"f\".StyleBox(\"Arg\")\)."
DefaultRules::usage:= "DefaultRules(\(\"f\".StyleBox(\"Arg\")\)) gives a list of transformation rules corresponding to the Defaul and Options definitions of \(\"f\".StyleBox(\"Arg\")\)."
DeleteContents::usage:= "DeleteContents is an option for DeleteDirectory which specifies whether the contents of directories should automatically be deleted."
DeleteDirectory::usage:= "DeleteDirectory(\"\(\"dir\".StyleBox(\"Arg\")\) \") deletes the specified directory."
DeleteFile::usage:= "DeleteFile(\"\(\"file\".StyleBox(\"Arg\")\) \") deletes a file."
Depth::usage:= "Depth(\(\"expr\".StyleBox(\"Arg\")\)) gives the maximum number of indices needed to specify any part of \(\"expr\".StyleBox(\"Arg\")\), plus one."
Det::usage:= "Det(\(StyleBox(\"m\", BaseStyle -> \"Arg\")\)) gives the determinant of a square matrix \(StyleBox(\"m\", BaseStyle -> \"Arg\")\)."
DiagonalMatrix::usage:= "DiagonalMatrix(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\) ) gives a matrix with elements \(StyleBox(\"list\", BaseStyle -> \"Arg\")\) on the leading diagonal, and 0 elsewhere.\nDiagonalMatrix(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"k\", BaseStyle -> \"Arg\")\)) gives a matrix with the elements of \(StyleBox(\"list\", BaseStyle -> \"Arg\")\) on the \(StyleBox(\"k\", BaseStyle -> \"Arg\")\)\(SuperscriptBox(\"th\")\) diagonal."
Dialog::usage:= "Dialog() enters a new subsession."
DigitCharacter::usage:= "DigitCharacter represents a digit character 0-9 in StringExpression."
Dimensions::usage:= "Dimensions(\(\"expr\".StyleBox(\"Arg\")\)) gives a list of dimensions of \(\"expr\".StyleBox(\"Arg\")\).\nDimensions(\({\"expr\".StyleBox(\"Arg\"), \",\", \"n\".StyleBox(\"Arg\")}\)) gives a list of dimensions of \(\"expr\".StyleBox(\"Arg\")\) down to level \(\"n\".StyleBox(\"Arg\")\)."
DirectedInfinity::usage:= "DirectedInfinity() represents an infinite numerical quantity whose direction in the comlex plane is unknown.\nDirectedInfinity(\(\"z\".StyleBox(\"Arg\")\)) represents an infinite numerical quantity that is a positive real multiple of the complex number \(\"z\".StyleBox(\"Arg\")\)."
Directory::usage:= "Directory() gives the current working directory."
DirectoryName::usage:= "DirectoryName(\"\(\"name\".StyleBox(\"Arg\")\) \") extracts the directory name from the specification for a file."
DivideBy::usage:= "\({\"x\", \"/=\", \"y\"}\) divides \(StyleBox(\"x\", BaseStyle -> \"Arg\")\) by \(StyleBox(\"y\", BaseStyle -> \"Arg\")\) and returns the new value."
Do::usage:= "Do(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")}\)) evaluates \(\"expr\".StyleBox(\"Arg\")\)  \({\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")\) times.\nDo(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"i\".StyleBox(\"Arg\"), \"->\", {\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")}}\)) evaluates \(\"expr\".StyleBox(\"Arg\")\) with the vaiable \(\"i\".StyleBox(\"Arg\")\) successively taking the values 1 through \({\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")\).\nDo(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"i\".StyleBox(\"Arg\"), \"->\", {{\"i\", SubscriptBox(\"min\")}.StyleBox(\"Arg\"), \"..\", {\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")}}}\)) evaluates \(\"expr\".StyleBox(\"Arg\")\) with the vaiable \(\"i\".StyleBox(\"Arg\")\) successively taking the values \({\"i\", SubscriptBox(\"min\")}.StyleBox(\"Arg\")\) through \({\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")\).\nDo(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"i\".StyleBox(\"Arg\"), \"->\", {{{\"i\", SubscriptBox(\"min\")}.StyleBox(\"Arg\"), \"..\", {\"i\", SubscriptBox(\"max\")}.StyleBox(\"Arg\")}, \"..\", \"di\".StyleBox(\"Arg\")}}}\)) uses steps \(\"di\".StyleBox(\"Arg\")\).\nDo(\({\"expr\".StyleBox(\"Arg\"), \",\", {\"i\".StyleBox(\"Arg\"), \"->\", {\"{\", {{\"i\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"i\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"},\"}\"}}}\)) uses the successive values \({\"i\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}\), \({\"i\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}\), \(\"\u2026\"\)."
Document::usage:= "Document(\({\"{\", {{\"section\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"section\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}, \"}\"}\)) is a low-level construct that represents a document manipulated by the \(\"pMath\".StyleBox(FontSlant->\"Italic\")\) front-end."
DocumentApply::usage:= "DocumentApply(\(StyleBox(\"document\", BaseStyle -> \"Arg\")\), \(StyleBox(\"data\", BaseStyle -> \"Arg\")\)) writes \(StyleBox(\"data\", BaseStyle -> \"Arg\")\) into a document at the current selection, replacing the first selection placeholder in \(StyleBox(\"data\", BaseStyle -> \"Arg\")\) by the current selection and then setting the cursor just after the data written."
Documents::usage:= "Documents() gives a list of all documents currently opened in the front-end."
Dot::usage:= "Dot(\(StyleBox(\"a\", BaseStyle -> \"Arg\")\), \(StyleBox(\"b\", BaseStyle -> \"Arg\")\), \u2026) gives the products of vectors, matrices and tensors."
DownRules::usage:= "DownRules(\(\"f\".StyleBox(\"Arg\")\)) gives a list of transformation rules corresponding to all definitions \({{\"f\".StyleBox(\"Arg\"), \"(\", \"\u2026\", \")\"}, \"::=\", \"\u2026\"}\)."
Drop::usage:= "Drop(\({\"list\".StyleBox(\"Arg\"), \",\", \"n\".StyleBox(\"Arg\")}\)) gives \(\"list\".StyleBox(\"Arg\")\) with the first \(\"n\".StyleBox(\"Arg\")\) elements dropped.\nDrop(\({\"list\".StyleBox(\"Arg\"), \",\", {\"-\", \"n\".StyleBox(\"Arg\")}}\)) gives \(\"list\".StyleBox(\"Arg\")\) with the last \(\"n\".StyleBox(\"Arg\")\) elements dropped.\nDrop(\({\"list\".StyleBox(\"Arg\"), \",\", {\"m\".StyleBox(\"Arg\"), \"..\", \"n\".StyleBox(\"Arg\")}}\)) gives \(\"list\".StyleBox(\"Arg\")\) with the elements \(\"m\".StyleBox(\"Arg\")\) through \(\"n\".StyleBox(\"Arg\")\) dropped.\nDrop(\({\"list\".StyleBox(\"Arg\"), \",\", {{\"m\".StyleBox(\"Arg\"), \"..\", \"n\".StyleBox(\"Arg\")}, \"..\", \"s\".StyleBox(\"Arg\")}}\)) gives \(\"list\".StyleBox(\"Arg\")\) with the elements \(\"m\".StyleBox(\"Arg\")\) through \(\"n\".StyleBox(\"Arg\")\) in steps of \(\"s\".StyleBox(\"Arg\")\) dropped.\nDrop(\({\"list\".StyleBox(\"Arg\"), \",\", {\"seq\".StyleBox(\"Arg\"), SubscriptBox(\"1\")}, \",\", {\"seq\".StyleBox(\"Arg\"), SubscriptBox(\"2\")}, \",\", \"\u2026\"}\)) gives a nested list in which elements specified by \({\"seq\", SubscriptBox(\"i\")}.StyleBox(\"Arg\")\) have been dropped at level \(\"i\".StyleBox(\"Arg\")\) in \(\"list\".StyleBox(\"Arg\")\)."
Editable::usage:= "Editable is an option for displayed objects which specifies whether their content can be edited interactively by the user."
Emit::usage:= "Emit(\(StyleBox(\"e\", BaseStyle -> \"Arg\")\)) specifies that \(StyleBox(\"e\", BaseStyle -> \"Arg\")\) should be collected by the nearest enclosing Gather.\nEmit(\(StyleBox(\"e\", BaseStyle -> \"Arg\")\), \(StyleBox(\"tag\", BaseStyle -> \"Arg\")\)) specifies that \(StyleBox(\"e\", BaseStyle -> \"Arg\")\) should be collected by the nearest enclosing Gather whose pattern matches \(StyleBox(\"tag\", BaseStyle -> \"Arg\")\)."
End::usage:= "End() returns the current namespace and reverts to a previous one."
EndOfFile::usage:= "EndOfFile is returned by Read and related functions when it reaches the end of file."
EndOfLine::usage:= "EndOfLine represents the end of a line in a string in StringMatch and related function."
EndOfString::usage:= "EndOfString represents the end of a string in StringMatch and related function."
EndPackage::usage:= "EndPackage() restores $Namespace and $NamespacePath to their values before the preceding BeginPackage, and preprend the current namespace to the list $NamespacePath."
Environment::usage:= "Environment(\"\(StyleBox(\"var\", BaseStyle -> \"Arg\")\) \") gives the value of an operating system environment variable.\nEnvironment() gives a list of all operating system environment variables in the form \({\"{\", {{{\"key\", SubscriptBox(\"1\")}, \"\\[Rule]\", {\"value\", SubscriptBox(\"1\")}}, \",\", {{\"key\", SubscriptBox(\"2\")}, \"\\[Rule]\", {\"value\", SubscriptBox(\"2\")}}, \",\", \"\\[Ellipsis]\"}, \"}\"}\)"
Equal::usage:= "\(StyleBox(\"lhs\", BaseStyle -> \"Arg\")\) = \(StyleBox(\"rhs\", BaseStyle -> \"Arg\")\) returns true if \(StyleBox(\"lhs\", BaseStyle -> \"Arg\")\) and \(StyleBox(\"rhs\", BaseStyle -> \"Arg\")\) are equal."
EulerGamma::usage:= "EulerGamma is Euler's constant \(\"\\u03B3\"\) with numerical value \u2243 0.577216."
Evaluate::usage:= "Evaluate(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) causes \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) to evaluate even if it occurs as the argument of a function whose attributes specify that it should be held unevaluated."
EvaluateDelayed::usage:= "EvaluateDelayed(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"t\", BaseStyle -> \"Arg\")\)) causes \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) to be evaluated in \(StyleBox(\"t\", BaseStyle -> \"Arg\")\) seconds."
EvaluationSequence::usage:= "\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\) ; \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\) ; \u2026 evaluates the \(StyleBox({\"expr\", SubscriptBox(\"i\")}, BaseStyle -> \"Arg\")\) in order and gives the last one as the result."
Except::usage:= "Except(\(StyleBox(\"c\", BaseStyle -> \"Arg\")\)) is a pattern which represents any expression except one that matches \(StyleBox(\"c\", BaseStyle -> \"Arg\")\).\nExcept(\(StyleBox(\"c\", BaseStyle -> \"Arg\")\), \(StyleBox(\"p\", BaseStyle -> \"Arg\")\)) represents any expression that matches \(StyleBox(\"p\", BaseStyle -> \"Arg\")\) but not \(StyleBox(\"c\", BaseStyle -> \"Arg\")\)."
Exp::usage:= "Exp(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) is the exponential function."
Expand::usage:= "Expand(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) expands out products and positive integer powers in \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)."
ExpandAll::usage:= "ExpandAll(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) expands out products and integer powers in any part of \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)."
Expression::usage:= "Expression is a symbol that represents \(StyleBox(\"pMath\", FontSlant -> \"Italic\")\) expressions in Read and related functions."
Extract::usage:= "Extract(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"list\", BaseStyle -> \"Arg\")\)) extracts the part of \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) at the position specified by \(StyleBox(\"list\", BaseStyle -> \"Arg\")\).\nExtract(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"h\", BaseStyle -> \"Arg\")\)) wraps the extracted part with the head \(StyleBox(\"h\", BaseStyle -> \"Arg\")\)."
Factorial::usage:= "\(StyleBox(\"n\", BaseStyle -> \"Arg\")\)! gives the factorial of \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)."
Factorial2::usage:= "\(StyleBox(\"n\", BaseStyle -> \"Arg\")\)!! gives the double factorial of \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)."
False::usage:= "False is the symbol for the boolean value false."
File::usage:= "File represents an ordinary file as a result of FileType."
FileByteCount::usage:= "FileByteCount(\"\(StyleBox(\"file\", BaseStyle -> \"Arg\")\)\") gives the number of bytes in a file."
FileNames::usage:= "FileNames(\\) lists all files in the current working directory.\nFileNames(\(StyleBox(\"form\", BaseStyle -> \"Arg\")\)) lists all files in the current directory whose names match the string pattern \(StyleBox(\"form\", BaseStyle -> \"Arg\")\).\nFileNames({\(StyleBox(\"form\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"form\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026}) lists files whose names match any of the \(StyleBox({\"form\", SubscriptBox(\"i\")}, BaseStyle -> \"Arg\")\).\nFileName(\(StyleBox(\"forms\", BaseStyle -> \"Arg\")\), {\(StyleBox(\"dir\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"dir\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026}) lists files with names matching \(StyleBox(\"forms\", BaseStyle -> \"Arg\")\) in any of the \(StyleBox({\"dir\", SubscriptBox(\"i\")}, BaseStyle -> \"Arg\")\)."
FileType::usage:= "FileType(\"\(StyleBox(\"file\", BaseStyle -> \"Arg\")\)\") gives the type of a file: File, Directory, Special or None."
FillBox::usage:= "FillBox(\(StyleBox(\"content\", BaseStyle -> \"Arg\")\)) is a box that fills up the whole line by repeating \(StyleBox(\"content\", BaseStyle -> \"Arg\")\)."
Finally::usage:= "Finally(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"end\", BaseStyle -> \"Arg\")\)) evaluates \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) and then \(StyleBox(\"end\", BaseStyle -> \"Arg\")\), even if an exception occurs during the evaluation of \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)."
Find::usage:= "Find(\(StyleBox(\"stream\", BaseStyle -> \"Arg\")\), \(StyleBox(\"form\", BaseStyle -> \"Arg\")\)) finds the first line in \(StyleBox(\"stream\", BaseStyle -> \"Arg\")\) that matches \(StyleBox(\"form\", BaseStyle -> \"Arg\")\)."
FindList::usage:= "FindList(\(StyleBox(\"file\", BaseStyle -> \"Arg\")\), \(StyleBox(\"form\", BaseStyle -> \"Arg\")\)) gives a list of all lines in \(StyleBox(\"file\", BaseStyle -> \"Arg\")\) that match \(StyleBox(\"form\", BaseStyle -> \"Arg\")\).\nFindList(\(StyleBox(\"file\", BaseStyle -> \"Arg\")\), \(StyleBox(\"form\", BaseStyle -> \"Arg\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)) returns the first \(StyleBox(\"n\", BaseStyle -> \"Arg\")\) occurences."
First::usage:= "First(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) gives the first element in \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)."
Flatten::usage:= "Flatten(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\)) flattens out nested lists.\nFlatten(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)) flattens to level \(StyleBox(\"n\", BaseStyle -> \"Arg\")\).\nFlatten(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\), \(StyleBox(\"h\", BaseStyle -> \"Arg\")\)) flattens subexpressions with head \(StyleBox(\"h\", BaseStyle -> \"Arg\")\)."
Floor::usage:= "Floor(\(StyleBox(\"x\", BaseStyle -> \"Arg\")\)) gives the largest integer less than or equal to \(StyleBox(\"x\", BaseStyle -> \"Arg\")\).\nFloor(\(StyleBox(\"x\", BaseStyle -> \"Arg\")\), \(StyleBox(\"a\", BaseStyle -> \"Arg\")\)) gives the largest multiple of \(StyleBox(\"a\", BaseStyle -> \"Arg\")\) less than or equal to \(StyleBox(\"x\", BaseStyle -> \"Arg\")\)."
Fold::usage:= "Fold(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"f\", BaseStyle -> \"Arg\")\), \(StyleBox(\"x\", BaseStyle -> \"Arg\")\)) gives the last element of FoldList(\(StyleBox(\"list\", BaseStyle -> \"Arg\")\), \(StyleBox(\"f\", BaseStyle -> \"Arg\")\), \(StyleBox(\"x\", BaseStyle -> \"Arg\")\))."
FoldList::usage:= "FoldList({\(StyleBox(\"a\", BaseStyle -> \"Arg\")\), \(StyleBox(\"b\", BaseStyle -> \"Arg\")\), \u2026}, \(StyleBox(\"f\", BaseStyle -> \"Arg\")\), \(StyleBox(\"x\", BaseStyle -> \"Arg\")\)) gives {\(StyleBox(\"x\", BaseStyle -> \"Arg\")\), \(StyleBox(\"f\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"x\", BaseStyle -> \"Arg\")\), \(StyleBox(\"a\", BaseStyle -> \"Arg\")\)), \(StyleBox(\"f\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"f\", BaseStyle -> \"Arg\")\)(\(StyleBox(\"x\", BaseStyle -> \"Arg\")\), \(StyleBox(\"a\", BaseStyle -> \"Arg\")\)), \(StyleBox(\"b\", BaseStyle -> \"Arg\")\)), \u2026}."
FontColor::usage:= "FontColor is an option for Section, Style and related constructs which specifies the default color in which to render text."
FontFamily::usage:= "FontFamily is an option for Section, Style and related constructs which specifies the font family in which text should be rendered."
FontSize::usage:= "FontSize is an option for Section, Style and related constructs which specifies the default font size in which to render text."
FontSlant::usage:= "FontSlant is an option for Section, Style and related constructs which specifies how slanted characters in text should be."
FontWeight::usage:= "FontWeight is an option for Style, Section and related constructs which specifies how heavy characters in a font should be."
For::usage:= "For(\(StyleBox(\"start\", BaseStyle -> \"Arg\")\), \(StyleBox(\"test\", BaseStyle -> \"Arg\")\), \(StyleBox(\"incr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"body\", BaseStyle -> \"Arg\")\)) executes \(StyleBox(\"start\", BaseStyle -> \"Arg\")\), then repeatedly evaluates \(StyleBox(\"body\", BaseStyle -> \"Arg\")\) and \(StyleBox(\"incr\", BaseStyle -> \"Arg\")\) until \(StyleBox(\"test\", BaseStyle -> \"Arg\")\) fails to give True."
FractionBox::usage:= "FractionBox(\(StyleBox(\"x\", BaseStyle -> \"Arg\")\), \(StyleBox(\"y\", BaseStyle -> \"Arg\")\)) is a low-level construct that represents \(FractionBox(StyleBox(\"x\", BaseStyle -> \"Arg\"), StyleBox(\"y\", BaseStyle -> \"Arg\"))\) in document expression."
Framed::usage:= "Framed(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) displays \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) inside a frame."
FrontEndObject::usage:= "FrontEndObject(\u2026) represents any user interface object in \(StyleBox(\"pMath\", FontSlant -> Italic)\) code."
FrontEndTokenExecute::usage:= "FrontEndTokenExecute(\\\"\(StyleBox(\"cmd\", BaseStyle -> \"Arg\")\) \\\") executes the specified front end command token, typically corresponding to a front end menu item."
FullForm::usage:= "FullForm(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) prints as the full form of \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), without any special syntax."
Function::usage:= "Function(\(StyleBox(\"body\", BaseStyle -> \"Arg\")\)) or \(StyleBox(\"body\", BaseStyle -> \"Arg\")\) & is a pure funtion. The formal parameters are # (or #1), #2, etc.\nFunction({\(StyleBox(\"x\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"x\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026}, \(StyleBox(\"body\", BaseStyle -> \"Arg\")\)) is a pure function with a list of named formal parameters.\nFunction(\(StyleBox(\"params\", BaseStyle -> \"Arg\")\), \(StyleBox(\"body\", BaseStyle -> \"Arg\")\), \(StyleBox(\"attr\", BaseStyle -> \"Arg\")\)) is a pure function with attributes \(StyleBox(\"attr\", BaseStyle -> \"Arg\")\)."
GCD::usage:= "GCD(\(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"1\")\), \(StyleBox(\"n\", BaseStyle -> \"Arg\")\)\(SubscriptBox(\"2\")\), \u2026) returns the greatest common divisor of the integers \(StyleBox({\"n\", SubscriptBox(\"i\")}, BaseStyle -> \"Arg\")\)."
Gamma::usage:= "Gamma(\(StyleBox(\"z\", BaseStyle -> \"Arg\")\)) is the Euler gamma function \({\"\\u0393\", \"(\", StyleBox(\"z\", BaseStyle -> \"Arg\"), \")\"}\)."
Gather::usage:= "Gather(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\)) returns the value of \(StyleBox(\"expr\", BaseStyle -> \"Arg\")\) together with a list of all expressions to which Emit has been applied during its evaluation.\nGather(\(StyleBox(\"expr\", BaseStyle -> \"Arg\")\), \(StyleBox(\"patt\", BaseStyle -> \"Arg\")\)) gathers only expressions emitted with tags that match \(StyleBox(\"patt\", BaseStyle -> \"Arg\")\)."
General::usage:= "General is a symbol to which general system messages are attached."
Get::usage:= "\({\"<<\", StyleBox(\"name\", BaseStyle -> \"Arg\")}\) opens a file, evaluates each expression in it, and returns the last one. When \(StyleBox(\"name\", BaseStyle -> \"Arg\")\) is a namespace which has already been included, nothing happens."
Goto::usage:= "Goto(\(StyleBox(\"tag\", BaseStyle -> \"Arg\")\)) searches Label(\(StyleBox(\"tag\", BaseStyle -> \"Arg\")\)) and transfers control to that point."





