Print($Input)
BeginPackage("TestSuite`")

TestSuite`Assert
TestSuite`AssertEqual
TestSuite`AssertUnequal
TestSuite`AssertTrue
TestSuite`AssertFalse
TestSuite`AssertHead

Begin("TestSuite`Private`")

ClearAll(Assert, AssertEqual);

Assert::fail:= "Assertion `1` failed with `2`."
AssertEqual::fail:= "`1` and `2` should equal, but found `3` =!= `4`."
AssertUnequal::fail:= "`1` and `2` should not equal, but found `3` === `4`."
AssertTrue::fail:= "`1` should give True, but found `2`."
AssertFalse::fail:= "`1` should give False, but found `2`."
AssertHead::fail:= "`1` should give expression with head `2`, but found `3`."

Attributes(suppressDebugInfo):= {HoldFirst}
suppressDebugInfo(~expr)::= ReleaseHold(Developer`SetDebugInfoAt(HoldComplete(expr), /\/, 1))

Attributes(Assert)::= HoldFirst;
Function Assert(~cond) {
	With(evalCond := cond)
	If(evalCond =!= True) {
		suppressDebugInfo @ Message(Assert::fail, HoldForm(cond), HoldForm(evalCond))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
Assert(~~~args) /? IsValidArgumentCount(Assert, Length @ HoldComplete(args), 1, 1)::= $Failed

Attributes(AssertEqual)::= HoldAll;
Function AssertEqual(~lhs, ~rhs) {
	With(evalLhs := lhs, evalRhs:= rhs)
	If(evalLhs =!= evalRhs) {
		Local(formatLhs:= HoldForm(evalLhs), formatRhs:= HoldForm(evalRhs))
		If(ToString(formatLhs) === ToString(formatRhs)) {
			formatLhs:= HoldForm @ InputForm(evalLhs)
			formatRhs:= HoldForm @ InputForm(evalRhs)
			If(ToString(formatLhs) === ToString(formatRhs)) {
				formatLhs:= HoldForm @ FullForm(evalLhs)
				formatRhs:= HoldForm @ FullForm(evalRhs)
			}
		}
		suppressDebugInfo @ Message(AssertEqual::fail,
			HoldForm(lhs),
			HoldForm(rhs),
			formatLhs,
			formatRhs)
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertEqual(~~~args) /? IsValidArgumentCount(AssertEqual, Length @ HoldComplete(args), 2, 2)::= $Failed

Attributes(AssertUnequal)::= HoldAll;
Function AssertUnequal(~lhs, ~rhs) {
	With(evalLhs := lhs, evalRhs:= rhs)
	If(evalLhs === evalRhs) {
		suppressDebugInfo @ Message(AssertUnequal::fail,
			HoldForm(lhs),
			HoldForm(rhs),
			HoldForm(evalLhs),
			HoldForm(evalRhs))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertUnequal(~~~args) /? IsValidArgumentCount(AssertUnequal, Length @ HoldComplete(args), 2, 2)::= $Failed

Attributes(AssertTrue)::= HoldFirst;
Function AssertTrue(~value) {
	With(eval := value)
	If(eval =!= True) {
		suppressDebugInfo @ Message(AssertTrue::fail,
			HoldForm(value),
			HoldForm(eval))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertTrue(~~~args) /? IsValidArgumentCount(AssertTrue, Length @ HoldComplete(args), 1, 1)::= $Failed

Attributes(AssertFalse)::= HoldFirst;
Function AssertFalse(~value) {
	With(eval := value)
	If(eval =!= False) {
		suppressDebugInfo @ Message(AssertFalse::fail,
			HoldForm(value),
			HoldForm(eval))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertFalse(~~~args) /? IsValidArgumentCount(AssertFalse, Length @ HoldComplete(args), 1, 1)::= $Failed

Attributes(AssertHead)::= HoldFirst;
Function AssertHead(~value, ~head) {
	With(eval := value)
	If(Head(eval) =!= head) {
		suppressDebugInfo @ Message(AssertHead::fail,
			HoldForm(value),
			HoldForm(head),
			HoldForm(eval))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertHead(~~~args) /? IsValidArgumentCount(AssertHead, Length @ HoldComplete(args), 2, 2)::= $Failed


Off(General::stop)

defaultMessageFormatter:= Internal`$MessageFormatter
If(defaultMessageFormatter === Automatic || HoldComplete @@ {defaultMessageFormatter} === HoldComplete(Internal`$MessageFormatter)) {
	defaultMessageFormatter:= ColonForm
}
$canQuit:= True
With(defaultMessageFormatter:= defaultMessageFormatter) {
	Internal`$MessageFormatter:= Function(, $canQuit:= False; defaultMessageFormatter(##))
}

testFiles:= $Input.DirectoryName.ToFileName("tests").FileNames("*.pmath")

Do(i -> 1..Length(testFiles)) {
	Print(StringForm("Run test `1` of `2`: `3`", i, Length(testFiles), testFiles[i]));
	
	Clear($MessageCount)
	
	Remove @ Evaluate("TestSuite`Private`Test" ++ ToString(i) ++ "`*")
	BeginPackage("TestSuite`Private`Test" ++ ToString(i) ++ "`", {"TestSuite`"});
	
	Get(testFiles[i]);
	
	EndPackage();
}

End();

EndPackage();

If(TestSuite`Private`$canQuit) {
	Quit()
}
