Print($Input)
BeginPackage("TestSuite`", {"ExperimentalSyntax`"})

TestSuite`Assert
TestSuite`AssertEqual

Begin("TestSuite`Private`")

ClearAll(Assert, AssertEqual);

Assert::fail:= "Assertion `1` failed with `2`."
AssertEqual::fail:= "`1` and `2` should equal, but found `3` =!= `4`."
AssertUnequal::fail:= "`1` and `2` should not equal, but found `3` === `4`."

Attributes(suppressDebugInfo):= {HoldFirst}
suppressDebugInfo(~expr)::= ReleaseHold(Developer`SetDebugInfoAt(HoldComplete(expr), /\/, 1))

Attributes(Assert)::= HoldFirst;
Function Assert(~cond) {
	With(evalCond := cond)
	If(evalCond =!= True) {
		suppressDebugInfo @ Message(Assert::fail, HoldForm(cond), HoldForm(evalCond))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
Assert(~~~args) /? IsValidArgumentCount(Assert, Length @ HoldComplete(args), 1, 1)::= $Failed

Attributes(AssertEqual)::= HoldAll;
Function AssertEqual(~lhs, ~rhs) {
	With(evalLhs := lhs, evalRhs:= rhs)
	If(evalLhs =!= evalRhs) {
		suppressDebugInfo @ Message(AssertEqual::fail,
			HoldForm(lhs),
			HoldForm(rhs),
			HoldForm(evalLhs),
			HoldForm(evalRhs))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertEqual(~~~args) /? IsValidArgumentCount(AssertEqual, Length @ HoldComplete(args), 2, 2)::= $Failed

Attributes(AssertUnequal)::= HoldAll;
Function AssertUnequal(~lhs, ~rhs) {
	With(evalLhs := lhs, evalRhs:= rhs)
	If(evalLhs === evalRhs) {
		suppressDebugInfo @ Message(AssertUnequal::fail,
			HoldForm(lhs),
			HoldForm(rhs),
			HoldForm(evalLhs),
			HoldForm(evalRhs))
	}
	
	% Prevent tail recursion, so the location of this Assert() call is shown in the message's stack trace above.
	/\/ /? True
}
AssertUnequal(~~~args) /? IsValidArgumentCount(AssertUnequal, Length @ HoldComplete(args), 2, 2)::= $Failed

testFiles:= $Input.DirectoryName.ToFileName("tests").FileNames("*.pmath")

Do(i -> 1..Length(testFiles)) {
	Print(StringForm("Run test `1` of `2`: `3`", i, Length(testFiles), testFiles[i]));
	
	Clear($MessageCount)
	
	Remove @ Evaluate("TestSuite`Private`Test" ++ ToString(i) ++ "`*")
	BeginPackage("TestSuite`Private`Test" ++ ToString(i) ++ "`", {"TestSuite`", "ExperimentalSyntax`"});
	
	Get(testFiles[i]);
	
	EndPackage();
}

End();

EndPackage();
